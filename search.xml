<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C# 基础知识系列- 13 常见类库介绍（二）时间日期</title>
      <link href="/basecharp/63386.html"/>
      <url>/basecharp/63386.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>上一篇内容介绍了Console类和Math类，这篇内容着重介绍一下C#中时间日期的处理方式。</p><blockquote><p>上一篇勘误： 上一篇中关于静态类没有构造函数，这一表述有误。正确的说法是C#中静态类不包含常规构造函数，但可以添加一个静态构造函数。<br>静态构造函数与普通普通构造函数的区别是，静态构造函数没有访问修饰符，即访问修饰符是默认的，且静态构造函数只能是无参的，并添加 static 修饰符。</p></blockquote><a id="more"></a><h1 id="1-DateTime-和-TimeSpan"><a href="#1-DateTime-和-TimeSpan" class="headerlink" title="1  DateTime 和 TimeSpan"></a>1  DateTime 和 TimeSpan</h1><p>DateTime表示时间点，TimeSpan表示 时间段。在C#中，这两个都是结构体，结构体与类都能继承并实现接口，但是与类不同的是结构体在内存中存放在栈里。这部分在微软官方文档中关于CLR有过介绍。后续也会针对CLR写一个系列。这里就不做过多的介绍了。</p><p>DateTime延伸开来也有很多内容要讲，这里只做一个大体的介绍：</p><h2 id="1-创建一个DateTime"><a href="#1-创建一个DateTime" class="headerlink" title="1. 创建一个DateTime"></a>1. 创建一个DateTime</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DateTime time = <span class="keyword">new</span> DateTime(<span class="number">2018</span>,<span class="number">1</span>,<span class="number">20</span>);<span class="comment">// 2018年1月20日 0时0分0秒</span></span><br><span class="line">DateTime time = <span class="keyword">new</span> DateTime(<span class="number">2019</span>,<span class="number">11</span>,<span class="number">30</span>, <span class="number">12</span>, <span class="number">01</span>, <span class="number">59</span>);<span class="comment">// 2019年11月30日，12:01:59</span></span><br><span class="line">DateTime time = DateTime.Now;<span class="comment">// 表示代码运行到这里的系统时间，一般意义上的当前时间</span></span><br><span class="line">DateTime time = <span class="keyword">new</span> DateTime(<span class="keyword">long</span> ticks);<span class="comment">// 以时间刻度计算日期，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示</span></span><br></pre></td></tr></table></figure><p>这些是我们常用的创建日期的方法，还有一些通过日历对象结合日历来创建日期时间，不过这块在不涉及到程序国际化之前不需要做过多的深入。</p><p>需要注意的是，<code>DateTime.Now</code>在每次运行结果都不一样，这个属性返回的是系统运行时<strong>当前时间</strong>，而不是程序编写时的时间。与之对应的还有一个<code>DaTime.Year</code>，这个属性返回结果是<strong>当天</strong>，也就是Now去掉时分秒的时间。</p><h2 id="2-日期变更"><a href="#2-日期变更" class="headerlink" title="2. 日期变更"></a>2. 日期变更</h2><p>DateTime提供了很多可以变更日期的方法，这些方法可以获取一个计算之后的时间值：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddDays</span> (<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span>;<span class="comment">// 计算天数，正数代表 天数增加，负数代表天数减少</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddHours</span> (<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span>;<span class="comment">// 返回一个新的 DateTime，它将指定的小时数加到此实例的值上。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddMilliseconds</span> (<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span>;<span class="comment">//返回一个新的 DateTime，它将指定的毫秒数加到此实例的值上。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddMonths</span> (<span class="params"><span class="keyword">int</span> months</span>)</span>;<span class="comment">//返回一个新的 DateTime，它将指定的月数加到此实例的值上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddMonths</span> (<span class="params"><span class="keyword">int</span> months</span>)</span>;<span class="comment">// 返回一个新的 DateTime，它将指定的月数加到此实例的值上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddSeconds</span> (<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span>;<span class="comment"><span class="doctag">///</span> 返回一个新的 DateTime，它将指定的秒数加到此实例的值上。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddTicks</span> (<span class="params"><span class="keyword">long</span> <span class="keyword">value</span></span>)</span>;<span class="comment">// 返回一个新的 DateTime，它将指定的刻度数加到此实例的值上，也就是构造函数里的ticks</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DateTime <span class="title">AddYears</span> (<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>)</span>;<span class="comment">//返回一个新的 DateTime，它将指定的年份数加到此实例的值上。</span></span><br></pre></td></tr></table></figure><p>以上是DateTime类对日期计算的支持，其中参数如果是正的表示时间后移，如果是负的则表示时间向前移。</p><p>需要注意的一点就是，日期的变更不会在原有的DateTime元素上变更，会返回一个计算之后的日期类型。</p><h2 id="3-日期算术运算"><a href="#3-日期算术运算" class="headerlink" title="3. 日期算术运算"></a><strong>3. 日期算术运算</strong></h2><p>说了这么多DateTime，没有介绍TimeSpan，那么这里就会介绍一下TimeSpan是什么了。TimeSpan表示一个时间间隔，也就是两个DateTime之间的差值。说到这里，大家也应该明白日期的算术运算应该是指什么了。以下来看一组示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        DateTime lastYear = <span class="keyword">new</span> DateTime(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">20</span>,<span class="number">49</span>, <span class="number">36</span>);</span><br><span class="line">        DateTime now = DateTime.Now;</span><br><span class="line">        TimeSpan span = now - lastYear;</span><br><span class="line">        DateTime newTime = lastYear + span;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是C#中关于日期运算的基本内容。那我们来看看 TimeSpan里封装了哪些内容吧。</p><p>TimeSpan的属性：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Days &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取当前 TimeSpan 结构所表示的时间间隔的天数部分。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Hours &#123; <span class="keyword">get</span>; &#125;<span class="comment">// 获取当前 TimeSpan 结构所表示的时间间隔的小时数部分。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Milliseconds &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取当前 TimeSpan 结构所表示的时间间隔的毫秒数部分。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Minutes &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取当前 TimeSpan 结构所表示的时间间隔的分钟数部分。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Seconds &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取当前 TimeSpan 结构所表示的时间间隔的秒数部分。</span></span><br></pre></td></tr></table></figure><p>以上属性表示一个TimeSpan的代表的时间间隔中的天数、小时、分钟等。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> TotalDays &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取以整天数和天的小数部分表示的当前 TimeSpan 结构的值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> TotalHours &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取以整小时数和小时的小数部分表示的当前 TimeSpan 结构的值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> TotalMinutes &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取以整分钟数和分钟的小数部分表示的当前 TimeSpan 结构的值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> TotalSeconds &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取以整秒数和秒的小数部分表示的当前 TimeSpan 结构的值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> TotalMilliseconds &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取以整毫秒数和毫秒的小数部分表示的当前 TimeSpan 结构的值。</span></span><br></pre></td></tr></table></figure><p>上述几组属性表示以XXX为单位，返回的TimeSpan的值，与之相对应的TimeSpan提供了一组FormXXX的方法，可以将double类型的值还原成TimeSpan。</p><p>因为TimeSpan表示时间间隔，所以TimeSpan也允许两个TimeSpan进行加法运算，并提供了一个<code>Add(TimeSpan ts)</code>的方法。</p><p>这些是TimeSpan最常用的一些属性和方法。不过在使用TimeSpan中需要注意的地方是，TimeSpan计算返回的值可正可负，正值表示时间间隔的头在前尾在后，负值表示头在后尾在前；TimeSpan中没有提供TotalMonths这个方法，这是因为每个月具体有多少天不是固定值，如果想计算两个日期直接相差几个月，则需要自定义对应的计算方法了。</p><h2 id="4-DateTime与字符串之间的恩怨情仇"><a href="#4-DateTime与字符串之间的恩怨情仇" class="headerlink" title="4. DateTime与字符串之间的恩怨情仇"></a>4. DateTime与字符串之间的恩怨情仇</h2><p>在程序中，用户或者三方输入的日期大多都是字符串格式的，而且系统获取到的时间也大多会转成字符串给其他人展示，所以这里就会涉及到DateTime与字符串之间的相互转换。</p><p>我们先试试日期的各种ToString会产生什么样的结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        DateTime now = DateTime.Now;</span><br><span class="line">        Console.WriteLine(<span class="string">"ToString :&#123;0&#125;"</span>, now.ToString());</span><br><span class="line">        Console.WriteLine(<span class="string">"ToLongDateString :&#123;0&#125;"</span>, now.ToLongDateString());</span><br><span class="line">        Console.WriteLine(<span class="string">"ToLongTimeString :&#123;0&#125;"</span>, now.ToLongTimeString());</span><br><span class="line">        Console.WriteLine(<span class="string">"ToShortDateString :&#123;0&#125;"</span>,now.ToShortDateString());</span><br><span class="line">        Console.WriteLine(<span class="string">"ToShortTimeString :&#123;0&#125;"</span>,now.ToShortTimeString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://images.attachie.club/image-20200425111100330.png" alt="image-20200425111100330"></p><p>这是DateTime的默认输出结果，当然会根据系统的语言和地区等设置变化而产生不同的变化。为了避免这种变化，C#提供了一种日期类型的格式化模板，这里介绍几个常用的格式代表：</p><table><thead><tr><th align="center">格式符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">yy</td><td align="center">年份。00~99，如果年份大于99，则只保留后两位。如2020年则显示20,2019年则显示19</td></tr><tr><td align="center">yyyy</td><td align="center">年份，显示四位。0000~9999</td></tr><tr><td align="center">M</td><td align="center">月份，显示1~12</td></tr><tr><td align="center"></td><td align="center">月份，显示01~12</td></tr><tr><td align="center">d</td><td align="center">天，1~31（具体看月份允许的最大天数）</td></tr><tr><td align="center">dd</td><td align="center">与d一致，显示为01~31</td></tr><tr><td align="center">h</td><td align="center">小时，12小时制显示1~12</td></tr><tr><td align="center">hh</td><td align="center">与h一致，显示为01~12</td></tr><tr><td align="center">H</td><td align="center">小时，24小时制，显示0~23</td></tr><tr><td align="center">HH</td><td align="center">小时，24小时制，显示00~23</td></tr><tr><td align="center">m</td><td align="center">分钟，显示0~59</td></tr><tr><td align="center">mm</td><td align="center">分钟，显示00~59</td></tr><tr><td align="center">s</td><td align="center">秒，显示0~59</td></tr><tr><td align="center">ss</td><td align="center">秒，显示00~59</td></tr><tr><td align="center">f</td><td align="center">表示日期和时间值的十分之几秒，显示0~9</td></tr><tr><td align="center">ff</td><td align="center">表示百分之几秒，显示00～99</td></tr></tbody></table><p>最后的f，f的次数越多精度越细，但需要考虑系统的时钟精度。</p><p>在实际开发中，最常用的格式是：<code>yyyy-MM-dd HH:mm:ss</code>，显示效果就是：2020-04-25 12:00:00。其中连接符可以根据开发需求更换。</p><p>上述是时间转字符串，反过来也有字符串转时间。</p><p>使用<code>DateTime.Parse</code>或者<code>Convert.ToDateTime</code>就可以将字符串转换为时间类型。C#并不需要在字符串转日期的时候指定字符串的显示格式，这是因为一个约定优于配置的设计理念。C#通过分析字符串，然后将字符串转换成对应的时间类型。当然，在正确解析到时间的时候，C#会抛出异常。为此，C#提供了<code>DateTime.TryParse</code>方法，该方法不会抛出异常，会返回一个是否正确转换的bool值。</p><p>它的声明如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">TryParse</span> (<span class="params"><span class="keyword">string</span> s, <span class="keyword">out</span> DateTime result</span>)</span>;<span class="comment">// 使用了result作为实际转换结果</span></span><br></pre></td></tr></table></figure><p>虽然C# 不用提供转换格式就可以读取，但是如果时间字符串的格式比较少见呢，或者说就想指定一个格式字符串，怎么办？别急，C#还提供了一个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateTime <span class="title">ParseExact</span> (<span class="params"><span class="keyword">string</span> s, <span class="keyword">string</span> format, IFormatProvider provider</span>)</span>;</span><br></pre></td></tr></table></figure><p>不过，这个方法需要指定一个区域性的格式信息：provider。这个信息可以通过<code>CultureInfo.CurrentCulture</code>来获取，这个属性表示系统的当前区域信息。</p><p>以上是DateTime的基本内容，有兴趣的小伙伴可以查阅一下微软的官方文档继续深入研究一下。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 13 常见类库介绍（一）</title>
      <link href="/basecharp/13983.html"/>
      <url>/basecharp/13983.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>每篇一个前言，介绍一下这一篇的内容。之前的内容都是针对某些知识点进行的介绍，这篇内容介绍一下实际开发中常用的一些类和命名空间。</p><a id="more"></a><h1 id="1-System-命名空间"><a href="#1-System-命名空间" class="headerlink" title="1. System 命名空间"></a>1. System 命名空间</h1><p>System空间，是C#的基础命名空间，里面定义了常用值和数据类型以及各种类型的基类，当然也包括了很多C#程序运行中用到类，具体可以访问微软的官方API说明。这里简单介绍一下 我们在开发中最常用到的几个类。</p><h2 id="1-1-Console"><a href="#1-1-Console" class="headerlink" title="1.1 Console"></a>1.1 Console</h2><p>Console 控制台类，表示一个控制台应用程序的标准输入流、输出流和错误流。这是微软官方文档给的内容。实际上，Console类在一些其他类型的项目中也可以使用。因为Console类是程序与终端的交互，所以当程序持有一个终端的时候，该类就可以正确输出内容。</p><p>照例，我们先看一下它的声明：<code>public static class Console</code> 。可知这是一个静态类，需要明确一个概念：</p><ul><li>在C#甚至大多数编程语言（支持静态类）中，静态类不可被继承，而且静态类的方法都是工具方法；</li><li>静态类没有构造方法，也不能构造对象；</li><li>静态类里的方法都是静态方法</li><li>访问一个类的静态方法需要通过<code>类名.方法名</code>来访问</li></ul><p>那么我们可以使用：<code>Console.方法名</code>来调用Console的方法。</p><p>我们来看看Console在开发中常用的方法有哪些：</p><ol><li><p>输出：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Write</span> (<span class="params">&lt;T&gt; <span class="keyword">value</span></span>)</span>; <span class="comment">//T 表示类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Write</span> (<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] arg</span>)</span>;</span><br></pre></td></tr></table></figure><p>Write方法一共有17个重载版本，其中有常用的有以上两钟（不是两个版本）。其中第一中写法，T 代表C#的基础数据类型中的10种，再加一个Object。</p><p>作用是将参数转成字符串打印到控制台中，所以效果与先将对象转成字符串然后再打印一样，所以第二种调用方式参数类型与 <code>String.Format</code>是一致的。</p><p>示例代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.Write(<span class="string">"打印测试..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   效果如下：</p><p>   <img src="http://images.attachie.club/image-20200424164707972.png" alt="image-20200424164707972"></p><p>   如上图所示，会出现一个黑色背景的图框，然后显示打印的内容。</p><p>   C# 关于控制台的输出还有一个方法：<code>WriteLine</code>，从名字来看是写一行的意思，实际表现也是如此，该方法每次输出都会产生新的一行内容，而<code>Write</code>只会在上一次输出的结尾继续输出。</p><p>   示例：</p>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.Write(<span class="string">"打印测试..."</span>);</span><br><span class="line">        Console.Write(<span class="string">"Write输出测试"</span>);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.WriteLine(<span class="string">"这行是调用WriteLine"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"这行也是调用WriteLine输出的"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   运行结果：</p><p>   <img src="http://images.attachie.club/image-20200424165458931.png" alt="image-20200424165458931"></p><p>   与<code>Write</code>不同的地方是，<code>WriteLine</code>允许无参调用，表示输出一个空行。</p><ol start="2"><li><p>获取用户输入：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Read</span> (<span class="params"></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ReadLine</span> (<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><p>Console在读这方面就没有写那么花里胡哨了，只有两个是我们常用的读。第一个是，从输入流中读取一个字符，如果没有输入则返回-1；第二个是读取输入的一行字符。</p><p>关于输入流以及流没有内容时返回-1这个问题就不在这里做介绍了。有追更的小伙伴可以等待《IO篇》的更新。</p><p>第二个，就很有意思了，获取输入的一行内容，而不是一个字符，也就是说当用户决定这行内容输入完成点击换行后程序就能读取到输入的结果。</p><p>来，看一下示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Read 测试"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"请输入一个任意内容并按回车："</span>);</span><br><span class="line">        <span class="keyword">var</span> key = Console.Read();</span><br><span class="line">        Console.WriteLine(<span class="string">$"输入的是：<span class="subst">&#123;key&#125;</span>"</span>);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">        key = Console.Read();</span><br><span class="line">        Console.WriteLine(<span class="string">$"输入的是：<span class="subst">&#123;key&#125;</span>"</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">        Console.WriteLine(<span class="string">"ReadLine 测试"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"请输入任意内容，并换行："</span>);</span><br><span class="line">        <span class="keyword">var</span> line = Console.ReadLine();</span><br><span class="line">        Console.WriteLine(<span class="string">$"输入的是：<span class="subst">&#123;line&#125;</span>"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"示例结束"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="http://images.attachie.club/image-20200424210005278.png" alt="image-20200424210005278"></p><p>示例中，我在每次调用Read前，都调用了一个ReadLine，这是因为在控制台中一次输入字符，然后按下回车并换行，这是有两个输入，所以在第二次Read时会将上次未读取的继续读取出来，所以我利用ReadLine的特性将未读取的内容一次性读取出来，保证下次调用都必须从控制台读取用户输入。</p></li></ol><p>当然，Console类并不是只有这些内容，只是这些是我们最常接触的方法。</p><h2 id="1-2-Math"><a href="#1-2-Math" class="headerlink" title="1.2 Math"></a>1.2 Math</h2><p>C#中的数学工具类，为三角函数、对数函数和其他通用数学函数提供常数和静态方法。这个类也是一个静态类，当然这不会影响我们对它的好奇。</p><p>来，让我们一起看看里面有些什么方法吧。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Abs</span> (<span class="params">&lt;T&gt; <span class="keyword">value</span></span>)</span>;<span class="comment">//T 代表 decimal, int,double,flout,long,sbyte,short，返回绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Acos</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">//返回余弦值为指定数字的角度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Acosh</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">//返回双曲余弦值为指定数字的角度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Asin</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">// 返回正弦值为指定数字的角度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Asinh</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">// 返回双曲正弦值为指定数字的角度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Atan</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">// 返回正切值为指定数字的角度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Atan2</span> (<span class="params"><span class="keyword">double</span> y, <span class="keyword">double</span> x</span>)</span>;<span class="comment">// 返回正切值为两个指定数字的商的角度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">BigMul</span> (<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>;<span class="comment">// 生成两个 32 位数字的完整乘积。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">BitDecrement</span> (<span class="params"><span class="keyword">double</span> x</span>)</span>;<span class="comment">// 返回小于 x 的下一个最小值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">BitIncrement</span> (<span class="params"><span class="keyword">double</span> x</span>)</span>;<span class="comment">// 返回大于 x 的下一个最大值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Cbrt</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">// 返回指定数字的立方根。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Ceiling</span> (<span class="params">&lt;T&gt; d</span>)</span>; <span class="comment">//T 代表 decimal、double，返回大于或等于指定数字的最小整数值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Cos</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">// 返回指定角度的余弦值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">DivRem</span> (<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">out</span> <span class="keyword">int</span> result</span>)</span>;<span class="comment">// 计算两个数字的商，并在输出参数中返回余数。result为余数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Exp</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">//返回 e 的指定次幂，e 指自然对数的底</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Floor</span> (<span class="params">&lt;T&gt; d</span>)</span>; <span class="comment">//T 代表 decimal、double，返回小于或等于指定双精度浮点数的最大整数值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ILogB</span> (<span class="params"><span class="keyword">double</span> x</span>)</span>;<span class="comment">// 返回指定数字以 2 为底的整数对数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Log</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">//返回指定数字的自然对数（底为 e）。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Log</span> (<span class="params"><span class="keyword">double</span> a, <span class="keyword">double</span> newBase</span>)</span>;<span class="comment">// 返回指定数字在使用指定底时的对数。newBase为底</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Log10</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">//返回指定数字以 10 为底的对数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Log2</span> (<span class="params"><span class="keyword">double</span> x</span>)</span>;<span class="comment">//返回指定数字以 2 为底的对数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Max</span>(<span class="params">&lt;T&gt; t1,&lt;T&gt; t2</span>)</span>;<span class="comment">// T 代表 decimal, int,double,flout,long,sbyte,short，返回两者中较大的那个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Min</span>(<span class="params">&lt;T&gt; t1,&lt;T&gt; t2</span>)</span>;<span class="comment">// T 代表 decimal, int,double,flout,long,sbyte,short，返回两者中较小的那个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Pow</span> (<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y</span>)</span>;<span class="comment">// 返回指定数字的指定次幂。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Round</span> (<span class="params"><span class="keyword">double</span> a</span>)</span>;<span class="comment">// 将双精度浮点值舍入到最接近的整数值，并将中点值舍入到最接近的偶数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ScaleB</span> (<span class="params"><span class="keyword">double</span> x, <span class="keyword">int</span> n</span>)</span>;<span class="comment">//返回有效计算的 x * 2^n。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Sign</span> (<span class="params">&lt;T&gt; <span class="keyword">value</span></span>)</span>; <span class="comment">// T 代表 decimal,double,flout,int,long,sbyte,short，返回指示数字符号的整数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Sin</span> (<span class="params"><span class="keyword">double</span> a</span>)</span>;<span class="comment">// 返回指定角度的正弦值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Sinh</span> (<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span>;<span class="comment">//返回指定角度的双曲正弦值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Sqrt</span> (<span class="params"><span class="keyword">double</span> d</span>)</span>;<span class="comment">//返回指定数字的平方根。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Tan</span> (<span class="params"><span class="keyword">double</span> a</span>)</span>;<span class="comment">//返回指定角度的正切值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Tanh</span> (<span class="params"><span class="keyword">double</span> <span class="keyword">value</span></span>)</span>;<span class="comment">//返回指定角度的双曲正切值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Truncate</span> (<span class="params">&lt;T&gt; d</span>)</span>;<span class="comment">//T 代表 decimal、double，计算一个数字的整数部分。</span></span><br></pre></td></tr></table></figure><p>嗯，密密麻麻的一大堆，方法虽多，但值得注意的方法只有以下几个：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Ceiling</span> (<span class="params">&lt;T&gt; d</span>)</span>; <span class="comment">//T 代表 decimal、double，返回大于或等于指定数字的最小整数值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Floor</span> (<span class="params">&lt;T&gt; d</span>)</span>; <span class="comment">//T 代表 decimal、double，返回小于或等于指定双精度浮点数的最大整数值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Truncate</span> (<span class="params">&lt;T&gt; d</span>)</span>;<span class="comment">//T 代表 decimal、double，计算一个数字的整数部分。</span></span><br></pre></td></tr></table></figure><p>虽然这三个方法计算的结果都是整数，但返回类型并不是整数，所以在使用的时候需要我们进行一次类型转换。Math类还有两个值得注意的字段：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">double</span> E = <span class="number">2.7182818284590451</span>;<span class="comment">// 表示自然对数的底，它由常数 e 指定。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.1415926535897931</span>;<span class="comment">// 表示圆的周长与其直径的比值，由常数 π 指定。</span></span><br></pre></td></tr></table></figure><p>这两个也是Math里唯一的两个字段，这是数学中著名的两个无理数，这里只截取了一部分有效值。</p><h2 id="1-3-Random"><a href="#1-3-Random" class="headerlink" title="1.3 Random"></a>1.3 Random</h2><p>C# 中Random表示伪随机数生成器，这是一种能够产生满足某些随机性统计要求的数字序列的算法。这里大概讲解一下Random的使用，具体的原理等我研究一下哈。</p><p>Random是一个类，所以与之前的两个类不同地方就是使用Random生成随机数需要事先构造一个Random对象。Random常用的方法有以下几组：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Next</span> (<span class="params"></span>)</span>;<span class="comment">// 返回一个整型的随机数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Next</span> (<span class="params"><span class="keyword">int</span> maxValue</span>)</span>;<span class="comment">//返回一个小于所指定最大值的非负随机整数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Next</span> (<span class="params"><span class="keyword">int</span> minValue, <span class="keyword">int</span> maxValue</span>)</span>;<span class="comment">//返回在指定范围内的任意整数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">NextDouble</span> (<span class="params"></span>)</span>;<span class="comment">//返回一个大于或等于 0.0 且小于 1.0 的随机浮点数。</span></span><br></pre></td></tr></table></figure><p>我们先演示一下Random的基本应用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>次生成：<span class="subst">&#123;rand.Next()&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><p><img src="http://images.attachie.club/image-20200424225811906.png" alt="image-20200424225811906"></p><p>可以看出直接Next返回的结果数字都比较大，所以在使用的时候，一般会使用<code>Next (int minValue, int maxValue)</code> 限定返回值。</p><p>回到开头，Random是一个类，每次初始化的时候系统会自动计算一个种子给它，如果快速重复构建Random对象，可能会生成一个重复序列，即每次调用的结果一致。（当然，官方说可以，实际我在net core 3.1的环境里没测出来）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"第<span class="subst">&#123;i&#125;</span>个Random 第<span class="subst">&#123;j&#125;</span>次生成：<span class="subst">&#123;rand.Next()&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是测试代码，有兴趣的小伙伴可以自己试试。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 12 任务和多线程</title>
      <link href="/basecharp/17815.html"/>
      <url>/basecharp/17815.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>照例一份前言，在介绍任务和多线程之前，先介绍一下异步和同步的概念。我们之间介绍的知识点都是在同步执行，所谓的同步就是一行代码一行代码的执行，就像是我们日常乘坐地铁通过安检通道一样，想象我们每个人都是一行代码，我们依次通过安检仪器的时候就是同步。</p><p>那么，什么是异步呢？有一个时间利用率的故事，讲的是在烧水的同时，顺便准备茶叶，清洗茶杯等工序可以节省时间。这个故事就是异步的一个典型范例。异步通俗的将就是不暂停也不等待当前耗时的流程执行完成，继续执行后续的流程。</p><p>那么这和任务与多线程有什么关系呢？在C#中，基于任务可以很简单的创建一个异步程序或者异步方法；同时任务也是一个简单的多线程模式。不过值得注意的是，C#的异步可以由多线程实现，但多线程更多的是用来实现并行。所谓并行，顾名思义，就是多任务同时执行，这里的任务指的是程序需要完成的事，而不是C#中的任务机制。</p><p>这一篇是《C#基础知识系列》的一篇，简单介绍一下如何创建、使用任务和多线程，这部分的内容很多，包括有很多注意事项，将会另开一个系列专门讲解C#的异步和并行编程，名字暂定为《C#异步编程系列》。</p><a id="more"></a><h1 id="1-线程"><a href="#1-线程" class="headerlink" title="1. 线程"></a>1. 线程</h1><p>了解过计算机的人可能知道程序最小执行单元是线程，最小资源分配单位是进程。进程里必然至少有一个线程，而一个程序也必然至少有一个进程。这里不过多的介绍进程和线程的区别于关系，只需要记着线程是程序最小执行单元，我们在开发中最常用的也是线程。</p><p>在很多不太严谨的编程教程中，都会把多线程和并行化作等号。但是这里有一个很微妙的区别，对于单核CPU来说，多进程和多线程一样，都不会产生并行的效果；对于多核CPU而言，多进程必然是并行的，但是多线程则不一定并行。所以C#中，线程更多的用作异步处理上，而不是并行计算上。</p><p>在C#程序中，需要引用<code>System.Threading</code>。C#的入门级线程操作只需要知道Thread类、一个带参数的无返回值方法和一个不带参数的无返回值方法，这三个要点就可以了。</p><h2 id="1-1-创建一个线程"><a href="#1-1-创建一个线程" class="headerlink" title="1.1 创建一个线程"></a>1.1 创建一个线程</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上示例代码演示了如果创建一个线程。但创建了线程，并不代表线程就会运行。</p><p>说到这里就必须说一下线程的状态，一般情况线程分为五个阶段，也就是五种状态：分别是准备、就绪、运行、阻塞、死亡。当然在不同的地方，状态可能会细分为更多的级别，这里只做初步的介绍。状态之间的切换如下：</p><p><img src="http://images.attachie.club/20200423102110.png" alt="image-20200423102030652"></p><p>线程的状态之间切换顺序有着严格的限制，而且只能从就绪态由CPU切换到运行态，运行态无法从其他状态切换过去，而且这一步的切换开发者不能控制。</p><p>现在，我们回到线程的创建方法，先来看看<code>Thread</code>构造方法的声明：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span> (<span class="params">System.Threading.ParameterizedThreadStart start</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span> (<span class="params">System.Threading.ThreadStart start</span>)</span>;</span><br></pre></td></tr></table></figure><p>碰到了两个没见过的类型，我们继续看看？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">ParameterizedThreadStart</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">ThreadStart</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><p>到这里，线程的创建为我们揭开了它的谜底。根据之前《C# 基础知识系列- 11 委托和事件》那篇的介绍，我们可以很明确的得到 <code>ThreadStart</code>是一个 无返回值也没有参数的委托，而<code>ParameterizedThreadStart</code>表示有一个object的参数。所以，创建线程的时候，可以直接传一个方法进去。</p><p>有的同学可能要问了，为什么创建线程的委托参数那么少？这里涉及到一个并发概念，因为线程访问过多的主线程可能会导致锁，所以最佳的线程实践就是让线程的运行保持一个相对封闭的环境。</p><blockquote><p>当然，C#的线程其实放宽了这部分的限制，这部分将在《C#异步编程系列》中继续探讨。</p></blockquote><p>现在我们回过头来，再看看如何创建一个标准的线程：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> thread1 = <span class="keyword">new</span> Thread(ThreadTest1);</span><br><span class="line">        <span class="keyword">var</span> thread2 = <span class="keyword">new</span> Thread(ThreadTest2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 不带参数的线程</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ThreadTest1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 带参数的线程</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="obj"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ThreadTest2</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//业务代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中thread1就是一个没有参数的线程，thread2是一个带参数的线程。</p><blockquote><p>注：Main方法是C#程序入口的固定写法，之前所有的示例代码都是在这个方法里执行的，后续这部分会在《C#基础篇之开发工具和项目的基本结构》这一篇中详细介绍，这里先记住这是一个固定写法。</p></blockquote><h2 id="1-2-启动并使用线程"><a href="#1-2-启动并使用线程" class="headerlink" title="1.2 启动并使用线程"></a>1.2 启动并使用线程</h2><p>在启动线程之前，我们先介绍一个概念：主线程。主线程指伴随着当前程序启动而启动的线程，以代码来看就是<code>Main</code>方法所在线程。</p><p>线程通过调用<code>Thread.Start</code>方法，来将线程标记为就绪态。</p><blockquote><p>注意：线程不能直接进入运行态，该状态只能由CPU决定。</p></blockquote><p>所以上一小节的创建的两个线程可以通过以下方式通知已经准备就续：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread1.Start();</span><br></pre></td></tr></table></figure><p>咦？是不是少了一个？注意力集中的小伙伴会发现，我没有演示thread2的调用方法。thread2与threa1有个不同的地方，thread2的委托参数有一个参数。那么必然<code>Start</code>也有一个对应的带参版本的重载，所以thread2就会有以下两种调用方式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread2.Start();</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> obj;<span class="comment">// 省略来源</span></span><br><span class="line">thread2.Start(obj);</span><br></pre></td></tr></table></figure><p>两种方法有什么区别吗？</p><p>有，但是区别不大。第一种调用方式对于方法<code>ThreadTest2</code>而言就是参数为<code>null</code>,第二种就是参数为obj的值。所以第一种调用约等于<code>thread2.Start(null)</code>。</p><h2 id="1-3-暂停或销毁线程"><a href="#1-3-暂停或销毁线程" class="headerlink" title="1.3 暂停或销毁线程"></a>1.3 暂停或销毁线程</h2><p>这一小节的标题是，暂停或销毁线程。当线程运行起来后，如果没有突发情况或者外力干涉会直接运行到结束。这时候，后续程序觉得这个线程执行时间过长，需要暂停或者取消线程的执行，那么就需要了解一下如何暂停或者销毁线程了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread1.Suspend();<span class="comment">//挂起</span></span><br><span class="line">thread1.Resume();<span class="comment">//继续</span></span><br></pre></td></tr></table></figure><p>中断线程，也就是终止线程：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread1.Abort();<span class="comment">// 已挂起的线程无法中断</span></span><br></pre></td></tr></table></figure><p>强制终止销毁：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread1.Interrupt();<span class="comment">//在执行中的线程无法终止</span></span><br></pre></td></tr></table></figure><p>以上是线程操作的基本概念，这部分并不是为了能让大家精通多线程，这是为了让大家有个初步概念。在C# 中，创建一个线程需要传递一个委托进去，因为委托的性质，并没有限制是否是静态方法，所以这里也可以传一个对象的方法。当然了，我们十分不提倡这样做，因为会导致一些多线程领域里的一些问题。</p><h1 id="2-任务"><a href="#2-任务" class="headerlink" title="2. 任务"></a>2. 任务</h1><p>C#中的任务与线程的区别不是很大，因为C#的任务就是基于线程实现的，而任务比线程更友好，使用也更方便，当然使用也更加复杂。不过对于开发者而言，任务取消了线程的状态切换，只保留了有限的一部分。而且，在C# 更推荐使用任务，任务也是对线程的进一步抽象和改进。</p><h2 id="2-1-创建一个任务"><a href="#2-1-创建一个任务" class="headerlink" title="2.1  创建一个任务"></a>2.1  创建一个任务</h2><p>如线程相同的一点是，任务的创建也是通过传递一个方法（严格上讲是一个委托）。不同的是，线程的委托没有返回值而且也不接受从线程返回的值，而任务则不同，调用方可以期待任务是有返回值的而且也可以正常使用。</p><p>我们先来看看任务是什么，任务的命名空间<code>System.Threading.Tasks</code>，任务的类有以下两种声明：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Task</span> : <span class="title">IAsyncResult</span>, <span class="title">IDisposable</span>;</span><br><span class="line">public class Task&lt;TResult&gt; : System.Threading.Tasks.Task;</span><br></pre></td></tr></table></figure><p>第一个，没有泛型的Task类表示一个没有返回值的任务；</p><p>第二个，泛型Task类表示该任务有一个返回值，返回值的类型为传递进来的泛型参数。</p><p>两个任务类的初始化类似于Thread类，不过与之不同的是 泛型Task的参数是Func，都有一个带Object参数的委托。</p><p>与线程不同，任务的创建就有很多种方法：</p><p>1  通过构造函数创建</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> task1 = <span class="keyword">new</span> Task(() =&gt; &#123; &#125;);</span><br><span class="line"><span class="keyword">var</span> task2 = <span class="keyword">new</span> Task&lt;<span class="keyword">int</span>&gt;(()=&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2 使用任务工厂：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> task1 = Task.Factory.StartNew(() =&gt; &#123; &#125;);</span><br><span class="line"><span class="keyword">var</span> task2 = Task.Factory.StartNew(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3 通过Task.Run创建：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> task1 = Task.Run(() =&gt; &#123; &#125;);</span><br><span class="line"><span class="keyword">var</span> task2 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上三种方式创建的任务是等效的。当然实际上任务的创建并非只有这么几种，但这几种是任务创建的基础，使用频率相当高。</p><h2 id="2-2-执行任务"><a href="#2-2-执行任务" class="headerlink" title="2.2 执行任务"></a>2.2 执行任务</h2><p>与线程不同的是，任务创建完成之后就会自动执行，不需要调用方法。</p><blockquote><p>关于任务的运行有以下需要注意的地方：</p><ol><li><p>任务的运行不会阻塞主线程；</p></li><li><p>主线程结束后，任务一定也会结束；</p></li></ol></blockquote><p>任务可以<code>IsCompleted</code>属性确定任务是否执行完成，所以可以通过访问任务对象的<code>IsCompleted</code>确认该任务是否执行完成，但有一个问题，这个属性只会表示当前任务是否完成。所以如果需要等待任务完成，则可以通过访问<code>Wait()</code>方法，强制主线程等待任务结束。</p><p>如果使用的任务是泛型Task也就是待返回值的任务，可以通过访问<code>Result</code>属性获取任务执行结果。有意思的地方就是，这个属性能获取到结果的时候，也是任务执行完成的时候，所以不需要调用<code>Wait()</code>或<code>IsCompleted</code>来判断任务是否完成。</p><blockquote><p>注：通过构造方法创建的任务需要调用 Start方法才能启动，而通过Task.Run和Task.Factory.StartNew创建的则不需要。</p></blockquote><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>C#中任务基于线程，对其做了更多的抽象和封装，将线程的粒度进一步细分。所以线程在C#中就没有那么重要了，任务逐渐替代了线程在C#程序中的地位。</p><p>任务与线程，有共通的地方，也有完全不一样的地方。线程的运行环境相对封闭，所以线程出现错误导致线程中断，不会影响主线程的运行。但任务则不一样了，任务与主线程的关联性更大，一旦任务出现异常导致任务中断，如果没有正确处理，则会影响主线程的运行。</p><p>以上是本篇的全部内容，也请大家期待一下《C#异步编程系列》吧。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 11 委托和事件</title>
      <link href="/basecharp/30277.html"/>
      <url>/basecharp/30277.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>事件和委托是C#中的高级特性，也是C#中很有意思的一部分。出现事件的地方，必然有委托出现；而委托则不一定会有事件出现。那为什么会出现这样的关系呢？这就需要从事件和委托的定义出发，了解其中的内在。</p><a id="more"></a><h1 id="1-委托"><a href="#1-委托" class="headerlink" title="1. 委托"></a>1. 委托</h1><p>说起委托，就不得不回忆一下之前在Linq篇中介绍的匿名方法，其中提到了Func和Action这两个类型。这两个类型就是委托。</p><p>委托在C#中定义为一种面向对象形式的方法寻址方案。简单来讲，就是定义一个类型，然后表示这个类型代表某一种方法。而委托对象，就是方法参数化。委托可以实现将方法当做一个参数传递给另一个方法，也可以认为是反射中的MethodInfo的一种特例（实际上并没有太多关系）。</p><p>委托不关心方法叫什么，也不关心方法从哪来（归属于哪个类或者哪个对象），只关心方法需要哪些参数，返回什么类型。</p><p>说到这里，我们来看一下如何定义一个委托吧，委托的定义形式如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delegate</span> &lt;返回类型&gt;  委托名(参数列表);<span class="comment">//参数列表代表任意个参数</span></span><br></pre></td></tr></table></figure><p>由之前的定义形式，我们可以知道委托也是一种类型，所以它的定义也符合类型的定义规范。现在我们定义一个没有返回值也没有参数类型的委托作为我们创建的第一个委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">FirstDel</span>(<span class="params"></span>)</span>;<span class="comment">// 类型名称是 FirstDel</span></span><br></pre></td></tr></table></figure><p>简单的使用一下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirstDel del ;</span><br><span class="line">del();<span class="comment">// 会直接报错</span></span><br></pre></td></tr></table></figure><p>上述代码如果运行的话，会很直接的报错，因为你没有告诉编译器变量del 应该是什么，也就是没有为del赋值，同时委托可以赋值为null，所以在使用的时候需要注意不能为null，否者也是无法运行的。</p><p>这里应用匿名方法的话，可以按照下面的代码对del进行赋值：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">del = ()=&gt;</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//省略方法   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们热身结束，开始正式创建一个有意义的委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">decimal</span> <span class="title">CalculateArea</span>(<span class="params"><span class="keyword">decimal</span> height, <span class="keyword">decimal</span> weight</span>)</span>;</span><br></pre></td></tr></table></figure><p>上述委托声明了一个计算面积的规范，使用长宽进行面积计算，那么我们来为它赋值：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CalculateArea squrare = (height, weight) =&gt; height * height;<span class="comment">// 正方形</span></span><br><span class="line">CalculateArea rectangle = (height, weight) =&gt; height * weight;<span class="comment">// 矩形</span></span><br><span class="line">CalculateArea triangle = (height, weight) =&gt; height * weight / <span class="number">2</span>; <span class="comment">//三角形</span></span><br></pre></td></tr></table></figure><p>我们依次创建了三个计算面积的方法，分别是正方形、矩形、三角形，分别调用它们将会得到对应的计算结果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> squrareArea = squrare(<span class="number">10</span>, <span class="number">10</span>);<span class="comment">// 100</span></span><br><span class="line"><span class="keyword">var</span> rectangleArea = rectangle(<span class="number">19</span>, <span class="number">10</span>);<span class="comment">//190</span></span><br><span class="line"><span class="keyword">var</span> triangleArea = triangle(<span class="number">10</span>, <span class="number">5</span>);<span class="comment">//25</span></span><br></pre></td></tr></table></figure><p>特别的，C#中委托支持多路广播，所以也可以使用<code>+</code>、<code>-</code>进行注册和删除。多路广播是指在事件和委托中有多个监听器或响应方法，当事件触发或者委托调用的时候，注册的方法组将会都调用。当使用这种方式对委托进行赋值的时候，委托将自动转为方法组，简单理解就是 委托对象内部创建了一个列表，然后把赋值给它的方法都存进去了。</p><p>所以就会产生如下操作：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CalculateArea calculate = squrare;<span class="comment">// calculate必须先赋值一个方法</span></span><br><span class="line">calculate += rectangle;<span class="comment">// 增加 矩形的面积计算方法</span></span><br><span class="line">calculate += triangle; <span class="comment">// 增加三角形的面积计算方法</span></span><br><span class="line">calculate -= triangle; <span class="comment">// 减去三角形的面积计算方法</span></span><br></pre></td></tr></table></figure><p>到这里会产生一个疑问，<code>calculate</code>运行结果是什么，会返回一个数组或者其他类型吗？显然不会，因为calculate定义的返回类型就是一个decimal，所以不会返回其他的值。</p><p>嗯，这就产生了另一个疑问，返回的是哪一个方法的计算结果呢，其他方法的计算结果呢？这里告诉大家一个结果，只会返回最后一次注册的方法的执行结果，其他的方法执行了，但是方法的执行结果无法用变量接到。</p><p>所以这里有一个很重要的实践，如果有需要把委托当做一个方法列表进行使用的时候，最好声明为<code>void</code>或者抛弃返回值的具体内容。</p><h1 id="2-事件"><a href="#2-事件" class="headerlink" title="2. 事件"></a>2. 事件</h1><p>事件，event。在C#中，事件就像是一种机制，在程序运行到一定阶段的时候或者遇到某些状况的时候，就会触发一个事件。然后如果有其他代码订阅了这个事件，就会自动执行订阅的代码。描述起来很抽象，简单来讲就是在类声明一个委托，并标记这个委托是一个事件，在另一个方法中执行这个事件。其中，触发这个事件的类称为发布者，接受或者注册了处理方法的类称为订阅者。</p><p>如何创建或声明一个事件？声明一个事件有两种方式，一种是直接使用<code>EventHandler</code> ，另一种是自己先定义一个委托，然后用这个委托定义事件。</p><p><strong>1. 使用EventHandler</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler HandlerEvent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.  使用自定义委托</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">EventDelegate</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventDelegate DelegateEvent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般事件的定义约定俗称是一个void方法，第一个参数是sender表示事件的发布者，默认是object类型，第二个参数是EventArgs类型的事件变量，表示触发事件时需要订阅者注意的内容，一般用来传一些参数。</p><p>其中 EventHandler有一个泛型版本，其声明如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> EventHandler&lt;TEventArgs&gt;(<span class="keyword">object</span> sender, TEventArgs e);</span><br></pre></td></tr></table></figure><p>其第二个参数并没有对TEventArgs进行限制，所以我们可以用任何类型当做事件变量。</p><p>我们再来看看，EventArgs里有什么，什么都没有，只有一个默认构造方法和几个继承自Object的方法。所以在开发中，我们会自己定义一个事件变量类型，为了保持一致会继承EventArgs。</p><p>C#建议事件的定义以On开头，表示在什么时触发，示例代码并不符合这个规范。</p><h1 id="3-使用一下事件和委托"><a href="#3-使用一下事件和委托" class="headerlink" title="3. 使用一下事件和委托"></a>3. 使用一下事件和委托</h1><p>创建一个带事件的类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">EventDelegate</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventDelegate DelegateEvent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Trigger</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DelegateEvent != <span class="literal">null</span>)<span class="comment">// 触发事件，按需判断事件的订阅者列表是否为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            DelegateEvent(<span class="keyword">this</span>, <span class="keyword">new</span> EventArgs());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventDemo demo = <span class="keyword">new</span> EventDemo(); </span><br><span class="line">demo.DelegateEvent += (sender, eventArgs) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略订阅者的方法内容</span></span><br><span class="line">&#125;</span><br><span class="line">demo.Trigger();<span class="comment">//触发事件</span></span><br></pre></td></tr></table></figure><p>当发布者尝试触发事件的时候，订阅者将会接收到消息，然后注册订阅者方法就会被调用。发布者向订阅者传递一对sender和eventArgs，订阅者按照自己的逻辑进行处理。</p><p>这里很明显可以看出，事件的处理程序注册方法用的<code>+=</code>，所以与之对应的也有一个<code>-=</code>表示取消订阅。</p><p>到这里，委托和事件的基本概念就已经介绍完毕了，当然还是那句话，更多的内容在实践中。C#的事件机制让程序员有更多的自由去自定义事件，而不是被局限在某些框架内。所以大家可以多试试C#的事件，也许能发现更多的我不知道的内容呢。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 10 反射和泛型（二）</title>
      <link href="/basecharp/1077.html"/>
      <url>/basecharp/1077.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>这篇文章延续《C# 基础知识系列- 5 反射和泛型》，继续介绍C#在反射所开发的功能和做的努力。上一篇文章大概介绍了一下泛型和反射的一些基本内容，主要是通过获取对象的类型，然后通过这个类型对象操作对象。这一篇介绍一个在反射中很重要的内容：特性，以及上一篇未完成的内容——泛型在反射中的引用。</p><a id="more"></a><h1 id="1-特性"><a href="#1-特性" class="headerlink" title="1. 特性"></a>1. 特性</h1><p>特性是一种类增强技术，配合解析对应的解析方法可以完成很多类原本没有的功能。特性本质是一种标签，可以标注在类、方法、属性等。它是类本身的一种信息扩展，就像生活中一个人只有一个身份证号，但是可以有多个身份一样，而这些多出来的身份对于类来说就是特性。特性虽然是对类的增强，但不局限于在类上做标记，属性、方法上都可以。</p><p>在C#中特性分为三种，位映射特性、自定义特性和伪自定义特性。</p><p>位映射特性，举个例子，在C#中一个类会有public、private、abstract（抽象类）、saled（不能继承）等修饰符，而这些修饰符在C#编译的过程中会生成一串二进制码，里面存放就是 是否是public、是否是private 等。这些就是位映射特性的一部分，位映射特性对我们来说是无法进行扩展和修改的，所以就不做更多的介绍。</p><p>我们通常说的特性一般指的是自定义特性，这部分特性也是我们能够扩展的，也是我们实际开发中用的特性。</p><h2 id="1-1-定义一个特性"><a href="#1-1-定义一个特性" class="headerlink" title="1.1 定义一个特性"></a>1.1 定义一个特性</h2><p>如何正确的定义一个特性呢？在C#中，特性也是类的一种。所以声明一个特性，就如同声明一个类一样，不同的是，这个类指定一个根父类是<code>System.Attribute</code>。所有自定义特性都是这个类的子类或者后代类，无一例外。同时，C#提倡在定义一个特性类的时候，类名应当以<code>Attribute</code>结尾，在使用的时候可以自动忽略。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span> &#123;   &#125;</span><br></pre></td></tr></table></figure><p>以上实例就是定义了一个很普通的特性类，用了也没有任何用的特性。因为特性只是一种标签。这个特性类可以用在任何支持特性的地方，当这个特性标记一个类的时候，目标类的子类也将自动获取这个特性。</p><p>以上是一个特性的默认行为，如果我们想要对此做一定限制的话，那么就需要用到特性<code>System.AttributeUsageAttribute</code>。这个特性类用来控制特性的使用方式。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> Inherited &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">// 该特性是否可以被子类继承，默认是 True</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> AllowMultiple &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">// 一个类是否可以多次使用该特性做标记，默认是 False</span></span><br><span class="line"><span class="keyword">public</span> AttributeTargets ValidOn &#123; <span class="keyword">get</span>; &#125;<span class="comment">//获取一组值，这组值标识指示的属性可应用到的程序元素，该参数使用构造方法赋值</span></span><br></pre></td></tr></table></figure><p>我们再来看看<code>AttributeTargets</code>里有些什么吧。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">System.Flags</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AttributeTargets</span><br><span class="line">&#123;</span><br><span class="line">    Assembly = <span class="number">1</span>,<span class="comment">// 表示特性是用在 Assembly上的，不常用</span></span><br><span class="line">    Module = <span class="number">2</span>, <span class="comment">//特性是用在 Module上的，不常用</span></span><br><span class="line">    Class = <span class="number">4</span>,  <span class="comment">// 表示特性是用来类上的</span></span><br><span class="line">    Struct = <span class="number">8</span>, <span class="comment">//表示用在结构体上</span></span><br><span class="line">    Enum = <span class="number">16</span>, <span class="comment">// 0x00000010   表示用在枚举上</span></span><br><span class="line">    Constructor = <span class="number">32</span>, <span class="comment">// 0x00000020   构造方法</span></span><br><span class="line">    Method = <span class="number">64</span>, <span class="comment">// 0x00000040       普通方法</span></span><br><span class="line">    Property = <span class="number">128</span>, <span class="comment">// 0x00000080     属性</span></span><br><span class="line">    Field = <span class="number">256</span>, <span class="comment">// 0x00000100        字段</span></span><br><span class="line">    Event = <span class="number">512</span>, <span class="comment">// 0x00000200         事件</span></span><br><span class="line">    Interface = <span class="number">1024</span>, <span class="comment">// 0x00000400    接口</span></span><br><span class="line">    Parameter = <span class="number">2048</span>, <span class="comment">// 0x00000800    方法的参数</span></span><br><span class="line">    Delegate = <span class="number">4096</span>, <span class="comment">// 0x00001000     委托</span></span><br><span class="line">    ReturnValue = <span class="number">8192</span>, <span class="comment">// 0x00002000   返回值</span></span><br><span class="line">    GenericParameter = <span class="number">16384</span>, <span class="comment">// 0x00004000   泛型参数</span></span><br><span class="line">    All = GenericParameter | ReturnValue | Delegate | Parameter | Interface | Event | Field | Property | Method | Constructor | Enum | Struct | Class | Module | Assembly, <span class="comment">// 0x00007FFF ，所有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们常用的限制是ALL或者类等，限制也可以是多个，写法如下：<code>限制A|限制B|限制C</code>，表示A、B、C三种限制共存。具体原理是因为 <code>AttributeTargets</code> 是支持位运算的枚举，通过一定的位运算可以在一个值中间存放多个枚举。</p><p>说了这么多，我们自己重新写一个特性类吧：</p><p><strong>1.限定只能给类使用的特性</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>2.限定只能给方法使用的特性</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Method)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.限定不能继承的特性</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.All, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.限定类和枚举可以使用，但不能继承的 特性</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class| AttributeTargets.Enum, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的一点就是，如果要指定是否可以被继承或者是否允许多次使用 这两个属性则需要先指定特性的作用范围，即限定是类能使用还是所有都可以。</p><h2 id="1-2-使用特性"><a href="#1-2-使用特性" class="headerlink" title="1.2 使用特性"></a>1.2 使用特性</h2><p>我们自定义了一个特性，就必须使用它才能会有意义，否则它只是一个普通的类。那么我们该如何使用呢？其实在上一节中我们隐晦的介绍了特性的使用方式。就是用中括号包裹起来，给类、属性、方法等标记起来。</p><p>首先我们定义一个贼普通的特性：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span> &#123;   &#125;<span class="comment">//没有任何限制，可以用在任何支持特性的地方</span></span><br></pre></td></tr></table></figure><p>然后使用它：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Demo</span>]<span class="comment">//[DemoAttribute]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestDemo</span></span><br><span class="line">&#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如示例所示，在类上面添加<code>[Demo]</code>标记，表示这个类应用了特性DemoAttribute，也可以使用类名，但是C#会自动忽略类名中结尾的Attribute。当然有的人会把特性写在类或者方法等声明的同一行开头位置，不过我一般会写在不同行，毕竟阅读上简单明了。</p><p>我们之前说过，抛开它集成自Attribute类不提，它也是一个类。既然是类，那么就会有属性。那么现在定义一个带属性的特性类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class| AttributeTargets.Enum, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该特性声明了一个变量，使用方式如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Demo(Name = <span class="meta-string">"测试"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>DemoAttribute是一个只能用在 类、枚举 上的特性，有一个属性是Name。在使用的时候可以用<code>(属性名=&quot;属性值&quot;)</code>的方式为属性赋值。</p><p>更多的使用方式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class| AttributeTargets.Enum, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoAttribute</span>(<span class="params"><span class="keyword">int</span> age</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Demo(10,Name = <span class="meta-string">"测试"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>如果特性类声明了构造方法，那么在使用的时候，优先按照构造方法的顺序进行赋值，然后使用<code>属性名=属性值</code>的方式为其他属性进行赋值。</p><h1 id="2-特性在反射中的应用"><a href="#2-特性在反射中的应用" class="headerlink" title="2. 特性在反射中的应用"></a>2. 特性在反射中的应用</h1><p>在第一节中介绍了如何声明一个特性和使用特性，但是没有反射或者类加载技术，那么特性的作用就并没有想象中的那么大。就像人有多个身份，但是也得有对应的公司或者对应的环境。比如说，王XX有个身份是某XX公司老总，那么XX公司得需要在工商局注册登记，他这个身份才会有效。如果没有登记，那么这个身份也就是个虚名。当特性离开了反射，离开了类加载技术，特性就是摆设。当然这部分只限于自定义特性，因为C#内置的一些特性涉及到另外的技术：动态编译，或者需要编译器的配合。我们自定义的特性显然没有这些特权，所以必须我们手动开发对应的行为和规范。</p><p>首先，声明一个类和特性：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class| AttributeTargets.Enum, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoAttribute</span>(<span class="params"><span class="keyword">int</span> age</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">Demo(10,Name = <span class="meta-string">"测试"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-获取类的特性"><a href="#2-1-获取类的特性" class="headerlink" title="2.1 获取类的特性"></a>2.1 获取类的特性</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stuType = <span class="keyword">typeof</span>(Student);</span><br></pre></td></tr></table></figure><p>上述代码先获取到一个类的类型对象，然后调用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;CustomAttributeData&gt; attrs = stuType.CustomAttributes;</span><br></pre></td></tr></table></figure><p>将获取到这个类上声明的所有的自定义的特性，不过获取到的是一个<code>CustomAttributeData</code>，这个类封装了一个特性的特征，但是在我们使用起来会很困难，而且我们更多的需要得到特性本身的对象，而不是这种需要我们进一步处理的对象。那么，调用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;Attribute&gt; data = stuType.GetCustomAttributes(<span class="keyword">typeof</span>(DemoAttribute));</span><br></pre></td></tr></table></figure><p>通过上述方法就可以获取到一组类型是<code>DemoAttribute</code>的特性对象。</p><p>那么回想一下为什么是一组？在<code>AttributeUsageAttribute</code>有一个<code>AllowMultiple</code>属性，这个属性就是用来标记这个特性是否可以标注多个，也就是在同一目标上多次使用，如果这个值为True，则在此处将获取不定个，否则最多一个。具体取决于对目标做了多少标记。</p><p>获取到特性之后，依据实际需求进行开发。这里就不做过多介绍了，在后续篇幅中会对这部分的使用做更多的介绍。</p><h2 id="2-2-获取其他元素的特性"><a href="#2-2-获取其他元素的特性" class="headerlink" title="2.2 获取其他元素的特性"></a>2.2 获取其他元素的特性</h2><p>特性不止可以标记在类上，还可以标记在属性、方法上。那么这些元素应该如何获取对应的特性呢？</p><p><strong>1. 属性</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stuType = <span class="keyword">typeof</span>(Student);</span><br><span class="line"><span class="keyword">var</span> property = stuType.GetProperties()[<span class="number">0</span>];<span class="comment">//假设类有一个Property</span></span><br><span class="line"><span class="keyword">var</span> attrs = property.GetCustomAttributes(<span class="keyword">typeof</span>(DemoAttribute));</span><br></pre></td></tr></table></figure><p><strong>2. 方法</strong> </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stuType = <span class="keyword">typeof</span>(Student);</span><br><span class="line"><span class="keyword">var</span> method = stuType.GetMethods()[<span class="number">0</span>];<span class="comment">// 假设类有一个方法</span></span><br><span class="line"><span class="keyword">var</span> attrs = method.GetCustomAttributes(<span class="keyword">typeof</span>(DemoAttribute));</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的地方是，<code>var</code> 关键字；DemoAttribute只是一个代指，不是特指之前声明的DemoAttribute特性类，因为之前声明的特性类没有对属性和方法进行支持，所以在本节中直接使用会编译不通过。</p></blockquote><p>特性就先简单的介绍到这里，特性可以标记给很多目标比如程序集、模块、类等一系列，但实际开发至少是Web开发中，更多的是标记类、方法、属性等。这里只是介绍了特性的声明和使用，但是没有介绍实际开发中特性的使用，这部分有机会在后续篇幅中介绍吧。因为我也用的不是很多。</p><h1 id="3-反射中的泛型"><a href="#3-反射中的泛型" class="headerlink" title="3. 反射中的泛型"></a>3. 反射中的泛型</h1><p>之前在《C# 基础知识系列- 5 泛型和反射》介绍过，C#的泛型不会在编译过程中抹去痕迹，意思就是我们可以通过反射获取到对象的实际泛型类型。那么如何获取呢？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stuType = <span class="keyword">typeof</span>(Student);</span><br><span class="line"><span class="comment">// 获取类的泛型参数</span></span><br><span class="line"><span class="keyword">var</span> genericTypes = stuType.GenericTypeArguments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> method = stuType.GetMethods()[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 获取方法的泛型参数</span></span><br><span class="line"><span class="keyword">var</span> types = method.GetGenericArguments();</span><br></pre></td></tr></table></figure><p>这个问题，在我写Java代码的时候，困扰了我很久，没有很好的办法。但是在C#中，我可以不用考虑这个问题。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>反射在各大编程语言中是一个很重要的特点，泛型、特性在泛型中扮演着很重要的角色。反射在实际开发中扮演着很重要的角色，但是我们在开发中必须慎重考虑反射的使用。</p><p>到目前为止，反射介绍告一段落，但这不是结束。因为反射是个可深可浅的内容，目前只是介绍了依稀概念和理论上的一些内容，而更多的则隐藏在实际开发中，这时候就需要结合需求进行设计和代码编写了。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 9 字符串的更多用法（二）</title>
      <link href="/basecharp/34774.html"/>
      <url>/basecharp/34774.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>上一篇文章介绍了字符串自身的一些方法，就是对象方法。在字符串体系中，还有一些是<code>string</code>类提供的静态方法。这两部分构成了字符串体系，当然还有一些三方库为字符串提供了扩展方法。<br>这里简单的介绍一下<code>string</code>类的静态方法。</p><a id="more"></a><h1 id="1-玩转创建字符串"><a href="#1-玩转创建字符串" class="headerlink" title="1. 玩转创建字符串"></a>1. 玩转创建字符串</h1><h2 id="1-1-Create一个字符串"><a href="#1-1-Create一个字符串" class="headerlink" title="1.1 Create一个字符串"></a>1.1 Create一个字符串</h2><p>通过调用<code>string.Create</code>方法可以生成一个字符串。该方法的声明是</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> Create&lt;TState&gt; (<span class="keyword">int</span> length, TState state, System.Buffers.SpanAction&lt;<span class="keyword">char</span>,TState&gt; action);</span><br></pre></td></tr></table></figure><p>简单的来讲就是生成一个长度为<code>length</code>的字符串，基本元素是 <code>TState</code>类型的<code>state</code>，具体的填充过程交由<code>action</code>来进行处理。值得注意的是action是一个委托，也就是它可以用lambda表达式直接使用，具体声明如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> SpanAction&lt;T,<span class="keyword">in</span> TArg&gt;(Span&lt;T&gt; span, TArg arg);</span><br></pre></td></tr></table></figure><p>因为方法中指定了<code>Span</code>参数为<code>char</code>，那么 action 的写法应该如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(span, state)=&gt;<span class="comment">//span 的类型是 Span&lt;char&gt;，state的类型是 TState</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 注意，没有返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str = <span class="string">"12320kz,zxcqweqwkuqwiqewpqwwe"</span>;</span><br><span class="line">Console.WriteLine(<span class="keyword">string</span>.Create(<span class="number">10</span>,str, (span, c) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    span.Fill(c[<span class="number">0</span>]);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p><code>span</code>的方法<code>Fill</code>的参数是<code>char</code>，所以这个方法就是按照一定逻辑将 state参数转换成char然后填充给字符串，在action中多次调用Fill只会生效最后一次填充。</p><h2 id="1-2-连接多个元素"><a href="#1-2-连接多个元素" class="headerlink" title="1.2 连接多个元素"></a>1.2 连接多个元素</h2><p>字符串的连接有两个方法，一个是<code>string.Concat</code>，一个是<code>string.Join</code>。</p><p>首先介绍<code>Concat</code>，这个方法最基本的功能就是将多个字符串收尾连接成一个字符串，继续引申，连接任意个对象形成一个字符串，最后将一个集合的元素拼接成字符串。所以，这个方法的声明就有以下内容：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Concat</span> (<span class="params"><span class="keyword">string</span> str0, <span class="keyword">string</span> str1</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Concat</span> (<span class="params"><span class="keyword">object</span> arg0, <span class="keyword">object</span> arg1</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Concat</span> (<span class="params"><span class="keyword">params</span> <span class="keyword">string</span>[] values</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Concat</span> (<span class="params"><span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Concat</span> (<span class="params">System.Collections.Generic.IEnumerable&lt;<span class="keyword">string</span>&gt; values</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);</span><br></pre></td></tr></table></figure><p>以上只是几个具有代表性的方法，介绍到这里有没有觉得它的实现很眼熟？</p><p>没错，字符串的‘加法’运算就是基于这个方法实现的。</p><p><code>Join</code>在行为上与<code>Concat</code>很相似，但是这个方法是用一个分割符（可以是字符串）将一组对象连接起来，所以它的声明就是如下内容：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Join</span> (<span class="params"><span class="keyword">char</span> separator, <span class="keyword">params</span> <span class="keyword">object</span>[] values</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> Join&lt;T&gt; (<span class="keyword">char</span> separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Join</span> (<span class="params"><span class="keyword">string</span> separator, <span class="keyword">params</span> <span class="keyword">object</span>[] values</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> Join&lt;T&gt; (<span class="keyword">string</span> separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);</span><br></pre></td></tr></table></figure><p>这两个方法出镜率非常高，不过<code>Concat</code>更多的是用‘加法’形式，而<code>Join</code>在多个元素快速生成字符串中非常常见。</p><p>这里简单介绍一下<code>Join</code>的使用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    list.Add(i);<span class="comment">// 生成一个列表，元素是0到9这十个数字</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">string</span> str = <span class="keyword">string</span>.Join(<span class="string">","</span>, list);<span class="comment">//0,1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure><h1 id="2-快来比一比"><a href="#2-快来比一比" class="headerlink" title="2. 快来比一比"></a>2. 快来比一比</h1><h2 id="2-1-我们是不是同一个"><a href="#2-1-我们是不是同一个" class="headerlink" title="2.1 我们是不是同一个"></a>2.1 我们是不是同一个</h2><p>因为字符串机制的问题，所以一般字符串的相等性比较分为了两种，字面相等性和引用相等性。在C#中默认的相等性比较是字面值相等性。示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str1 = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">string</span> str2 = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">string</span> str3 = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="string">"123"</span>);</span><br><span class="line"><span class="keyword">bool</span> eq1 = str1 == str2;<span class="comment">// true</span></span><br><span class="line"><span class="keyword">bool</span> eq2 = str2 == str3;<span class="comment">// true</span></span><br><span class="line"><span class="keyword">bool</span> eq3 = str1 == str3;<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>那么如何判断是否是同一个引用呢？通过<code>object.ReferenceEquals</code>来判断是否是同一个引用。继续上面的例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> req1 = <span class="keyword">object</span>.ReferenceEquals(str1, str2);<span class="comment">// true</span></span><br><span class="line"><span class="keyword">bool</span> req1 = <span class="keyword">object</span>.ReferenceEquals(str2, str3);<span class="comment">// false</span></span><br><span class="line"><span class="keyword">bool</span> req3 = <span class="keyword">object</span>.ReferenceEquals(str1, str3);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在C#中，编译器会将一样字面值的字符串指向同一个地址，这个地址是在字符串的常量池中。而使用new等方法创建的字符串，是在程序运行后才会确认字符串具体的值，所以这个地址是后分配的。所以上述两种判断方式会出现不同的结果。</p><p><code>string</code>类提供了一个静态方法<code>Equals</code>，方法声明如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Equals</span> (<span class="params"><span class="keyword">string</span> a, <span class="keyword">string</span> b</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Equals</span> (<span class="params"><span class="keyword">string</span> a, <span class="keyword">string</span> b, StringComparison comparisonType</span>)</span>;</span><br></pre></td></tr></table></figure><p>该方法返回两个字符串是否是相等的，也就是与字符串默认的<code>==</code>判断是一致的。</p><h2 id="2-2-来比一比高矮"><a href="#2-2-来比一比高矮" class="headerlink" title="2.2 来比一比高矮"></a>2.2 来比一比高矮</h2><p>在我们开发的过程中经常会遇到对字符串进行排序的需求，那么字符串排序的逻辑是什么呢？</p><p>对于数字、字母来说是按照ASCII码进行排序的，也就是数字、小写、大写字母这样进行排序。当加入中文后，中文排最后，同种字符按字典顺序进行排序。对于一些跨语言的排序会因为语言不同而导致排序结果不一样。这里有兴趣的可以查看一下微软的官方文档。</p><p>介绍一下字符串排序的基本方法：<code>Compare</code></p><p>这个方法有一个对象的相似方法是<code>CompareTo</code>，这个方法是<code>IComparable</code>接口定义的方法，与这个方法行为一致。该方法常用的有如下几个定义：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Compare</span> (<span class="params"><span class="keyword">string</span> strA, <span class="keyword">string</span> strB</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Compare</span> (<span class="params"><span class="keyword">string</span> strA, <span class="keyword">string</span> strB, StringComparison comparisonType</span>)</span>;</span><br></pre></td></tr></table></figure><p>这个方法返回一个整型，可以理解为两个字符串之间的距离，正的表示A在B的后面，负的表示A在B的前面。值的绝对值越大，两个字符串之间的距离也越大，但是值本身不具备意义。如果值为0，则表示这两个字符串相等。</p><p>有一个重载版本里有个参数类型是<code>StringComparison</code>，这是一个枚举类型，用来定义在比较两个字符串时的一些行为，后续有机会详细介绍这一部分。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str1 = <span class="string">"123a"</span>;</span><br><span class="line"><span class="keyword">string</span> str2 = <span class="string">"132a"</span>;</span><br><span class="line"><span class="keyword">int</span> position1 = <span class="keyword">string</span>.Compare(str1, str2);<span class="comment">// -1</span></span><br><span class="line">str1 = <span class="string">"你好"</span>;</span><br><span class="line">str2 = <span class="string">"我们"</span>;</span><br><span class="line"><span class="keyword">int</span> position2 = <span class="keyword">string</span>.Compare(str1, str2);<span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>可以明显看出，排序规则基本就是字典顺序。</p><h1 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h1><p>补充三个上一篇文章遗漏的方法，插入、删除、获取一个子串。</p><h2 id="3-1-插入到某个位置"><a href="#3-1-插入到某个位置" class="headerlink" title="3.1 插入到某个位置"></a>3.1 插入到某个位置</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Insert</span> (<span class="params"><span class="keyword">int</span> startIndex, <span class="keyword">string</span> <span class="keyword">value</span></span>)</span>;</span><br></pre></td></tr></table></figure><p>在源字符串指定的位置插入一个字符串并返回插入的结果。</p><h2 id="3-2-删除"><a href="#3-2-删除" class="headerlink" title="3.2 删除"></a>3.2 删除</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从startIndex开始，后面的所有元素都删除，包括startIndex，返回剩下的字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Remove</span> (<span class="params"><span class="keyword">int</span> startIndex</span>)</span>;</span><br><span class="line"><span class="comment">//从startIndex开始，删除 count个元素，返回剩下的字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Remove</span> (<span class="params"><span class="keyword">int</span> startIndex, <span class="keyword">int</span> count</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="3-3-获取一个子串"><a href="#3-3-获取一个子串" class="headerlink" title="3.3 获取一个子串"></a>3.3 获取一个子串</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回从startIndex开始，剩下的的元素，包括startIndex</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Substring</span> (<span class="params"><span class="keyword">int</span> startIndex</span>)</span>;</span><br><span class="line"><span class="comment">// 返回从startIndex开始，一共count个元素的字符串，包括startIndex</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Substring</span> (<span class="params"><span class="keyword">int</span> startIndex, <span class="keyword">int</span> length</span>)</span>;</span><br></pre></td></tr></table></figure><p>这一部分的方法比较简单，就不做示例演示了。不过需要注意的是 所有参数都应该是大于0的，且不能大于字符串的长度，包括 startIndex+count。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>目前为止，字符串的常规使用已经完成了，但是字符串的使用却并没有结束，后续会继续介绍C#其他内容，其中有几个内容是与字符串有很大的关联的，这里先容我卖个关子。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 9 字符串的更多用法（一）</title>
      <link href="/basecharp/6060.html"/>
      <url>/basecharp/6060.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>在前面的文章里简单介绍了一下字符串的相关内容，并没有涉及到更多的相关内容，这一篇将尝试讲解一下在实际开发工作中会遇到的字符串的很多操作。</p><h1 id="1-创建一个字符串"><a href="#1-创建一个字符串" class="headerlink" title="1. 创建一个字符串"></a>1. 创建一个字符串</h1><p>这部分介绍一下如何创建一个字符串，在<a href="http://blogs.attachie.club/basecharp/字符串/e6999e60.html">《C# 基础知识系列- 2 字符串》</a>中介绍了通过初始化和简单的字符串赋值的方式创建一个字符串对象。在这里对这部分内容进行一定的补充和扩展。</p><a id="more"></a><h2 id="1-1-Object-ToString-方法"><a href="#1-1-Object-ToString-方法" class="headerlink" title="1.1 Object.ToString 方法"></a>1.1 Object.ToString 方法</h2><p>对于C#的任意一个对象都有一个继承自Object的ToString方法，这个方法没有额外参数，返回一个字符串，在没有进行重写的前提下，该方法返回的是类全名（所谓类全名就是<code>命名空间.类名</code> 的表示）。</p><p>为什么需要介绍这个方法呢？因为这个方法贯穿着整个C#的字符串功能逻辑，这个方法也是用来获取一个对象的文字描述的方法。</p><h2 id="1-2-字符串的‘加法’运算"><a href="#1-2-字符串的‘加法’运算" class="headerlink" title="1.2 字符串的‘加法’运算"></a>1.2 字符串的‘加法’运算</h2><p>什么是字符串的‘加法’运算？</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str1 = <span class="number">1</span> + <span class="string">"123"</span>;<span class="comment">// 1123</span></span><br><span class="line"><span class="keyword">string</span> str2 = <span class="number">2.3</span> + <span class="string">"123"</span>;<span class="comment">//2.3123</span></span><br></pre></td></tr></table></figure><p>如上述示例中描述的，类似于 ‘对象’+‘字符串’ 的形式，我把它成为‘加法’运算。</p><p>为什么叫‘加法’运算？</p><p>其实在官方并没有对这种声明方式做出明确定义，规定其命名方式。我之所以称之为‘加法’运算是因为这种方式跟数值的加法运算有很多相似的地方，比如说优先级的问题。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str1 = <span class="number">1</span> + <span class="string">"1"</span> + <span class="number">123</span>; <span class="comment">// 11123</span></span><br><span class="line"><span class="keyword">string</span> str2 = <span class="number">1</span> + <span class="number">1</span> + <span class="string">"123"</span>; <span class="comment">// 2123</span></span><br><span class="line"><span class="keyword">string</span> str3 = <span class="string">"1"</span> + <span class="number">1</span> + <span class="number">123</span>; <span class="comment">// 11123</span></span><br></pre></td></tr></table></figure><p>以上三个示例，如果按照字符串连接来理解会很麻烦，比如说为什么str2里的1+1会先运算，为什么str3不是1124等。如果按照加法来理解，就很好理解了。str2 先计算1+1=2，然后又计算2 +“123”；str3 先计算 “1”+1 = “11”再计算”11”+123。</p><p>简单来讲就是，在C#中，字符串的‘加法’运算会按照正常数字的加法运算顺序进行运算。如果遇到对象+字符串的计算，则调用对象的<code>ToString</code> 获取对象的字符串描述，再将这个描述与字符串进行连接。</p><h2 id="1-3-字符串的格式化-string-Format"><a href="#1-3-字符串的格式化-string-Format" class="headerlink" title="1.3 字符串的格式化 string.Format"></a>1.3 字符串的格式化 <code>string.Format</code></h2><p><code>string.Format</code>方法C#提供了很多个重载版本，这里只简单介绍一下常用的一种写法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;-&#123;1&#125;"</span>,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//1-2</span></span><br></pre></td></tr></table></figure><p>这个方法的参数列表可以参照：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Format</span>(<span class="params"><span class="keyword">string</span> format,<span class="keyword">params</span> <span class="keyword">object</span>[] objs</span>)</span>;</span><br><span class="line"><span class="comment">//params 关键字表示可变参数列表，后面跟一个数组的声明，表示这个参数可以是任意个，方法内按数组使用</span></span><br></pre></td></tr></table></figure><p>当然，实际上并不是这个。其中format参数是一个格式化字符串，其中{、} 包裹一个数字为占位符，表示后面的objs参数里第几个参数替换到这个位置。</p><p>C#在后续的版本更新中为字符串的格式化增加了一种写法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">10.3</span>;</span><br><span class="line"><span class="keyword">string</span> str = <span class="string">$"<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span>"</span>;</span><br></pre></td></tr></table></figure><p>该写法为在字符串的双引号之前使用美元符号$开始，然后用{、}包裹变量名，表示变量名替换到对应的位置。这种写法简单明了，而且不用担心占位符的数字写错导致报错。objs的数量大于5个，format的内容一旦过长很容易出现占位符数字编号标错的问题。</p><p>有一个问题，如果字符串本身包含‘{’或‘}’呢？解决方法很简单：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">10.3</span>;</span><br><span class="line"><span class="keyword">string</span> str = <span class="string">$"&#123;&#123;c&#125;&#125;<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span>"</span>;<span class="comment">// &#123;c&#125;1010.3</span></span><br></pre></td></tr></table></figure><p>在大括号外面再加一个相同的大括号就可以了。</p><p>这里简单的介绍一下字符串格式化另一个重要的内容，数据的格式化。用法就是在大括号包裹的占位符的后面加<code>:&lt;format表达式&gt;</code>，在数字或变量后面加冒号然后写格式化表达式。</p><p><strong>数字的字符串格式化</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>.Format(<span class="string">"&#123;0:#0.00&#125;-&#123;1&#125;"</span>,<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line"><span class="comment">// #0.00表示生成一个 带两位小数的数字字符串，不足两位用0补齐</span></span><br></pre></td></tr></table></figure><p><strong>日期的字符串格式化</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DateTime date = DateTime.Now;</span><br><span class="line"><span class="keyword">string</span> str = <span class="string">$"<span class="subst">&#123;date:yyyy-MM-dd&#125;</span>"</span>;<span class="comment">// 2020-04-15</span></span><br></pre></td></tr></table></figure><p>这里简单的介绍了一下字符串格式化的内容，更多的内容可以查看微软官方文档或者期待后续文章介绍。</p><h1 id="2-字符串的查找"><a href="#2-字符串的查找" class="headerlink" title="2. 字符串的查找"></a>2. 字符串的查找</h1><h2 id="2-1-是否是某个字符串开头或结尾"><a href="#2-1-是否是某个字符串开头或结尾" class="headerlink" title="2.1 是否是某个字符串开头或结尾"></a>2.1 是否是某个字符串开头或结尾</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">StartsWith</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">EndsWith</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span></span>)</span>;</span><br></pre></td></tr></table></figure><p>返回字符串的开头或末尾是否与<code>value</code>一致。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aisbjaowiue93kas"</span>;</span><br><span class="line">str.StartsWith(<span class="string">"1"</span>);<span class="comment">// false</span></span><br><span class="line">str.StartsWith(<span class="string">"ai"</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="2-2-是否包含某个字符串"><a href="#2-2-是否包含某个字符串" class="headerlink" title="2.2 是否包含某个字符串"></a>2.2 是否包含某个字符串</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Contains</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span></span>)</span>;</span><br></pre></td></tr></table></figure><p>检测源字符串中是否包含一个子串，这个子串与value相等。</p><h2 id="2-3-找一找位置"><a href="#2-3-找一找位置" class="headerlink" title="2.3 找一找位置"></a>2.3 找一找位置</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">IndexOf</span>(<span class="params"><span class="keyword">char</span> <span class="keyword">value</span></span>)</span>;<span class="comment">//查找字符 value 在字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">IndexOf</span>(<span class="params"><span class="keyword">char</span> <span class="keyword">value</span>, <span class="keyword">int</span> startIndex</span>)</span>;<span class="comment">//查找字符串中字符 value在 startIndex之后 第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">IndexOf</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span></span>)</span>;<span class="comment">//查找子串 value 在字符串中第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">IndexOf</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span>, <span class="keyword">int</span> startIndex</span>)</span>;<span class="comment">//查找字符串中子串value在startIndex之后第一次出现的位置</span></span><br></pre></td></tr></table></figure><p>以上方法还有一个相似的方法<code>LastIndexOf</code>，顾名思义，返回最后一次出现的位置，参数与以上方法一致。</p><p>值得注意的是，所有的下标或索引都是从0开始计算位置，如果没有找到则返回 -1。</p><h1 id="3-修改、分解字符串"><a href="#3-修改、分解字符串" class="headerlink" title="3. 修改、分解字符串"></a>3. 修改、分解字符串</h1><p>这部分介绍一下对字符串进行修改和切割。</p><h2 id="3-1-替换内容"><a href="#3-1-替换内容" class="headerlink" title="3.1 替换内容"></a>3.1 替换内容</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Replace</span>(<span class="params"><span class="keyword">string</span> oldValue,<span class="keyword">string</span> newValue</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Replace</span>(<span class="params"><span class="keyword">char</span> oldValue,<span class="keyword">char</span> newValue</span>)</span>;</span><br></pre></td></tr></table></figure><p>将字符串中的oldValue替换成newValue，如果字符串中不包含oldValue，则字符串不发生任何改变。</p><h2 id="3-2-对字符串掐头去尾"><a href="#3-2-对字符串掐头去尾" class="headerlink" title="3.2 对字符串掐头去尾"></a>3.2 对字符串掐头去尾</h2><p>头尾 一起操作：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Trim</span>(<span class="params"></span>)</span>;<span class="comment">// 去掉字符串头和尾的空格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Trim</span>(<span class="params"><span class="keyword">char</span> trimChar</span>)</span>;<span class="comment">//去除字符串头和尾的 字符 trimChar</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Trim</span>(<span class="params"><span class="keyword">params</span> <span class="keyword">char</span>[] trimChars</span>)</span>;<span class="comment">// 从字符串的头和尾中去除 trimChars包含的所有字符</span></span><br></pre></td></tr></table></figure><p>只操作头：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">TrimStart</span>(<span class="params"></span>)</span>;<span class="comment">//去掉字符串开头的空格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">TrimStart</span>(<span class="params"><span class="keyword">char</span> trimChar</span>)</span>;<span class="comment">//去掉字符串开头的字符 trimChar</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">TrimStart</span>(<span class="params"><span class="keyword">params</span> <span class="keyword">char</span>[] trimChars</span>)</span>;<span class="comment">// 从字符串的头去除 trimChars包含的所有字符</span></span><br></pre></td></tr></table></figure><p>最后只操作尾巴：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">TrimEnd</span>(<span class="params"></span>)</span>;<span class="comment">//去掉字符串开头的空格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">TrimEnd</span>(<span class="params"><span class="keyword">char</span> trimChar</span>)</span>;<span class="comment">//去掉字符串开头的字符 trimChar</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">TrimEnd</span>(<span class="params"><span class="keyword">params</span> <span class="keyword">char</span>[] trimChars</span>)</span>;<span class="comment">// 从字符串的头去除 trimChars包含的所有字符</span></span><br></pre></td></tr></table></figure><p>这里有一个问题，对字符串的掐头去尾不能处理子串，都是以字符的形式进行处理的。尤其是 参数<code>params char[] trimChars</code> 的处理，需要格外注意。</p><h2 id="3-3-大小写切换"><a href="#3-3-大小写切换" class="headerlink" title="3.3 大小写切换"></a>3.3 大小写切换</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToLower</span>(<span class="params"></span>)</span>;<span class="comment">// 转换为小写字母</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">ToUpper</span>(<span class="params"></span>)</span>;<span class="comment">// 转换为大写字母</span></span><br></pre></td></tr></table></figure><p>我们通常说的大小写转换是指英文字符的大小写转换，其他语言的大小写转换与对应语言设置有关。中文和数字不会发生变化，尤其是中文不会繁体化或简体化。</p><h2 id="3-4-分解字符串"><a href="#3-4-分解字符串" class="headerlink" title="3.4 分解字符串"></a>3.4 分解字符串</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span>[] <span class="title">Split</span>(<span class="params"><span class="keyword">char</span> separator, StringSplitOptions options = StringSplitOptions.None</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span>[] <span class="title">Split</span>(<span class="params"><span class="keyword">string</span> separator, StringSplitOptions options = StringSplitOptions.None</span>)</span>;</span><br></pre></td></tr></table></figure><p>以上两个方法都会将字符串分解成一个字符串数组，其中分隔符就是<code>separator</code>。</p><p>以上是字符串本身自带的一些方法，下一篇将会介绍String类的一些公共方法，这两篇内容构成了C#的字符串部分。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 8 Linq最后一部分查询表达式语法实践</title>
      <link href="/basecharp/45895.html"/>
      <url>/basecharp/45895.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>之前的几篇文章介绍了Lambda和Linq的一些支持方法。这一篇我尝试通过模拟具体的业务场景来描述一下Linq的两种查询方式的使用。</p><p>一直提的Linq查询方式分为两种，一种就是方法链的形式，官方的称呼是流式查询；另一种是类似于SQL语句的查询方式，我之前叫做类SQL查询方式，不过有的文档称之为查询表达式。<br>注意，本篇内容需要先看过 《C# 基础系列-7》，并有一定的对象和集合的基础。</p><a id="more"></a><h2 id="1-1-数据准备："><a href="#1-1-数据准备：" class="headerlink" title="1.1 数据准备："></a>1.1 数据准备：</h2><p>因为这篇内容会涉及到多个数据源，所以这里需要准备一些类和数据，以下数据纯属虚构，不涉及到现实。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 学生</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> StudentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 姓名</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 班级</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Class &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 科目</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> SubjectId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 年级</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Grade &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 教师</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Teacher &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 考试</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Exam</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 考试编号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> ExamId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 科目编号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> SubjectId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学生编号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> StudentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 分数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Score &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 考试时间：年-月 如202004 表示2020年04月</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Time &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据源：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> List&lt;Student&gt;();<span class="comment">// 学生列表，忽略数据来源</span></span><br><span class="line">List&lt;Subject&gt; subjects = <span class="keyword">new</span> List&lt;Subject&gt;();<span class="comment">// 科目列表，忽略数据来源</span></span><br><span class="line">List&lt;Exam&gt; exams = <span class="keyword">new</span> List&lt;Exam&gt;();<span class="comment">// 考试列表，忽略数据来源</span></span><br></pre></td></tr></table></figure><h1 id="2-查询演示"><a href="#2-查询演示" class="headerlink" title="2 查询演示"></a>2 查询演示</h1><p>预先介绍一个概念，C#中有一种类型叫做匿名类型。因为C#的要求是万物皆对象，对象皆有类，所以每一个对象或者数据都是有类型在背后支撑的。但是有时候会需要一些一次性的只读类型，这时候声明一个完整的类就有点得不偿失了。什么是一次性的只读类型呢，就是我们只关心它有哪些属性，不关心它有什么方法，同时这个类对应的对象只能在初始化的时候给属性赋值其他时候不能重新赋值，而且这个类型只在方法内部使用，在这个变量使用完成之后这个类型也失去了意义，这种类型就是我们所说的一次性的只读类型。</p><p>那么这种类型怎么声明呢？先不急，先再介绍一个关键字<code>var</code>。这个关键字有什么特别的地点吗？<code>var</code> 表示隐式“类型”，意思就是用<code>var</code>声明的变量其类型需要编译器自己结合上下文推断，也就是说使用者和声明者都知道这个变量的类型，但是没有明说。</p><p>那么为什么需要介绍<code>var</code>呢？原因在于，<code>var</code> 是匿名对象的基础。因为匿名对象不能用<code>object</code>声明变量，原因有两点，第一，变量声明为object之后，我们所需要的属性就无法使用了；第二，匿名类型的对象无法直接类型转换为object。所以，想要正常使用匿名类型，必须用<code>var</code>。</p><p>下面简单演示一下匿名类型的声明和使用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> </span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">"萧三"</span>,</span><br><span class="line">    Age = <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// obj.Name 萧三</span></span><br><span class="line"><span class="comment">// obj.Age 20</span></span><br></pre></td></tr></table></figure><p>这就是匿名类型，声明了一个有Name和Age属性的对象，这个对象我们知道它有哪些属性，但是不知道它的类型是什么。</p><p>在介绍完需要的知识后，将通过实际的情况来比较一下流式查询和查询表达式两种写法。</p><h2 id="2-1-简单查询"><a href="#2-1-简单查询" class="headerlink" title="2.1 简单查询"></a>2.1 简单查询</h2><ol><li><p>查询班级是三年一班的所有同学</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = students.Where(t=&gt;t.Class==<span class="string">"三年一班"</span>);</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> students</span><br><span class="line">    <span class="keyword">where</span> s.Class == <span class="string">"三年一班"</span></span><br><span class="line">    <span class="keyword">select</span> s;</span><br></pre></td></tr></table></figure><p>这两种查询方式结构都是IEnumerable&lt;T&gt;。</p></li><li><p>获取姓张的所有学生的花名册</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = students.Where(t=&gt;t.Name.StartWith(<span class="string">"张"</span>));</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> students <span class="keyword">where</span> s.Name.StartWith(<span class="string">"张"</span>) <span class="keyword">select</span> s;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>按班级进行分组获取每个班的学生花名册</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = students.GroupBy(t =&gt; t.Class);</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> students <span class="keyword">group</span> s <span class="keyword">by</span> s.Class;</span><br><span class="line"><span class="comment">// 注明：完整的写法如下：</span></span><br><span class="line"><span class="comment">// var results = from s in students group s by s.Class into g select g;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，如果返回结果是一个分组的结果，那么就不用select了。</p></li><li><p>查询每个班的平均年龄</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = students.GroupBy(t =&gt; t.Class)</span><br><span class="line">                .Select(t =&gt; <span class="keyword">new</span> &#123;Class = t.Key, AveAge = t.Average(p =&gt; p.Age)&#125;);</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> students</span><br><span class="line">                <span class="keyword">group</span> s <span class="keyword">by</span> s.Class</span><br><span class="line">                <span class="keyword">into</span> g</span><br><span class="line">                <span class="keyword">select</span> <span class="keyword">new</span> &#123;Class = g.Key, AveAge = g.Average(t =&gt; t.Age)&#125;;</span><br></pre></td></tr></table></figure><p>查询表达式中没有统计查询的相关关键字，只能通过方法来获取，同时查询表达式返回的是一个集合，所以没法直接通过查询表达式进行求和、求平均等。</p></li><li><p>对所有学生按照年龄大小从大到小进行排序</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = students.OrderByDescending(t =&gt; t.Age);</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> students <span class="keyword">orderby</span> s.Age <span class="keyword">descending</span> <span class="keyword">select</span> s;</span><br></pre></td></tr></table></figure></li><li><p>对所有学生按照年龄大小从小到大进行排序</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = students.OrderBy(t =&gt; t.Age);</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> students <span class="keyword">orderby</span> s.Age <span class="keyword">select</span> s;</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>先按年龄排序再按姓名进行排序</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = students.OrderBy(t =&gt; t.Age).ThenBy(t=&gt;t.Name);<span class="comment">//ThenByDescending 是降序版的ThenBy</span></span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> students <span class="keyword">orderby</span> s.Age <span class="comment">//descending 如果是降序则增加这个关键字</span></span><br><span class="line">    , s.Name <span class="keyword">select</span> s;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-复杂查询"><a href="#2-2-复杂查询" class="headerlink" title="2.2 复杂查询"></a>2.2 复杂查询</h2><p>前一部分介绍了简单的查询，这一部分介绍联合多个数据源进行一系列的查询操作。</p><ol><li><p>查询三年级语文科目在202004月举行的考试的所有成绩</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = subjects.Join(exams, s =&gt; s.SubjectId, e =&gt; e.StudentId, (s, e) =&gt; <span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">    s.Name,</span><br><span class="line">    s.Grade,</span><br><span class="line">    e.Score,</span><br><span class="line">    e.Time</span><br><span class="line">&#125;).Where(t=&gt;t.Grade == <span class="string">"三年级"</span> &amp;&amp; t.Name ==<span class="string">"语文"</span> &amp;&amp; t.Time == <span class="number">202004</span>).Select(t=&gt;t.Score);</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> subjects</span><br><span class="line">                <span class="keyword">join</span> e <span class="keyword">in</span> exams <span class="keyword">on</span> s.SubjectId <span class="keyword">equals</span> e.SubjectId</span><br><span class="line">                <span class="keyword">where</span> e.Time == <span class="number">202004</span> &amp;&amp; s.Grade == <span class="string">"三年级"</span> &amp;&amp; s.Name == <span class="string">"语文"</span></span><br><span class="line">                <span class="keyword">select</span> e.Score;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>按年级进行分组，查询各年级语文分数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = subjects.Where(p =&gt; p.Name == <span class="string">"语文"</span>)</span><br><span class="line">                .Join(exams, s =&gt; s.SubjectId, e =&gt; e.SubjectId, (s, e) =&gt; <span class="keyword">new</span> &#123;s.Grade, e.Score&#125;)</span><br><span class="line">                .GroupBy(t =&gt; t.Grade);</span><br><span class="line"><span class="comment">// 查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> subjects</span><br><span class="line">                <span class="keyword">join</span> e <span class="keyword">in</span> exams <span class="keyword">on</span> s.SubjectId <span class="keyword">equals</span> e.SubjectId</span><br><span class="line">                <span class="keyword">where</span> s.Name == <span class="string">"语文"</span></span><br><span class="line">                <span class="keyword">group</span> e.Score <span class="keyword">by</span> s.Grade</span><br><span class="line">                <span class="keyword">into</span> g</span><br><span class="line">                <span class="keyword">select</span> g;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>求各年级历次考试各科目分数的平均分和最高分以及最低分</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//流式查询</span></span><br><span class="line"><span class="keyword">var</span> results = subjects.Join(exams, s =&gt; s.SubjectId, e =&gt; e.SubjectId, (s, e) =&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                s.Grade,</span><br><span class="line">                s.Name,</span><br><span class="line">                e.Score</span><br><span class="line">            &#125;).GroupBy(t =&gt; t.Grade).Select(t =&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                Grade = t.Key,</span><br><span class="line">                Subjects = t.GroupBy(p =&gt; p.Name).Select(p =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Name = p.Key,</span><br><span class="line">                    Max = p.Max(r =&gt; r.Score),</span><br><span class="line">                    Min = p.Min(r =&gt; r.Score),</span><br><span class="line">                    Average = p.Average(r =&gt; r.Score)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">//查询表达式</span></span><br><span class="line"><span class="keyword">var</span> results = <span class="keyword">from</span> s <span class="keyword">in</span> subjects</span><br><span class="line">                <span class="keyword">join</span> e <span class="keyword">in</span> exams <span class="keyword">on</span> s.SubjectId <span class="keyword">equals</span> e.SubjectId</span><br><span class="line">                <span class="keyword">let</span> o = <span class="keyword">new</span> &#123;s.Grade, s.Name, e.Score&#125;</span><br><span class="line">                <span class="keyword">group</span> o.Score <span class="keyword">by</span> <span class="keyword">new</span> &#123;o.Grade, o.Name&#125;</span><br><span class="line">                <span class="keyword">into</span> o</span><br><span class="line">                <span class="keyword">let</span> p = <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    o.Key.Grade, Subject = <span class="keyword">new</span> &#123;o.Key.Name, </span><br><span class="line">                                                Max = o.Max(),</span><br><span class="line">                                                Min = o.Min(), </span><br><span class="line">                                                Average = o.Average()&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">group</span> p.Subject <span class="keyword">by</span> p.Grade</span><br><span class="line">                <span class="keyword">into</span> g</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">select</span> <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Grade = g.Key,</span><br><span class="line">                    Subjects = g.AsEnumerable()</span><br><span class="line">                &#125;;</span><br></pre></td></tr></table></figure></li></ol><p>   以上大概介绍了一下Linq的使用，明显可以看得出，流式查询和查询表达式在可读性上区别还是蛮大的。对于熟悉SQL的人，查询表达式能更快的上手；对于我来说，更习惯于用流式查询，不过在多数据源联合的时候，我更倾向于写查询表达式。以上是基础篇Linq的全部内容。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> linq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列-7 Linq 方法详解</title>
      <link href="/basecharp/9197.html"/>
      <url>/basecharp/9197.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇中简单介绍了Linq的入门级用法，这一篇尝试讲解一些更加深入的使用方法，与前一篇的结构不一样的地方是，这一篇我会先介绍Linq里的支持方法，然后以实际需求为引导，分别以方法链的形式和类SQL的形式写出来。</p><h1 id="前置概念介绍"><a href="#前置概念介绍" class="headerlink" title="前置概念介绍"></a>前置概念介绍</h1><ol><li><code>Predicate&lt;T&gt;</code>  谓词、断言，等价于 <code>Func&lt;T,bool&gt;</code> 即返回bool的表达式</li><li><code>Expression&lt;TDelegate&gt;</code> 表达式树，这个类很关键，但是在这里会细说，我们会讲它的一个特殊的泛型类型：<code>Expression&lt;Func&lt;T,bool&gt;&gt;</code> 这个在某些数据源的查询中十分重要，它代表lambda表达式中一种特殊的表达式，即没有大括号和<code>return</code>关键字的那种。<a id="more"></a></li></ol><p><strong>我们先准备两个类</strong>：</p><ol><li><p>Student/学生类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 学生</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> StudentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 姓名</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 班级</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Class &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>Subject/科目类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 科目</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 年级</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Grade &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> StudentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 成绩</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Score &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>Subject 和Student通过学号字段一一关联，实际工作中数据表有可能会设计成这。</p><p>那么先虚拟两个数据源：<code>IEnumerable&lt;Student&gt; students</code>  和 <code>IEnumerable&lt;Subject&gt; subjects</code>。先忽略这两个数据源的实际来源，因为在开发过程中数据来源有很多种情况，有数据库查询出来的结果、远程接口返回的结果、文件读取的结果等等。不过最后都会整理成<code>IEnumerable&lt;T&gt;</code>的子接口或实现类的对象。</p><h1 id="常见方法介绍"><a href="#常见方法介绍" class="headerlink" title="常见方法介绍"></a>常见方法介绍</h1><h2 id="Where-过滤数据，查询出符合条件的结果"><a href="#Where-过滤数据，查询出符合条件的结果" class="headerlink" title="Where 过滤数据，查询出符合条件的结果"></a>Where 过滤数据，查询出符合条件的结果</h2><p>where的方法声明：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="keyword">bool</span>&gt; predicate)</span><br></pre></td></tr></table></figure><p>可以看出不会转换数据类型，通过给定的lambda表达式或者一个方法进行过滤，获取返回true的元素。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取年纪大于10但不大于12的同学们</span></span><br><span class="line">List&lt;Student&gt; results = students.Where(t=&gt;t.Age &gt;<span class="number">10</span> &amp;&amp; t.Age&lt;= <span class="number">12</span>).ToList();</span><br></pre></td></tr></table></figure><p>注意在调用ToList之后数据才会实质上查询出来。</p><h2 id="Group-分组，依照指定内容进行分组"><a href="#Group-分组，依照指定内容进行分组" class="headerlink" title="Group 分组，依照指定内容进行分组"></a>Group 分组，依照指定内容进行分组</h2><p>Group的方法声明有很多种：</p><p>最常用的一种是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将学生按照班级进行分组</span></span><br><span class="line">List&lt;IGrouping&lt;<span class="keyword">string</span>,Student&gt;&gt; list = students.GroupBy(p =&gt; p.Class).ToList();</span><br></pre></td></tr></table></figure><h2 id="OrderBy-OrderByDescending-进行排序，按条件升序-降序"><a href="#OrderBy-OrderByDescending-进行排序，按条件升序-降序" class="headerlink" title="OrderBy/OrderByDescending 进行排序，按条件升序/降序"></a>OrderBy/OrderByDescending 进行排序，按条件升序/降序</h2><p>它们是一对方法，一个是升序一个降序，其声明是一样的：</p><p>常用的是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按年龄的升序排列：</span></span><br><span class="line">List&lt;Student&gt; results = students.OrderBy(p =&gt; p.Age).ToList();</span><br><span class="line"><span class="comment">//按年龄的降序排列：</span></span><br><span class="line">List&lt;Student&gt; results = students.OrderByDescending(p =&gt; p.Age).ToList();</span><br></pre></td></tr></table></figure><h2 id="First-Last-获取数据源的第一个-最后一个"><a href="#First-Last-获取数据源的第一个-最后一个" class="headerlink" title="First/Last  获取数据源的第一个/最后一个"></a>First/Last  获取数据源的第一个/最后一个</h2><p>这组方法有两个常用的重载声明：</p><p>First：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接获取第一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TSource First&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source);</span><br><span class="line"><span class="comment">// 获取满足条件的第一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TSource First&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="keyword">bool</span>&gt; predicate);</span><br></pre></td></tr></table></figure><p>Last：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接获取最后一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TSource Last&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source);</span><br><span class="line"><span class="comment">// 获取最后一个满足条件的元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TSource Last&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="keyword">bool</span>&gt; predicate);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student student = students.First();<span class="comment">// 等价于 students[0];</span></span><br><span class="line">Student student = students.First(p=&gt;p.Class == <span class="string">"一班"</span>);<span class="comment">//获取数据源中第一个一班的同学</span></span><br><span class="line"></span><br><span class="line">Student student = students.Last();<span class="comment">//最后一个学生</span></span><br><span class="line">Student student = students.Last(p=&gt;p.Class == <span class="string">"三班"</span>);<span class="comment">//获取数据源中最后一个三班的同学</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>在某些数据源中使用Last会报错，因为对于一些管道类型的数据源或者说异步数据源，程序无法确认最后一个元素的位置，所以会报错。解决方案：先使用OrderBy对数据源进行一次排序，使结果与原有顺序相反，然后使用First获取</li><li>当数据源为空，或者不存在满足条件的元素时，调用这组方法会报错。解决方案：调用FirstOrDefault/LastOrDefault，这两组方法在无法查询到结果时会返回一个默认值。</li></ul><h2 id="Any-All-是否存在-是否都满足"><a href="#Any-All-是否存在-是否都满足" class="headerlink" title="Any/All 是否存在/是否都满足"></a>Any/All 是否存在/是否都满足</h2><p>Any：是否存在元素满足条件</p><p>有两个版本，不过意思可能不太一样：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> Any&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source);<span class="comment">//数据源中是否有数据</span></span><br><span class="line"><span class="comment">//================</span></span><br><span class="line"><span class="comment">//是否存在满足条件的数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> Any&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="keyword">bool</span>&gt; predicate);</span><br></pre></td></tr></table></figure><p>All ：是否都满足条件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> Any&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="keyword">bool</span>&gt; predicate);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否有学生</span></span><br><span class="line"><span class="keyword">bool</span> isAny =  students.Any();</span><br><span class="line"><span class="comment">// 是否有五班的同学</span></span><br><span class="line"><span class="keyword">bool</span> isFive = students.Any(p=&gt;p.Class == <span class="string">"五班"</span>);</span><br><span class="line"><span class="comment">// 是否所有学生的年纪都不小于9岁</span></span><br><span class="line"><span class="keyword">bool</span> isAll = students.All(p=&gt;p.Age &gt;= <span class="number">9</span>);</span><br></pre></td></tr></table></figure><h2 id="Skip-略过几个元素"><a href="#Skip-略过几个元素" class="headerlink" title="Skip 略过几个元素"></a>Skip 略过几个元素</h2><p>Skip一共有三个衍生方法：</p><p>第一个：Skip 自己： 略过几个元素，返回剩下的元素内容</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, <span class="keyword">int</span> count);</span><br></pre></td></tr></table></figure><p>第二个：SkipLast，从尾巴开始略过几个元素，返回剩下的元素内容</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, <span class="keyword">int</span> count);</span><br></pre></td></tr></table></figure><p>第三个：SkipWhile，跳过满足条件的元素，返回剩下的元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="keyword">bool</span>&gt; predicate);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不保留前10个学生</span></span><br><span class="line">List&lt;Student&gt; results = students.Skip(<span class="number">10</span>).ToList();</span><br><span class="line"><span class="comment">// 不保留后10个学生</span></span><br><span class="line">List&lt;Student&gt; results = students.SkipLast(<span class="number">10</span>).ToList();</span><br><span class="line"><span class="comment">// 只要非一班的学生</span></span><br><span class="line">List&lt;Student&gt; results = students.SkipWhere(p=&gt;p.Class==<span class="string">"一班"</span>).ToList();</span><br><span class="line"><span class="comment">//上一行代码 等价于 = students.Where(p=&gt;p.Class != "一班").ToList();</span></span><br></pre></td></tr></table></figure><h2 id="Take-选取几个元素"><a href="#Take-选取几个元素" class="headerlink" title="Take 选取几个元素"></a>Take 选取几个元素</h2><p>Take与Skip一样也有三个衍生方法，声明的参数类型也一样，这里就不对声明做介绍了，直接上示例。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选取前10名同学</span></span><br><span class="line">List&lt;Student&gt; results = students.Take(<span class="number">10</span>).ToList();</span><br><span class="line"><span class="comment">// 选取最后10名同学</span></span><br><span class="line">List&lt;Student&gt; results = students.TakeLast(<span class="number">10</span>).ToList();</span><br><span class="line"><span class="comment">//选取 一班的学生</span></span><br><span class="line">List&lt;Student&gt; results = students.TakeWhile(p=&gt;p.Class==<span class="string">"一班"</span>).ToList();</span><br><span class="line"><span class="comment">// 上一行 等价于 = students.Where(p=&gt;p.Class=="一班").ToList();</span></span><br></pre></td></tr></table></figure><p>在使用Linq写分页的时候，就是联合使用Take和Skip这两个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pageSize = <span class="number">10</span>;<span class="comment">//每页10条数据</span></span><br><span class="line"><span class="keyword">int</span> pageIndex = <span class="number">1</span>;<span class="comment">//当前第一页</span></span><br><span class="line">List&lt;Student&gt; results = students.Skip((pageIndex<span class="number">-1</span>)*pageSize).Take(pageSize).ToList();</span><br></pre></td></tr></table></figure><p>其中 pageIndex可以是任意大于0 的数字。Take和Skip比较有意思的地方就是，如果传入的数字比数据源的数据量大，根本不会爆粗，只会返回一个空数据源列表。</p><h2 id="Select-选取"><a href="#Select-选取" class="headerlink" title="Select 选取"></a>Select 选取</h2><p>官方对于Select的解释是，将序列中的每个元素投影到新的表单里。我的理解就是，自己 定义一个数据源单个对象的转换器，然后按照自己的方式对数据进行处理，选择出一部分字段，转换一部分字段。</p><p>所以按我的理解，我没找到java8的同效果方法。（实际上java用的是map，所以没找到，:-D）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选出班级和姓名</span></span><br><span class="line">List&lt;<span class="keyword">object</span>&gt; results = students.Select(p =&gt; <span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">    p.Class,</span><br><span class="line">    p.Name</span><br><span class="line">&#125;).ToList();</span><br></pre></td></tr></table></figure><h1 id="简单运算操作"><a href="#简单运算操作" class="headerlink" title="简单运算操作"></a>简单运算操作</h1><p>Linq 里有几个需要注意的简单运算操作，这部分在使用中很常见。</p><h2 id="Max-选取最大的一个"><a href="#Max-选取最大的一个" class="headerlink" title="Max 选取最大的一个"></a>Max 选取最大的一个</h2><p>Max获取数据源中最大的一个，不过只能是数字类型的，其他类型因为不能直接比较大小所以可以有替代方法，就是先排序取第一个。</p><p>以下是Max方法的两个重载版本：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Max</span> (<span class="params"><span class="keyword">this</span> IEnumerable&lt;<span class="keyword">int</span>&gt; source</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Max &lt;TSource&gt;(<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source,Func&lt;TSource,<span class="keyword">int</span>&gt; selector);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询学生中最大的年纪是多少</span></span><br><span class="line"><span class="keyword">int</span> maxAge = students.Select(t=&gt;t.Age).Max();</span><br></pre></td></tr></table></figure><h2 id="Min-选取最小的一个"><a href="#Min-选取最小的一个" class="headerlink" title="Min 选取最小的一个"></a>Min 选取最小的一个</h2><p>方法类似与Max，不过与之不同的是获取最小的一个，不能应用于非数字类型。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询学生中最小的年纪是多少</span></span><br><span class="line"><span class="keyword">int</span> minAge = students.Select(t=&gt; t.Age).Min();</span><br><span class="line"><span class="comment">//=======</span></span><br><span class="line"><span class="keyword">int</span> minAge = students.Min(p=&gt;p.Age);</span><br></pre></td></tr></table></figure><h2 id="Average-求平均数"><a href="#Average-求平均数" class="headerlink" title="Average  求平均数"></a>Average  求平均数</h2><p>与 Max/Min是一样类型的方法，依旧不能应用于非数字类型。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询学生的评价年纪</span></span><br><span class="line"><span class="keyword">int</span> averageAge = students.Select(t=&gt;t.Age).Average();</span><br><span class="line"><span class="keyword">int</span> averageAge = students.Average(p=&gt;p.Age);</span><br></pre></td></tr></table></figure><h2 id="Sum-求和"><a href="#Sum-求和" class="headerlink" title="Sum  求和"></a>Sum  求和</h2><p>对数据源进行求和或者对数据源的某个字段进行求和，还是不能对非数字类型进行求和</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个没有实际意义的求和，学生的年龄总和</span></span><br><span class="line"><span class="keyword">int</span> sumAge = students.Select(t=&gt;t.Age).Sum();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span> sumAge = students.Sum(p=&gt;p.Age);</span><br></pre></td></tr></table></figure><h2 id="Contains-是否包含某个元素"><a href="#Contains-是否包含某个元素" class="headerlink" title="Contains  是否包含某个元素"></a>Contains  是否包含某个元素</h2><p>判断数据源中是否包含某个元素，返回一个bool值，如果包含则返回true，如果不包含则返回false。该方法有两个重载版本，一个是使用默认的<code>Equals</code>方法，一个是指定一个相等性比较器实现类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> Contains&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, TSource <span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入相等性比较器的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> Contains&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, TSource <span class="keyword">value</span>, IEqualityComparer&lt;TSource&gt; comparer);</span><br></pre></td></tr></table></figure><p>值得注意的是，这里的相等比较器是一个接口，也就是说需要使用类来实现这个方法。通常在实际开发过程中，我们会在TSource这个数据源所代表的类上增加 IEqualityCompare的实现。</p><p>示例1：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student student1 = <span class="keyword">new</span> Student();<span class="comment">// 初始化一个学生类</span></span><br><span class="line">Student student2 = students.First();<span class="comment">// 从数据源中取一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isContains = students.Contains(student1);<span class="comment">// 返回 false，</span></span><br><span class="line"><span class="keyword">bool</span> isContains2 = students.Contains(student2);<span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure><blockquote><p>说明： 类的默认相等比较是比较是否是同一个对象，即返回的</p></blockquote><p>示例2： </p><p>创建一个相等性比较器，值得注意的是，相等性比较器有两个方法，一个是比较元素是否相等，一个是返回元素的HashCode，这两个方法必须在判断元素是否相等上保持结果一致。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class StudentEqualityCompare: IEqualityComparer&lt;Student&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params">Student x, Student y</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 省略逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetHashCode</span>(<span class="params">Student obj</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//省略逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StudentEqualityCompare compare = <span class="keyword">new</span> StudentEqualityCompare();</span><br><span class="line">Student student = students.First();</span><br><span class="line"><span class="keyword">bool</span> isContains = students.Contains(student, compare);</span><br></pre></td></tr></table></figure><h2 id="Count-LongCount-数量查询"><a href="#Count-LongCount-数量查询" class="headerlink" title="Count/LongCount 数量查询"></a>Count/LongCount 数量查询</h2><p>这是一组行为一样的方法，就是对数据源进行计数，不同的是Count返回int，LongCount返回long。</p><p>它们的声明有以下两种，这里选了Count的声明：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Count&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Count&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource,<span class="keyword">bool</span>&gt; predicate);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = students.Count();<span class="comment">//返回一共有多少个学生</span></span><br><span class="line"><span class="keyword">int</span> count = students.Count(p=&gt;p.Class==<span class="string">"一班"</span>);<span class="comment">// 统计一班一共有多少学生</span></span><br></pre></td></tr></table></figure><h1 id="同类型数据源的操作"><a href="#同类型数据源的操作" class="headerlink" title="同类型数据源的操作"></a>同类型数据源的操作</h1><p>之前介绍了单个数据源的操作方法，这些方法不会让数据源发生变化，更多的对数据源进行过滤和选择或者统计。现在介绍几个对多个数据源进行操作的方法。</p><h2 id="Union-联合另一个同类型的数据源"><a href="#Union-联合另一个同类型的数据源" class="headerlink" title="Union  联合另一个同类型的数据源"></a>Union  联合另一个同类型的数据源</h2><p>联合另一个数据源，意思就是把两个数据源合并到一个里面，去掉重复的元素，只保留不重复的元素，并返回这个结果集。</p><p>与Contains方法差不多，这个方法有两个重载的版本：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; first, IEnumerable&lt;TSource&gt; second);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; first, IEnumerable&lt;TSource&gt; second, IEqualityComparer&lt;TSource&gt; comparer);</span><br></pre></td></tr></table></figure><p>示例：</p><p>先假设一个业务场景：</p><p>学校举办运动会，现在教务处收到了田径组 500米跑的报名名单和跳远的报名名单，需要看看一共有哪些学生报名了这两项赛事。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略数据源，田径组的名单</span></span><br><span class="line">IEnumerable&lt;Student&gt; students1 = <span class="keyword">new</span> List&lt;Student&gt;();</span><br><span class="line"><span class="comment">//省略数据源来源，跳远组的名单</span></span><br><span class="line">IEnumerable&lt;Student&gt; students2 = <span class="keyword">new</span> List&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; all = students1.Union(student2).ToList();</span><br></pre></td></tr></table></figure><p>这时候简单统计了一下所有人，但是后来教务处在核对的时候，发现有的人名重复了，需要判断是否是一个人，这时候就必须创建一个相等比较器了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; all = students1.Union(student2,compare).ToList();</span><br><span class="line"><span class="comment">// 省略compare的实现，具体可参照Contains的比较器</span></span><br></pre></td></tr></table></figure><h2 id="Intersect-获取两个集合中都存在的数据"><a href="#Intersect-获取两个集合中都存在的数据" class="headerlink" title="Intersect  获取两个集合中都存在的数据"></a>Intersect  获取两个集合中都存在的数据</h2><p>获取同时存在于两个集合中的元素，与Union类似。</p><p>方法的声明如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; first, IEnumerable&lt;TSource&gt; second);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; first, IEnumerable&lt;TSource&gt; second, IEqualityComparer&lt;TSource&gt; comparer);</span><br></pre></td></tr></table></figure><p>示例：</p><p>继续之前的业务场景，现在教务处需要知道有哪些同学同时报名了两个比赛</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = students1.Intersect(students2).ToList();</span><br></pre></td></tr></table></figure><h2 id="Except-获取只在第一个数据源中存在的数据"><a href="#Except-获取只在第一个数据源中存在的数据" class="headerlink" title="Except  获取只在第一个数据源中存在的数据"></a>Except  获取只在第一个数据源中存在的数据</h2><p>获取只存在于第一个集合的元素，从第一个集合中去除同时存在与第二个集合的元素，并返回。</p><p>方法的声明如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; first, IEnumerable&lt;TSource&gt; second);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; first, IEnumerable&lt;TSource&gt; second, IEqualityComparer&lt;TSource&gt; comparer);</span><br></pre></td></tr></table></figure><p>示例：</p><p>继续业务描述，教务处要一份只报名了500米的学生名单：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = students1.Except(students2).ToList();</span><br></pre></td></tr></table></figure><h2 id="Reverse-翻转顺序"><a href="#Reverse-翻转顺序" class="headerlink" title="Reverse 翻转顺序"></a>Reverse 翻转顺序</h2><p>数据源中的元素原本有一定的顺序，这个方法可以将数据源中的顺序翻转过来，原本是最后一个的变成了第一个</p><p>，第一个变成了最后一个。</p><p>简单示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] apple = &#123; <span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'l'</span>, <span class="string">'e'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] reversed = apple.Reverse().ToArray();</span><br></pre></td></tr></table></figure><h2 id="Distinct-去重"><a href="#Distinct-去重" class="headerlink" title="Distinct 去重"></a>Distinct 去重</h2><p>对数据源进行去重，然后返回去重之后的结果。同样，这个方法有两个重载版本，一个有比较器，一个没有比较器。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不用比较器的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source);</span><br><span class="line"><span class="comment">// 设置比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (<span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, IEqualityComparer&lt;TSource&gt; comparer);</span><br></pre></td></tr></table></figure><p>示例：</p><p>先描述一个可能会出现的场景，每个班级在各个赛事组提交报名信息的时候有点混乱，500米的负责老师把一个班的名单多录了一次，但是学生已经乱序了，现在需要把多录的去掉，也就是对数据进行去重。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = students1.Distinct();</span><br></pre></td></tr></table></figure><h1 id="多个类型数据源的操作"><a href="#多个类型数据源的操作" class="headerlink" title="多个类型数据源的操作"></a>多个类型数据源的操作</h1><p>之前的方法基本都是对一个类型的数据源进行操作，不会涉及其他类型的数据源。现在介绍一下怎么关联多个类型的数据源，类似于SQL里的多表链接查询。</p><h2 id="Join-关联两个数据源"><a href="#Join-关联两个数据源" class="headerlink" title="Join 关联两个数据源"></a>Join 关联两个数据源</h2><p>按照一定的逻辑将两个数据源关联到一起，然后选择出需要的数据。</p><p>方法有这几个重载版本：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (<span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer, IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (<span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer, IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, IEqualityComparer&lt;TKey&gt; comparer);</span><br></pre></td></tr></table></figure><p>这个方法的参数比较多，我们大概介绍一下这个方法的所有参数：</p><p><strong>类型参数</strong></p><ul><li><p>TOuter 第一个序列中的元素的类型。 </p></li><li><p>TInner  第二个序列中的元素的类型。 </p></li><li><p>TKey 选择器函数返回的键的类型。</p></li><li><p>TResult 结果元素的类型。 </p></li></ul><p><strong>参数</strong></p><ul><li><p>outer <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1?view=netcore-3.1" target="_blank" rel="noopener">IEnumerable</a><TOuter> 要联接的第一个序列。 </p></li><li><p>inner <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1?view=netcore-3.1" target="_blank" rel="noopener">IEnumerable</a><TInner>  要与第一个序列联接的序列。</p></li><li><p>outerKeySelector <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.func-2?view=netcore-3.1" target="_blank" rel="noopener">Func</a>&lt;TOuter,TKey&gt; 用于从第一个序列的每个元素提取联接键的函数。</p></li><li><p>innerKeySelector   <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.func-2?view=netcore-3.1" target="_blank" rel="noopener">Func</a>&lt;TInner,TKey&gt;  用于从第二个序列的每个元素提取联接键的函数。</p></li><li><p>resultSelector  <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.func-3?view=netcore-3.1" target="_blank" rel="noopener">Func</a>&lt;TOuter,TInner,TResult&gt; 用于从两个匹配元素创建结果元素的函数。</p></li><li><p>comparer<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netcore-3.1" target="_blank" rel="noopener">IEqualityComparer</a><TKey>  用于对键进行哈希处理和比较的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netcore-3.1" target="_blank" rel="noopener">IEqualityComparer</a>。</p></li></ul><p>示例：</p><p>假设前天语文老师组织了一场考试，因为是模拟正式考试，所以答题纸上学生都只写了学号，现在需要把考试成绩和学生们联系在一起</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">object</span>&gt; results = students.Join(subjects,</span><br><span class="line">                                     p =&gt; p.StudentId, </span><br><span class="line">                                     s =&gt; s.StudentId, </span><br><span class="line">                                     (p, s) =&gt; <span class="keyword">new</span> </span><br><span class="line">                                     &#123;</span><br><span class="line">                                         Student = p, </span><br><span class="line">                                         Subject = s</span><br><span class="line">                                     &#125;).ToList();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">返回一个学生和科目的匿名对象，不过被我用object接了，这里会有一个问题，如果有兴致可以提前了解一下C#的var关键字和匿名对象，这部分将会放在C#基础系列补全篇讲解</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="GroupJoin-关联两个数据源，并分组"><a href="#GroupJoin-关联两个数据源，并分组" class="headerlink" title="GroupJoin 关联两个数据源，并分组"></a>GroupJoin 关联两个数据源，并分组</h2><p>基于键值等同性将两个序列的元素进行关联，并对结果进行分组。以上是官方介绍，我在开发过程中并没有使用过这个方法，不过这个方法完全可以认为是Join和Group的组合体，即先进行了一次Join然后又对数据进行一次分组。</p><p>方法声明：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用默认比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (<span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer, IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);</span><br><span class="line"><span class="comment">//设置比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (<span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer, IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, IEqualityComparer&lt;TKey&gt; comparer);</span><br></pre></td></tr></table></figure><p><strong>类型参数</strong></p><ul><li><p>TOuter   第一个序列中的元素的类型。 </p></li><li><p>TInner 第二个序列中的元素的类型。 </p></li><li><p>TKey 键选择器函数返回的键的类型。</p></li><li><p>TResult 结果元素的类型。</p></li></ul><p><strong>参数</strong></p><ul><li><p>outer <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1?view=netcore-3.1" target="_blank" rel="noopener">IEnumerable</a><TOuter> 要联接的第一个序列。</p></li><li><p>inner <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1?view=netcore-3.1" target="_blank" rel="noopener">IEnumerable</a><TInner> 要与第一个序列联接的序列。</p></li><li><p>outerKeySelector <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.func-2?view=netcore-3.1" target="_blank" rel="noopener">Func</a>&lt;TOuter,TKey&gt;  用于从第一个序列的每个元素提取联接键的函数。</p></li><li><p>innerKeySelector <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.func-2?view=netcore-3.1" target="_blank" rel="noopener">Func</a>&lt;TInner,TKey&gt; 用于从第二个序列的每个元素提取联接键的函数。</p></li><li><p>resultSelector   Func&lt;TOuter,IEnumerable<TInner>,TResult&gt; 用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</p></li><li><p>comparer <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netcore-3.1" target="_blank" rel="noopener">IEqualityComparer</a><TKey> 用于对键进行哈希处理和比较的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netcore-3.1" target="_blank" rel="noopener">IEqualityComparer</a>。</p></li></ul><p>以下是官方给的示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Pet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Person Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GroupJoinEx1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person magnus = <span class="keyword">new</span> Person &#123; Name = <span class="string">"Hedlund, Magnus"</span> &#125;;</span><br><span class="line">    Person terry = <span class="keyword">new</span> Person &#123; Name = <span class="string">"Adams, Terry"</span> &#125;;</span><br><span class="line">    Person charlotte = <span class="keyword">new</span> Person &#123; Name = <span class="string">"Weiss, Charlotte"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Pet barley = <span class="keyword">new</span> Pet &#123; Name = <span class="string">"Barley"</span>, Owner = terry &#125;;</span><br><span class="line">    Pet boots = <span class="keyword">new</span> Pet &#123; Name = <span class="string">"Boots"</span>, Owner = terry &#125;;</span><br><span class="line">    Pet whiskers = <span class="keyword">new</span> Pet &#123; Name = <span class="string">"Whiskers"</span>, Owner = charlotte &#125;;</span><br><span class="line">    Pet daisy = <span class="keyword">new</span> Pet &#123; Name = <span class="string">"Daisy"</span>, Owner = magnus &#125;;</span><br><span class="line"></span><br><span class="line">    List&lt;Person&gt; people = <span class="keyword">new</span> List&lt;Person&gt; &#123; magnus, terry, charlotte &#125;;</span><br><span class="line">    List&lt;Pet&gt; pets = <span class="keyword">new</span> List&lt;Pet&gt; &#123; barley, boots, whiskers, daisy &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a list where each element is an anonymous </span></span><br><span class="line">    <span class="comment">// type that contains a person's name and </span></span><br><span class="line">    <span class="comment">// a collection of names of the pets they own.</span></span><br><span class="line">    <span class="keyword">var</span> query =</span><br><span class="line">        people.GroupJoin(pets,</span><br><span class="line">                         person =&gt; person,</span><br><span class="line">                         pet =&gt; pet.Owner,</span><br><span class="line">                         (person, petCollection) =&gt;</span><br><span class="line">                             <span class="keyword">new</span></span><br><span class="line">                             &#123;</span><br><span class="line">                                 OwnerName = person.Name,</span><br><span class="line">                                 Pets = petCollection.Select(pet =&gt; pet.Name)</span><br><span class="line">                             &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> obj <span class="keyword">in</span> query)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Output the owner's name.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"&#123;0&#125;:"</span>, obj.OwnerName);</span><br><span class="line">        <span class="comment">// Output each of the owner's pet's names.</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> pet <span class="keyword">in</span> obj.Pets)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"  &#123;0&#125;"</span>, pet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> This code produces the following output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Hedlund, Magnus:</span></span><br><span class="line"><span class="comment">   Daisy</span></span><br><span class="line"><span class="comment"> Adams, Terry:</span></span><br><span class="line"><span class="comment">   Barley</span></span><br><span class="line"><span class="comment">   Boots</span></span><br><span class="line"><span class="comment"> Weiss, Charlotte:</span></span><br><span class="line"><span class="comment">   Whiskers</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以上是关于Linq的所有方法内容，但是这仍然不是Linq的全部。后续还会有一篇关于Linq的另一种查询方式的内容文章。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> Linq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 6 Lambda表达式和Linq简单介绍</title>
      <link href="/basecharp/63934.html"/>
      <url>/basecharp/63934.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C#的lambda和Linq可以说是一大亮点，C#的Lambda无处不在，Linq在数据查询上也有着举足轻重的地位。</p><p>那么什么是Linq呢，Linq是 <code>Language Intergrated Query</code>（语言集成查询）的缩写，可以对本地对象<strong>集合</strong>或者远程数据源进行结构化的查询操作。</p><p>那什么又是Lambda呢？嗯，简单来讲就是匿名函数，我们不声明方法名，只写一个方法体，这个方法体就是lambda表达式</p><a id="more"></a><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><h2 id="如何写一个lambda表达式"><a href="#如何写一个lambda表达式" class="headerlink" title="如何写一个lambda表达式"></a>如何写一个lambda表达式</h2><p>首先，在写lambda表达式之前，需要先了解 两个特殊的类型：<code>Func</code>和<code>Action</code>。</p><p>这是两个委托，这里先不急着了解什么是委托，可以把它们当做一种名称规范就行，它们都可以表示一个方法。不同的是其中<code>Func</code>表示一个有返回值的方法，<code>Action</code>表示一个没有返回值的方法。C#对这两个的定义如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> TResult Func&lt;<span class="keyword">out</span> TResult&gt;();<span class="comment">//注意这里的out 表示这个泛型是返回值的类型泛型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><p>其中<code>Func</code>和<code>Action</code>各有16个变种：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意 in 关键字，表示泛型是参数的类型约束</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> TResult Func&lt;<span class="keyword">in</span> T,<span class="keyword">out</span> TResult&gt;(T arg);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> TResult Func&lt;<span class="keyword">in</span> T1,<span class="keyword">in</span> T2,<span class="keyword">out</span> TResult&gt;(T1 arg1, T2 arg2);</span><br><span class="line">……</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> TResult Func&lt;<span class="keyword">in</span> T1,<span class="keyword">in</span> T2,<span class="keyword">in</span> T3,<span class="keyword">in</span> T4,<span class="keyword">in</span> T5,<span class="keyword">in</span> T6,<span class="keyword">in</span> T7,<span class="keyword">in</span> T8,<span class="keyword">in</span> T9,<span class="keyword">in</span> T10,<span class="keyword">in</span> T11,<span class="keyword">in</span> T12,<span class="keyword">in</span> T13,<span class="keyword">in</span> T14,<span class="keyword">in</span> T15,<span class="keyword">in</span> T16,<span class="keyword">out</span> TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> Action&lt;<span class="keyword">in</span> T&gt;(T obj);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> Action&lt;<span class="keyword">in</span> T1,<span class="keyword">in</span> T2&gt;(T1 arg1, T2 arg2);</span><br><span class="line">……</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> Action&lt;<span class="keyword">in</span> T1,<span class="keyword">in</span> T2,<span class="keyword">in</span> T3,<span class="keyword">in</span> T4,<span class="keyword">in</span> T5,<span class="keyword">in</span> T6,<span class="keyword">in</span> T7,<span class="keyword">in</span> T8,<span class="keyword">in</span> T9,<span class="keyword">in</span> T10,<span class="keyword">in</span> T11,<span class="keyword">in</span> T12,<span class="keyword">in</span> T13,<span class="keyword">in</span> T14,<span class="keyword">in</span> T15,<span class="keyword">in</span> T16&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);</span><br></pre></td></tr></table></figure><p>依次表示一个参数、两个参数、……十六个参数 的方法。当然，你还可以写更多的参数，但是如果一个方法的参数超过10个，为什么不用类封装起来呢？即使不封装，一个方法十几个参数，你确定不会被你的领导嫌弃吗。</p><p>言归正传，介绍完了<code>Func</code>和<code>Action</code>的定义，那么如果使用呢？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Demo1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 一个没有返回值，也没有参数的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Action act1 = Demo;<span class="comment">// 直接给一个方法名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Demo2</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//有一个参数，但没有返回值的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Action&lt;<span class="keyword">string</span>&gt; act2 = Demo2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Demo3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 有返回值，但没有参数的方法</span></span><br><span class="line">&#125;</span><br><span class="line">Func&lt;<span class="keyword">string</span>&gt; func1 = Demo3;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Demo4</span>(<span class="params"><span class="keyword">double</span> data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 返回值是int，有一个参数是double的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Func&lt;<span class="keyword">double</span>,<span class="keyword">int</span>&gt; func2 = Demo4;</span><br></pre></td></tr></table></figure><p>以上是通过方法名获取<code>Func</code>和<code>Action</code>的方法，下面介绍一下通过Lambda表达式的方式创建<code>Func</code>和<code>Action</code>：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Action act1 = ()=&gt; <span class="comment">// lambda 的标志性 声明方式 =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 这是一个没有返回值，也没有参数的 lambda表达式</span></span><br><span class="line">&#125;;</span><br><span class="line">Action&lt;<span class="keyword">int</span>&gt; act2 = (age) =&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这是一个 参数为int ，没有返回值的 lambda表达式</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//=========================================</span></span><br><span class="line">Func&lt;<span class="keyword">string</span>&gt; func1 = () =&gt; <span class="string">""</span>; <span class="comment">// 这是一个返回了空字符串的lambda表达式，注意这种写法</span></span><br><span class="line">Func&lt;<span class="keyword">string</span>&gt; func2 = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>; <span class="comment">//与上一个等价</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Func&lt;<span class="keyword">int</span>,<span class="keyword">string</span>&gt; func3 = (age) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我的年纪是："</span>+age;<span class="comment">// 一个参数是int，返回类型是string的lambda表达式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在lambda表达式中，当使用的是有返回值的方法体时，如果方法体是个简单的计算式或者说可以在一行内写完（或被编译器认为是一行）的话，可以省略 <code>{</code>、<code>}</code> 和<code>return</code>，直接用 <code>=&gt;</code> 标记。</p><p>比如说以下内容：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cal_area = (width, height) =&gt; width * height;<span class="comment">// 计算面积</span></span><br></pre></td></tr></table></figure><h2 id="使用Lambda-表达式"><a href="#使用Lambda-表达式" class="headerlink" title="使用Lambda 表达式"></a>使用Lambda 表达式</h2><p>现在我们手里有一大堆的<code>Action</code>和<code>Func</code>，我们该怎么用呢？</p><p>有以下两种常见的用法：</p><ol><li><p>把它当做方法来用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上接上文代码</span></span><br><span class="line">act1();<span class="comment">// 执行 act1 代表的方法或lambda表达式</span></span><br><span class="line">act2(<span class="number">10</span>); <span class="comment">//执行act2 的lambda表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> str1 = func1();</span><br><span class="line"><span class="keyword">string</span> str2 = func3(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> area = cal_area(<span class="number">29</span>,<span class="number">39</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>调用Invoke方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">act1.Invoke();</span><br><span class="line">act2.Invoke(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">area = cal_area.Invoke(<span class="number">33</span>,<span class="number">63</span>);</span><br></pre></td></tr></table></figure><p>看过反射篇的应该对Invoke有一定印象，这个与MethodInfo里的Invoke类似，但是比其更加简单。</p></li></ol><h1 id="Linq-是什么"><a href="#Linq-是什么" class="headerlink" title="Linq 是什么"></a>Linq 是什么</h1><p>正如前言所述，Linq是一种对集合、数据源的集成式查询方式，它是对<code>IEnumerable&lt;T&gt;</code>的扩展方法集，所以想要使用Linq的话，需要引用两个命名空间 <code>System.Linq</code>和<code>System.Linq.Expressions</code>。</p><p>Linq有两种使用方式，一种是通过方法链的方式调用，一种是类似SQL语句的方式进行数据查询。方法链是基础，类SQL方式是语法糖。下面简单介绍一下两种方式的使用，不过首先先假设我们有一个数据很多的集合：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;<span class="keyword">int</span>&gt; scores = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();<span class="comment">//假设存放了某班50个人的语文成绩</span></span><br></pre></td></tr></table></figure><h2 id="使用方法链查询"><a href="#使用方法链查询" class="headerlink" title="使用方法链查询"></a>使用方法链查询</h2><ol><li><p>获取分数大于60的所有分数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;<span class="keyword">int</span>&gt; result1 = scores.Where(t =&gt; t &gt; <span class="number">60</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>获取分数大于等于60的数量：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = scores.Count(t =&gt; t &gt;= <span class="number">60</span>);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>统计分数总和</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = scores.Sum();</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>获取所有分数个位上的数字：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;<span class="keyword">int</span>&gt; result2 = scores.Select(t =&gt; t % <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用类SQL形式查询"><a href="#使用类SQL形式查询" class="headerlink" title="使用类SQL形式查询"></a>使用类SQL形式查询</h2><p>查询所有大于等于60的分数:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;<span class="keyword">int</span>&gt; result3 = <span class="keyword">from</span> score <span class="keyword">in</span> scores</span><br><span class="line">                <span class="keyword">where</span> score &gt;= <span class="number">60</span></span><br><span class="line">                <span class="keyword">select</span> score;</span><br></pre></td></tr></table></figure><p>简单介绍一下，类SQL形式有一个统一的格式写法，关键字<code>from</code>、<code>in</code>、<code>select</code>缺一不可：</p><blockquote><p>from 临时变量名 in 数据源</p><p>select 结果类型</p></blockquote><p>where 是条件过滤，如果查询全部，可以忽略。</p><p>这种方式之所以被我称为是类SQL形式，是因为它的写法和SQL及其相似，熟悉SQL的可以很快上手。</p><h2 id="为什么说方法链是基础呢？"><a href="#为什么说方法链是基础呢？" class="headerlink" title="为什么说方法链是基础呢？"></a>为什么说方法链是基础呢？</h2><p>因为SQL形式的查询里每一个关键字背后都有一个方法作为支撑，除了from 和in。</p><p>select 对应的Select 方法，where对应的Where方法。</p><p>需要特别注意的一点：</p><p>Linq查询是一种延迟查询，也就是说当返回类型是一个IEnumerable 的时候不会立即返回结果，必须调用<code>ToList</code>才能获取到实际查询结果。另外需要注意的是，<code>ToList</code>返回的是一个不可变List集合，这一点在集合篇中做过介绍了。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>C#里的Linq内容如此丰富，以至于一时间无法详细说明，后续还会有两到三篇关于Linq的内容，今天就先到这里了，感谢您的阅读。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> Lambda </tag>
            
            <tag> Linq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 5 反射和泛型</title>
      <link href="/basecharp/62422.html"/>
      <url>/basecharp/62422.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么要把反射和泛型放在一起讲呢，这里是处于个人对C#的一个很棒的观感，因为C#的反射是可以获取泛型里的元素的，而不像Java一个让我比较难受的地方就是Java的泛型实际编译的时候会擦除类型信息。<br>那么问题来了，什么是泛型，什么又是反射呢？</p><a id="more"></a><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>请原谅我先介绍泛型，因为没有泛型基础直接介绍反射是不完整的，就比如说你辛辛苦苦拿到一个类的反射信息，等用的时候才发现结果这是一个泛型类，那还得解析这个类的泛型的信息，这时候就必须先有一个泛型的基础。<br>那么什么是泛型呢，先看看百度百科给的定义：</p><blockquote><p>泛型是程序设计语言的一种特性。允许程序员在强类型程序设计语言中编写代码时定义一些可变部分，那些部分在使用前必须作出指明。各种程序设计语言和其编译器、运行环境对泛型的支持均不一样。将类型参数化以达到代码复用提高软件开发工作效率的一种数据类型。泛型类是引用类型，是堆对象，主要是引入了类型参数这个概念。</p></blockquote><p>额，说实话哈，有一部分我没看懂他写的是啥。根据我的理解，泛型就是模板类里套的参数。就好比我们从网上找到一个好看的PPT模板，我们在写PPT的时候根据我们的主题套用这个模板，然后写出一个很好看的PPT，被老板表扬升职加薪。嗯，事实上用好了泛型也会升职加薪。</p><p>泛型说的笼统一些就是类型参数化的过程，我们之前介绍的List就是一个泛型类。泛型分泛型类/接口和泛型方法。泛型类和泛型接口可以看做是一种，因为它的泛型参数是用在整个结构体里面的（注意不是结构，struct）；泛型方法又有参数泛型和返回值泛型两种。</p><h2 id="声明一个泛型类-接口"><a href="#声明一个泛型类-接口" class="headerlink" title="声明一个泛型类/接口"></a>声明一个泛型类/接口</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Template&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTemplate</span>(<span class="params">T temp</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    data = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetTemplate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述示例是一个简单的泛型类，体现了泛型类的特点。在声明类的时候，声明一个泛型占位符<code>T</code> ，在下面的属性、字段、方法的参数和方法的返回值都可以使用这个占位符，约定类型一致。</p><p>泛型的接口和泛型类是一致的，只不过接口没有方法的实现内容也就是方法体而已。</p><h2 id="泛型类的使用"><a href="#泛型类的使用" class="headerlink" title="泛型类的使用"></a>泛型类的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继续上面的代码</span></span><br><span class="line">Template&lt;<span class="keyword">int</span>&gt; temp = <span class="keyword">new</span> Template&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">temp.SetTemplate(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> ten = temp.GetTemplate();</span><br></pre></td></tr></table></figure><p>使用泛型类和普通类不同的地方就是，泛型类告诉编译器你要传递的类型。使用&lt;&gt; 做标记，中间写类型，表示这是一个泛型为XXX的泛型类。通常与其他语言不同的地方是，C#的泛型支持所有类型，意思就是在没有额外声明的时候，可以使用任意类型作为泛型参数传递。</p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>C#也可以声明一个方法为泛型方法，方法的泛型声明是声明在方法名的后面，参数列表的前方。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> TemplateMethod&lt;T&gt;(T arg);</span><br><span class="line"><span class="keyword">public</span> T TemplateMethod1&lt;T&gt;();</span><br><span class="line"><span class="keyword">public</span> T TemplateMethod2&lt;T&gt;(T arg);</span><br></pre></td></tr></table></figure><p>上述三个都是合规的泛型方法声明。泛型可以是参数，也可以是返回值，还能既是返回值又是参数。</p><blockquote><p>那么问题来了，多个泛型参数该怎么声明？</p></blockquote><p>如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T2 TemplateMothod3&lt;T1,T2&gt;(T1 arg);</span><br><span class="line"><span class="keyword">public</span> T3 TemplateMothod4&lt;T1,T2,T3&gt;(T1 arg,T2 arg2);</span><br></pre></td></tr></table></figure><p>在两个尖括号中间放入多个泛型，然后用逗号隔开，与参数列表和返回值的类型一一对应。</p><h2 id="泛型方法的使用"><a href="#泛型方法的使用" class="headerlink" title="泛型方法的使用"></a>泛型方法的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TemplateMethod(<span class="number">10</span>);<span class="comment">// 方式 1</span></span><br><span class="line"><span class="keyword">int</span> it = TemplateMethod1&lt;<span class="keyword">int</span>&gt;();<span class="comment">// 方式 2</span></span><br></pre></td></tr></table></figure><p>由于篇幅和时间的关系（主要是我写这篇的时候时间有点晚了。。）就不对之前所有的方法进行演示了。</p><p>这里简单介绍一下泛型方法的使用：</p><ul><li>方式1 隐藏了一个泛型参数，这是因为如果泛型是参数的话，c#会根据参数的类型自动解析对应的泛型类型是什么，方式1 等同于<code>TemplateMethod&lt;int&gt;(10);</code>。</li><li>方式2 当泛型参数是返回值时，必须告知具体的泛型类型。</li></ul><h2 id="泛型约束和泛型标记"><a href="#泛型约束和泛型标记" class="headerlink" title="泛型约束和泛型标记"></a>泛型约束和泛型标记</h2><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>在实际开发过程中，我们会对一些泛型类的泛型参数进行类型约束，那么泛型约束应该怎么写呢，看示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Demo&lt;T&gt;(T arg) <span class="keyword">where</span> T : 约束内容</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Demo&lt;T,P&gt;(T arg,P arg1) <span class="keyword">where</span> T: 约束内容 <span class="keyword">where</span> P:约束内容</span><br></pre></td></tr></table></figure><p>如果对多个参数进行约束，就写多个where。</p><p>泛型的约束有一下几种：</p><ul><li>class 表示这是个引用类型</li><li>new()  表示必须有一个无参构造函数</li><li>struct 表示是个结构体</li><li>具体的类名或接口名 表示这个参数必须是这个类的子类或接口的实现类</li></ul><h3 id="泛型标记"><a href="#泛型标记" class="headerlink" title="泛型标记"></a>泛型标记</h3><p>在C#里有个很有意思的地方，那就是泛型标记。</p><p>泛型支持 in/out作为占位符T的前置标记。那这两个标记是什么意义呢，in表示这个类型参数只能作为参数列表的类型进行传递，out表示这是一个返回值的类型，示例如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T2 Demo&lt;<span class="keyword">in</span> T1,<span class="keyword">out</span> T2&gt;(T1 t1);</span><br></pre></td></tr></table></figure><p>类和方法的标记大同小易，基本上是一致的。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射在很多地方都有着使用，这里先简单的介绍一下C#中的反射相关内容，因为细讲的话会涉及到很多东西而且还需要很多前置概念，不过在自己写框架之前不需要涉及到太多反射的内容。</p><p>反射，英文名 reflect，简单的介绍就是将类型对象化，然后操作这个对象的技术。</p><p>我们先创建一个示例类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Name = <span class="string">"小李"</span>;</span><br><span class="line">        Age = <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">int</span> age</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">SayHi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你好，我叫"</span> + Name + <span class="string">"我的年纪是 "</span> + Age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取一个类型对象"><a href="#获取一个类型对象" class="headerlink" title="获取一个类型对象"></a>获取一个类型对象</h2><p>首先需要注意的一个类：<code>Type</code>，这个类是反射技术里的基石，甚至可以说是核心，表示一个类的类型信息。</p><p>那么，我们该如何获取类型对象呢？在C#中常见的有如下两个方法：</p><ol><li>使用<code>typeof</code> 关键字</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type personType = <span class="keyword">typeof</span>(Person);</span><br></pre></td></tr></table></figure><ol start="2"><li>通过对象，使用<code>GetType</code> 方法</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Type personType = person.GetType();</span><br></pre></td></tr></table></figure><p>如果我们在编写程序的时候，知道要获取什么类的Type对象的话，建议使用typeof获取。如果我们只有一个对象，需要通过这个对象进行操作的话，那么最好使用GetType来获取。</p><p>现在我们获取到了一个Person类的Type对象，可以用来做什么呢？</p><h2 id="Type对象的用处"><a href="#Type对象的用处" class="headerlink" title="Type对象的用处"></a>Type对象的用处</h2><ol><li>获取类名：<code>personType.Name</code></li><li>获取所有属性：<code>personType.GetProperties()</code></li><li>获取所有方法：<code>personType.GetMethods()</code></li><li>获取所有构造函数：<code>personType.GetConstructors()</code></li></ol><p>现在我们一一介绍一下这四种写法：</p><p>第一条：顾名思义，获取到的结果是<code>Person</code> 这个值。</p><p>第二条：该方法会返回一个类型为<code>PropertyInfo[]</code> 的数组，这个数组里包含着所有使用<code>public</code>声明的属性。当然也可以通过指定的属性名获取属性对象：<code>personType.GetProperty(&quot;Name&quot;)</code> 这里会获取到Person类的Name属性。</p><p>第三条： 获取该类所有<code>public</code>的方法，并将其封装成一组类型是<code>MethodInfo</code>的对象数组。同理，也可以根据方法名进行检索：<code>personType.GetMethod(&quot;SayHi&quot;)</code> ，就能获取对应的SayHi方法。不过，如果有同名方法的话，就可能会出现获取到的方法不是你想要的了。嗯，这部分会放到精讲反射的时候再来细说。</p><p>第四条： 获取构造函数，返回的是一个类型是<code>ConstructorInfo</code>的数组，表示所有的构造方法，不过可惜的是，没有根据名字检索的方法了，因为构造方法就一个名。</p><h2 id="使用PropertyInfo动态操作一个对象的属性值"><a href="#使用PropertyInfo动态操作一个对象的属性值" class="headerlink" title="使用PropertyInfo动态操作一个对象的属性值"></a>使用PropertyInfo动态操作一个对象的属性值</h2><p>我们通过上一小节获取到了一个类的属性<code>PropertyInfo</code>，现在可以利用这个属性进行后续的操作：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Type personType = person.GetType();</span><br><span class="line">PropertyInfo prop = personType.GetProperty(<span class="string">"Name"</span>);<span class="comment">//获取Name属性</span></span><br><span class="line">Object <span class="keyword">value</span> = prop.GetValue(person);<span class="comment">// 获取 对象 person 的Name属性值</span></span><br><span class="line">prop.SetValue(person, <span class="string">"wangyipeng"</span>);<span class="comment">// 为对象 person的Name属性设置值为 wangyipeng</span></span><br></pre></td></tr></table></figure><p>需要注意的是：</p><p>如果 类的属性只有get，那么在调用SetValue时会报错。可能要问了，我们知道是有set，但是程序怎么判断呢？通过<code>prop.CanWrite</code> 的值进行判断，如果值是<code>true</code>则表明这个属性可以写入值，否则不能。</p><p>同理，可以很轻易的联想到如果只有set，那么GetValue也会报错，与之相对应的就是prop.CanRead属性了。</p><h2 id="使用MethodInfo手动执行一个对象的方法"><a href="#使用MethodInfo手动执行一个对象的方法" class="headerlink" title="使用MethodInfo手动执行一个对象的方法"></a>使用MethodInfo手动执行一个对象的方法</h2><p>首先，获得到一个对象里的某一个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">Type personType = person.GetType();</span><br><span class="line">MethodInfo method = personType.GetMethod(<span class="string">"SayHi"</span>);</span><br></pre></td></tr></table></figure><p>现在获取到了 方法对象，该怎么执行呢？</p><p>MethodInfo有一个Invoke方法，这个方法有两个重载版本。其中有一个是：<code>Invoke(object obj, object[] parameters)</code>，第一个参数是要执行的方法所属的对象，后面的数组参数是对应方法的参数列表，如果为空则填null即可。该方法有个返回值，类型是object，如果方法是没有返回值的方法，那么Invoke的返回值就是null。</p><h2 id="通过反射获取一个对象"><a href="#通过反射获取一个对象" class="headerlink" title="通过反射获取一个对象"></a>通过反射获取一个对象</h2><p>通过反射获取一个类的类型对象有几种方式，先介绍一个不用类型的方式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = Activator.CreateInstance&lt;Person&gt;();</span><br></pre></td></tr></table></figure><p>这种方式有一个要求，Person必须有一个无参的构造函数。</p><p>第二种方式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type personType = <span class="keyword">typeof</span>(Person);</span><br><span class="line"><span class="keyword">object</span> p = Activator.CreateInstance(personType);<span class="comment">//使用无参构造函数</span></span><br><span class="line">p = Activator.CreateInstance(personType, <span class="string">"小王"</span>, <span class="number">19</span>);<span class="comment">//使用Person(string,int)这个构造函数</span></span><br></pre></td></tr></table></figure><p>当需要传递参数的时候，参数类型必须与对应的构造函数一一对应，如果顺序变了，可能会出现找不到对应类的问题。</p><p>第三种：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//types 是参数列表的参数类型集合，顺序与实际参数顺序一致</span></span><br><span class="line">ConstructorInfo cons = personType.GetConstructor(Type[] types);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实际上应该是这个调用方</span></span><br><span class="line"><span class="comment">ConstructorInfo cos = personType.GetConstructor(new[]&#123; typeof(string), typeof(int)&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">object</span> person  = cos.Invoke(<span class="keyword">new</span> <span class="keyword">object</span>[] &#123;<span class="string">"王先生"</span>, <span class="number">19</span>&#125;);</span><br></pre></td></tr></table></figure><p>这时候一个简单的反射介绍就到这里了，反射这里还有一大篇的内容要将。这部分我会放到基础篇完结之后再做一个统一介绍的。不过先道个歉，没介绍泛型在反射的应用。</p><blockquote><p>注：代码里映射的王先生是我一个故人，最近与他有一些纠纷。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#  基础知识系列- 4 面向对象</title>
      <link href="/basecharp/23707.html"/>
      <url>/basecharp/23707.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向对象是一个抽象的概念，其本质就是对事物以抽象的方式建立对应的模型。<br>简单来讲，比如我有一只钢笔，那么我就可以通过分析，可以得到 这只钢笔的材第是塑料，品牌是个杂牌 ，里面装的墨是黑色的，可以用。这时候就能建立一个钢笔的模型，它在这里应该有这些属性：</p><p> <img src="http://images.attachie.club/Fou_Q2meqXq3b_h8Loe354zwe_ED" alt="file"></p><p>图是一个不正确的UML类图，但是可以简单的概述一下我们抽象的结果。这个图就描述了一个我们抽象出来的钢笔类应该有哪些特性，而我手里的那只钢笔就可以看做是钢笔类的一个实例。<br>简单来讲，面向对象编程就是针对一个事件或者说一个过程，找到这个过程中参与的所有人、事务或者相对独立的个体，按照他们在这个过程中表现，提取出他们的特性，描述他们的行为，然后按照类别不同再抽象出类来。<br>所以，类是事物的概念抽象，事物是类的特殊实例。</p><a id="more"></a><h1 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h1><p>上面简单的介绍了面向对象的概念，现在先创建一个C#类，然后介绍一下这个类需要注意的地方：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Count</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span> &#123; <span class="keyword">return</span> count; &#125;</span><br><span class="line"><span class="keyword">set</span> &#123; count = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"><span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Name = <span class="string">""</span>;</span><br><span class="line">Count = Count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.Name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：<br><code>private string name;</code>和<code>private static int count;</code>这两个在C#中称为Field，也就是字段的意思；<br><code>public static int Count</code> 和<code>public string Name</code> 这两个在C#中称为Property，也就是属性的意思。<br>当然，不是说一个是<code>private</code>就叫字段，另一个是<code>public</code>就称之为属性，而是因为属性有<code>get</code>和<code>set</code>来控制访问和赋值的行为。</p><p><code>public Person()</code> 和<code>public Person(string name)</code>是构造方法，所谓的构造方法就是初始化一个实例的方法，调用形式如下:<br><code>Person p = new Person()</code> 通过new关键字+类名+对应的参数列表即可。构造方法没有返回类型，方法名必须是类名，可以有任意个参数。</p><h1 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h1><p>面向对象的三大特性是封装、继承、多态。我把它们称为面向对象面试三巨头，因为一旦面试，如果有面向对象的问题绝对会问到这三个特性。这里先简单介绍一下三大特性，</p><ul><li>封装：对象的方法实现对外是隐藏的，就像我们在不拆开钢笔之前很难知道钢笔的墨水是怎么流动然后写出字的；</li><li>继承：子类天然拥有父类的属性和方法，假如我们还有一只特种钢笔，那么我们可以把这只特种钢笔抽象出的类认为是钢笔的子类，这只特种钢笔跟钢笔一样，可以用来做钢笔能做的事，虽然有时候不好用；</li><li>多态：简单来讲就是多种状态，对于面向对象来说，就是方法重写和方法重载。比如说，我们去找领导签字，领导在忙让我们把文件放那边，过一会领导派人送过来签好字的文件。如果领导有多只钢笔，那么领导用哪只笔、在什么时候、用什么姿势对于我们来说就是不确定的状态，这就是多态的一种。</li></ul><h2 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h2><p>在将三大特性之前，先介绍一下 C#的访问控制。C#常用的访问控制分为四种：</p><ul><li>private： 限定只有同属于一个类的成员才可以访问，如果限定一个类是私有类，那么这个类必须是内部类</li><li>protected： 限定当前类的成员、子类可以访问，不能用来限定外部类，同private一样，如果限定类是受保护类，这个类必须是内部类</li><li>internal(default)：默认访问权限，对于类和方法来说，限定同一个DLL可以访问，其他DLL不能访问。区别是类的 internal 关键字可以省略，方法如果省略访问权限符，则默认是protected</li><li>public：公开，所有能引用类的地方都能访问类里的public对象，这是最开放的权限。</li></ul><p>C#还有更多的访问控制，不过常用的只有这四种，更多的可以参照【<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers" target="_blank" rel="noopener">官方文档</a>】。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装简单来讲就是调用方不知道被调用方的具体实现以及内部机制，就像我们看别人只能看到外表缺看不到器官的运作（当然除非你是医生）。<br>那么封装有什么好处呢：</p><ul><li>对外隐藏实现，防止外部篡改引发安全问题</li><li>减少不必要的关联，被调用方需要调用方提供参数，但除此之外调用方只需要静待被调用方返回结果就行</li><li>打包一系列的操作，防止中间发生变故</li></ul><p>比如说一个钟表，给我们一堆零件，在没有拼接、安装好之前也就是封装好，这个钟表是不能正常使用的。只有我们按照一定逻辑，将零件安装好之后（封装），再装上电池或上发条（调用） 钟表才会转起来。<br>简单的用代码介绍一下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.SayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Count</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span> &#123; <span class="keyword">return</span> count; &#125;</span><br><span class="line"><span class="keyword">set</span> &#123; count = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"><span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Name = <span class="string">"小明"</span>;</span><br><span class="line">Count = Count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"你好，我叫"</span>+Name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看一下，对于Program类来讲，Person的SayHello是怎么实现的完全不知情。这就是封装的意义。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>C#的继承是单继承，也就是说一个类只有一个父类，如果不指明父类，那么它的父类就是<code>object</code>。换句话说，<code>object</code>是C#继承体系里的根，也就是所有类的祖先类。<br>C#的继承用<strong>：</strong> 表示，即 <code>class B: A</code>表示B继承A。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Look</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码建立了一个简单的继承体系。那么问题来了，继承有什么用呢？简单来讲，对于A和B在Say方法有不同的实现，对于调用方来讲，它们的表现应当是一致的。换句话说，就是所有用到A的地方，都能用B来代替，这不会出现任何问题。<br>继承可以简化很多行为（方法）一致的写法。如示例所述，B类在Look上与其父类A类有着一致的行为和表现，那么B就可以省略了Look的定义和描述，沿用父类的方法。通过继承可以很快地建立一套丰富的方法体系。子类每一次对父类的方法补充都会在子类里体现出来。所以继承可以说是面向对象的核心体系。</p><p>有个关键字需要额外的讲解一下<code>saled</code>，如果看到一个类有这个标记，那么需要注意了，这个类是不可被继承的类。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态的实现就是通过类的继承和方法的重载实现的。类的继承主要通过重写父类方法或者覆盖父类方法来实现的，主要关键字就是 <code>virtual</code>、<code>override</code>、<code>new</code>。<br>具体的介绍是：</p><ul><li>virtual 关键字声明函数为虚函数，意思就是子类可能会重写该方法</li><li>override 用在子类，用来声明该方法是重写父类的方法</li><li>new  跟实例化对象的new不同，这个放在方法前的意思是该方法会隐藏父类方法的实现。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//省略实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//省略实现</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">B</span>:<span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>) <span class="comment">//重写父类方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//省略实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> new <span class="keyword">void</span> <span class="title">SetName</span>(<span class="params"></span>) <span class="comment">// 覆盖父类方法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//省略实现</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写和覆盖的区别在哪呢：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> B();</span><br><span class="line">a.Say();<span class="comment">// 调用的是 B中 Say方法</span></span><br><span class="line">a.SetName();<span class="comment">//调用的是A的SetName 方法</span></span><br><span class="line">B b = (B)a;</span><br><span class="line">b.SetName();<span class="comment">//调用的是B的SetName 方法</span></span><br><span class="line">b.Say();<span class="comment">// 调用的是 B中 Say方法</span></span><br></pre></td></tr></table></figure><h1 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h1><p>C#中类和接口的声明方式不同，类用的关键字是<code>class</code>，接口用的是<code>interface</code>。而且类是继承，接口是实现，一个类只能有一个父类，接口可以有多个。<br>接口需要注意的地方就死，接口所有的方法都是public的，因为接口就是用来定义规范的，所以一旦它的方法访问控制不是public的话，就没什么意义。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo1</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDemo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo3</span> : <span class="title">Demo1</span>, <span class="title">IDemo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">string</span> IDemo.Method()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"test2"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现和类的继承都是 <strong>:</strong> ，先继承后实现。</p><p>观察示例代码，发现Demo3有两个方法<code>public string Method()</code>和<code>string IDemo.Method()</code> 。这两个都是实现接口的方法，不同的地方是它们的使用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IDemo idemo = <span class="keyword">new</span> Demo3();</span><br><span class="line">idemo.Method();<span class="comment">//返回 test2</span></span><br><span class="line">Demo3 demo = <span class="keyword">new</span> Demo3();</span><br><span class="line">demo.Method();<span class="comment">// 返回 test</span></span><br></pre></td></tr></table></figure><p>使用<code>接口名</code>.<code>方法名</code>实现方法的时候，这个方法对于实现类构造的对象来说是不可访问的。当然两种方法可以共存，但是不会两个方法都被认为是接口的实现方法。接口优先使用<code>接口名</code>.<code>方法名</code> 作为实现方法，如果没找到则认为同名同参的方法为实现方法。</p><h2 id="Object-类-常用方法"><a href="#Object-类-常用方法" class="headerlink" title="Object 类 常用方法"></a>Object 类 常用方法</h2><p>object 作为基类定义了四个基本方法，这四个方法是所有子类都有的方法，也是一个核心方法：</p><ul><li>Equals(object obj)  这是一个很重要的方法，它是 C#中判断两个对象是否相等的依据，也就是 <code>==</code> 运算符的结果，如果不重写这个方法的话，返回的结果是两个对象是否指向同一个引用地址。</li><li>GetType()   返回这个对象的类型，这是反射机制中重要的一块</li><li>ToString()  返回字符串，获得一个对象的文字描述，默认返回的是对象的地址描述信息，这个方法建议重写</li><li>GetHashCode()  返回 Hash值，某些集合和程序机制会以HashCode作为元素的相等性判断依据，所以在重写 Equals 之后也要重写 这个方法，并保证两个方法对于相同的对象做相等性结果判定是应该表现一致。</li></ul><h2 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h2><p>C# 有一个很重要的机制就是扩展方法，扩展方法表现出的跟类自有的方法调用结果一致。<br>具体写法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Methods</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Test</span>(<span class="params"><span class="keyword">this</span> Person person</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，扩展方法所在类必须是静态类，扩展方法必须是静态方法，扩展方法第一个参数就是扩展的元素对象，用this标记。</p><p>不过很多人对扩展方法褒贬不一，有人认为扩展方法极易破坏继承链，导致一些不必要的麻烦；有人认为扩展方法就跟工具方法一样，而且可以优化调用方式，统一使用风格。</p><p>不过我看来，扩展方法利大于弊。因为扩展方法可以在不修改原有类的基础上增加功能，同时它也是一个工具类，跟普通的方法是一致的。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】JVM从入门到入土之JVM的运行时数据区</title>
      <link href="/java-plus/22109.html"/>
      <url>/java-plus/22109.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>偶然间发现的一个JVM系列文章，初看一下感觉很有意思。</p><footer><strong>掘金，六脉神剑</strong><cite><a href="https://juejin.im/post/5e1d6e5be51d453c951da505" target="_blank" rel="noopener">JVM从入门到入土之JVM的运行时数据区</a></cite></footer></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>文本已收录至我的 GitHub 仓库，欢迎 Star：<a href="https://github.com/bin392328206/six-finger" target="_blank" rel="noopener">github.com/bin39232820…</a><br><strong>种一棵树最好的时间是十年前，其次是现在</strong><br>我知道很多人不玩 <strong>qq</strong> 了, 但是怀旧一下, 欢迎加入六脉神剑 Java 菜鸟学习群，群聊号码：<strong>549684836</strong> 鼓励大家在技术的路上写博客</p></blockquote><h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>前面的基础写完了，接下来也是很重要的一部分，把数据加载到内存中，每种数据加载到哪个位置呢？</p><ul><li><a href="https://juejin.im/post/5e1aaf626fb9a0301d11ac8e" target="_blank" rel="noopener">🔥JVM 从入门到入土之 JVM 的类加载机制</a></li><li><a href="https://juejin.im/post/5e1d19b26fb9a02fee1ed155" target="_blank" rel="noopener">🔥JVM 从入门到入土之 JVM 的类文件结构</a></li></ul><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对于 C C++ 来说，在内存管理领域，他们既拥有最高的权利的皇帝，但是同时他们又是从事最基础工作的劳动人员，因为他们担负着每一个对象从开始到结束的维护责任，</p><p>对于 Java 来说，再虚拟机自动内存管理的帮助下，不再需要为每一个 new 操作去分配内存，不容易出现内存泄漏和内存溢出的情况，但是因为我们 Java 程序员 不用管理内存，所以一旦出现内存问题，很容易让我们手忙脚乱，所以呢我们必须要了解 Java 虚拟器的内存管理机制，以便我们能更好的处理各种各样的问题</p><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p>Java 虚拟机在执行 Java 程序的过程中会把所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁时间。再 Java 1.8 中 从宏观上来说分为线程共享，和线程私有 主要是分为以下几个区域</p><p><img src="http://images.attachie.club/FhpcGobRHTlf6Wc4qwfObGzrZBTR" alt="file"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>特点：线程内存独享，占用内存小，生命周期与线程相同（随线程诞生而诞生，随线程消亡而消亡）</p><p>功能：当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复（cpu 在不断轮询执行任务）等基础功能都需要依赖这个计数器来完成</p><p>异常：该区域没有定义异常</p><h3 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h3><p>特点：先进后出，线程内存独享，生命周期与线程相同</p><p>单位：栈帧</p><p>功能：已先进后出执行方法体的方法，执行完成的栈帧出栈</p><p>例子</p><p><img src="http://images.attachie.club/FhoZeYzxDijUqftw3HeeyNdBph6x" alt="file"></p><p>虚拟机压栈的过程</p><p><img src="http://images.attachie.club/Fk1jd9mHvohVT3PXvq0AERG_GrRc" alt="file"></p><p>结论</p><ul><li>一个线程 表示的是一个 Java 虚拟机栈</li><li>一个方法的执行，可以通过压栈的方式，也就是 方法对应的是栈帧</li></ul><p>接下来我们来谈谈栈的基本单位栈帧吧</p><h4 id="栈帧（每一个方法对应一个栈帧）"><a href="#栈帧（每一个方法对应一个栈帧）" class="headerlink" title="栈帧（每一个方法对应一个栈帧）"></a>栈帧（每一个方法对应一个栈帧）</h4><p>只有虚拟机栈顶的栈帧才是有效的，称为当前栈帧 (Current Stack Frame)，这个栈帧所关联的方法称为当前方法 (Current Method) 组成：</p><ul><li>局部变量表</li><li>操作数栈</li><li>动态链接</li><li>方法出口信息</li></ul><h5 id="1-局部变量表：由基本数据类型和对象引用组成的"><a href="#1-局部变量表：由基本数据类型和对象引用组成的" class="headerlink" title="1. 局部变量表：由基本数据类型和对象引用组成的"></a>1. 局部变量表：由基本数据类型和对象引用组成的</h5><p>作用：用来存储方法中的局部变量<br>基本单位：slot</p><ul><li>局部变量表的大小在编译器就可以确定其大小了，因此在程序执行期间局部变量表的大小是不会改变的。</li><li>如果存储的是基本数据类型那么直接存储值</li><li>如果存储的是对象引用那么存储对象的引用地址（ reference）（堆中）</li></ul><h5 id="补充：比较-reference-的两种实现方式"><a href="#补充：比较-reference-的两种实现方式" class="headerlink" title="补充：比较 reference 的两种实现方式"></a>补充：比较 reference 的两种实现方式</h5><p>直接引用 vs 使用句柄池</p><p>直接引用</p><p>reference 直接指向对象，对象中指向对象类型数据</p><p>优点：速度快，节约指针开销。HotSpot 采用的主要方式</p><p><img src="http://images.attachie.club/FjQLlgouzkVKtCjf5xgIJPEa1Z6E" alt="file"></p><p>使用句柄池：</p><p>java 堆中会维护一个句柄池，句柄池分别指向对象实例（堆）的和对象类型数据（方法区）</p><p>优点：对象移动后只需改变句柄池的指向地址，而不需要改变引用的指向地址。稳定</p><p><img src="http://images.attachie.club/Fu9q5yE0iob0KBOihD6ZfqarxUjn" alt="file"></p><p>其实用白话来说 就是 2 个人是直接自己单线联系，还是通过一个第三方联系，自己并不知道自己要联系的是谁，这个再抗战特务剧中很常见呀。</p><h5 id="2-操作数栈"><a href="#2-操作数栈" class="headerlink" title="2. 操作数栈"></a>2. 操作数栈</h5><p>操作数栈的深度在编译器就可以确定其大小了，因此在程序执行期间局部变量表的大小是不会改变的。</p><p>功能：实现程序功能</p><h5 id="3-动态连接"><a href="#3-动态连接" class="headerlink" title="3. 动态连接"></a>3. 动态连接</h5><p>补充下直接引用与符号引用</p><ul><li>直接引用：当类已经加载到虚拟机时，通过地址直接调用该类</li><li>符号引用（常量池中）：在编译的时候还不知道类是否被加载，先用符号代替该类，等实际运行时再用直接引用替换间接引用。</li></ul><p>静态解析：符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用</p><p>动态连接: 将在每一次的运行期期间转化为直接引用</p><h5 id="4-方法出口信息"><a href="#4-方法出口信息" class="headerlink" title="4. 方法出口信息"></a>4. 方法出口信息</h5><p>当一个方法执行完毕之后，要返回之前调用它的地方，因此在栈帧中必须保存一个方法返回地址。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul><li>大体上都类似于虚拟机栈</li><li>不同点：栈执行的 java 方法服务</li><li>本地方法栈执行的是 Native 方法（不一定是用 java 开发的）服务</li></ul><h3 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h3><p>特点：存储对象，线程间内存共享，占用大量内存，垃圾回收关注的重点区域</p><p>异常：OutOfMemoryError</p><p>每次都向堆中存放对象，方法结束后，销毁栈帧的局部变量表时同时销毁引用，该对象就成了可回收的垃圾。咋看起来没什么不对呀，可是仔细思考下还是存在两个问题 1. 不断的来回增加删除对象，对于 GC 的工作量太大。 2.java 使指针碰撞（堆中存入新对象的时候，指针根据对象大小移动到相应位置）来为对象分配内存。如果在多线程的环境下，就会出现两个对象同时移动当前前指针的情况，造成线程不安全的情况。</p><p>这里就要引入 TLAB 的概念了</p><p>TLAB 的全称是 Thread Local Allocation Buffer，这是一个线程专用的内存分配区域。每个线程都会从 Eden 分配一块空间，当线程销毁时，我们自然可以回收掉 TLAB 的内存。</p><p>使用 TLAB 指令 -XX:UseTLAB</p><p>优点：线程安全，减少垃圾回收的压力。</p><p>缺点：TLAB 空间大小是固定的，面对大对象的时候不够灵活</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>特点：存储类，线程间内存共享</p><p>存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p><p>异常：OutOfMemoryError</p><p>提到方法区不得不说的就是运行时常量池</p><p>补充：方法区不是永久代，只是 Hotspot 的实现方式而已。</p><h4 id="远行时常量池"><a href="#远行时常量池" class="headerlink" title="远行时常量池"></a>远行时常量池</h4><p>运行时常量池是方法区的一部分，Class 文件除了有类的版本，字段，方法，还有常量池</p><p>Java 虚拟机对 class 文件每一部分的格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范才会被 jvm 认可。但对于运行时常量池，Java 虚拟机规范没做任何细节要求。</p><p>运行时常量池有个重要特性是动态性，Java 语言不要求常量一定只在编译期才能产生，也就是并非预置入 class 文件中常量池的内容才能进入方法区的运行时常量池，运行期间也有可能将新的常量放入池中，这种特性使用最多的是 String 类的 intern() 方法。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制。当常量池无法再申请到内存时会抛出 outOfMemeryError 异常。</p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>### 当虚拟机遇到一条 New 指令时：会进行如下步骤</p><ul><li>检查指令的参数（即工作中我们 New 的对象），能否在常量池中找到它的符号引用。</li><li>如果存在，检查符号引用代表的类是否被加载、解析、初始化过。（如果没有则执行类的加载 —– 相关加载过程参考我前面的文章类加载机制）。</li><li>加载通过后，虚拟机将为新生对象分配内存。（所需内存大小在类加载完成后便可确定）</li></ul><h3 id="两种内存分配的方式："><a href="#两种内存分配的方式：" class="headerlink" title="两种内存分配的方式："></a>两种内存分配的方式：</h3><ul><li><p>指针碰撞：假设 Java 堆中的内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边。中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针往空闲空间那边挪动一段与对象大小相等的距离。这种方式则属于指针碰撞。</p></li><li><p>空闲列表：如果堆中的内存并不是规整的，已使用的内存和空闲内存相互交错，显然无法使用指针碰撞。虚拟机就必须维护一个列表，记录哪些内存是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新记录表上的数据。这种方式属于空闲列表。</p></li></ul><p>具体选择哪种分配方式由 Java 堆决定，而 Java 堆是否规整，则有 GC 收集器决定。因此使用 Serial、ParNew 等带 Compact 过程的收集器时，系统采用的分配算法是指针碰撞。而使用 CMS 这种基于 Mark-Sweep 算法的收集器时，通常采用的空闲列表。</p><h3 id="如何保证分配内存时线程的安全性"><a href="#如何保证分配内存时线程的安全性" class="headerlink" title="如何保证分配内存时线程的安全性"></a>如何保证分配内存时线程的安全性</h3><ul><li>对分配内存的动作进行同步处理（实际上虚拟机采用 CAS 配上失败重试的机制保证了更新操作的原子性）</li><li>把分配内存的动作按照线程划分在不同的空间之中进行（即每个线程在 Java 堆中预先分配一小块内存（称为本地线程分配缓冲））。</li></ul><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>在 HotSpot 虚拟机中，对象在内存中的布局可以分为 3 块区域：对象头, 实例数据和对齐填充</p><p>对象头包括两部分信息：</p><ul><li>存储对象自身的运行时数据（如：哈希码、GC 分代年龄、锁 等）</li><li>类型指针（即对象指向他的类元数据的指针，虚拟机根据此指针来确认对象属于哪个类的实例）</li><li>如果是数据 记录数组的大小 实例数据：</li><li>实例数据才是对象真正存贮的有效信息（即程序中所定义的各种类型的字段内容）。</li></ul><p>对齐填充：</p><ul><li>不是必然存在的，仅仅起到占位符的作用，因为 HotSpot 虚拟机要求对象的起始地址必须是 8 个字节的整数倍。</li></ul><h2 id="来个例子把-JVM-的运行时的区域全部串起来"><a href="#来个例子把-JVM-的运行时的区域全部串起来" class="headerlink" title="来个例子把 JVM 的运行时的区域全部串起来"></a>来个例子把 JVM 的运行时的区域全部串起来</h2><p><img src="http://images.attachie.club/FlG77WGzw1qkNlDngjVcFOED59TX" alt="file"><br><img src="http://images.attachie.club/FtkxKnWTlhmJy2R5Eshndi3dAs84" alt="file"><br><img src="http://images.attachie.club/FhY-tbMBdQjCzBicK1umB-sqpvxR" alt="file"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>明天就是 我们大头 垃圾回收算法，和垃圾回收器了，然后我们再搞几个实战，对于 JVM 也算是有一个基础的认识了，之后就要靠大家自己多去累计实战经验了。</p><h2 id="日常求赞"><a href="#日常求赞" class="headerlink" title="日常求赞"></a>日常求赞</h2><blockquote><p>好了各位，以上就是这篇文章的全部内容了，能看到这里的人呀，都是<strong>真粉</strong>。</p><p>创作不易，各位的支持和认可，就是我创作的最大动力，我们下篇文章见</p><p>六脉神剑 | 文 【原创】如果本篇博客有任何错误，请批评指教，不胜感激 ！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】JVM从入门到入土之JVM的类文件结构</title>
      <link href="/java-plus/59791.html"/>
      <url>/java-plus/59791.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者在掘金开了一个《JVM从入门到入土》系列，有兴趣可以去围观一下。</p><footer><strong>引用自 掘金，六脉神剑</strong><cite><a href="https://juejin.im/post/5e1d19b26fb9a02fee1ed155" target="_blank" rel="noopener">《JVM从入门到入土之JVM的类文件结构》</a></cite></footer></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>文本已收录至我的 GitHub 仓库，欢迎 Star：<a href="https://github.com/bin392328206/six-finger" target="_blank" rel="noopener">github.com/bin39232820…</a><br><strong>种一棵树最好的时间是十年前，其次是现在</strong><br>我知道很多人不玩 <strong>qq</strong> 了, 但是怀旧一下, 欢迎加入六脉神剑 Java 菜鸟学习群，群聊号码：<strong>549684836</strong> 鼓励大家在技术的路上写博客</p></blockquote><h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>昨天讲了类加载机制，其实那个应该算是第二步，第一步还是我们的. Class 文件的结构，但是直接讲这个未免太枯燥，所以我就写讲了类加载机制，再讲文件结构</p><ul><li><a href="https://juejin.im/post/5e1aaf626fb9a0301d11ac8e" target="_blank" rel="noopener">🔥JVM 从入门到入土之 JVM 的类加载机制</a></li></ul><p>我们知道我们写完的 Java 程序经过 javac xxx.java 编译后生成了 xxx.class 文件，可是你是否想过 xxx.class 文件到底是什么？这个文件中到底包含了什么内容？那么现在我们就一起通过解析一个. class 文件来深入的学习一下类文件结构，通过这次的学习，我想你会对 class 文件了如指掌。</p><a id="more"></a><h1 id="Class-类文件结构"><a href="#Class-类文件结构" class="headerlink" title="Class 类文件结构"></a>Class 类文件结构</h1><p>在解析一个 class 文件之前，我们需要先学习一下 Class 类文件的结构，这个类文件结构相当于一个总纲，我们马上就会对照着这个类文件结构解析真正的 class 文件。</p><ul><li>Class 文件是一组以 8 个字节为基础单位的二进制流（可能是磁盘文件，也可能是类加载器直接生成的），各个数据项目严格按照顺序 - 紧凑地排列，中间没有任何分隔符；</li><li>Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储数据，其中只有两种数据类型：无符号数和表；</li><li>无符号数属于基本的数据类型，以 u1、u2、u4 和 u8 来分别代表 1 个字节、2 个字节、4 个字节和 8 个字节的无符号数，可以用来描述数字 - 、索引引用、数量值或者按照 UTF-8 编码构成字符串值；</li><li>表是由多个无符号数获取其他表作为数据项构成的复合数据类型，习惯以 “_info” 结尾；</li><li>无论是无符号数还是表，当需要描述同一个类型但数量不定的多个数据时，经常会使用一个前置的容量计数器加若干个连续的数据项 - 的形式，这时称这一系列连续的某一类型的数据未某一类型的集合。</li></ul><p>类文件结构图：</p><p><img src="http://images.attachie.club/Fg5pm7RF6sqw0Anrxe-p4oj0PbCM" alt="file"></p><h2 id="类文件分析"><a href="#类文件分析" class="headerlink" title="类文件分析"></a>类文件分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package temp;</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;Hello,World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们通过 16 进制编辑器打开编译后的 HelloWorld.class 文件，其十六进制的文件内容如下：</p><p><img src="http://images.attachie.club/FgvBNKQFIRtoM8MmrFpdzg7XYLlN" alt="file"></p><h3 id="魔数和版本"><a href="#魔数和版本" class="headerlink" title="魔数和版本"></a>魔数和版本</h3><ul><li>Class 文件的头 4 个字节，唯一作用是确定文件是否为一个可被虚拟机接受的 Class 文件，固定为 “0xCAFEBABE”。</li><li>第 5 和第 6 个字节是次版本号，第 7 和第 8 个字节是主版本号（0x0034 为 52，对应 JDK 版本 1.8）；Java 的版本号是从 45 开始的，JDK1.1 之后的每一个 JDK 大版本发布主版本号向上加 1，高版本的 JDK 能向下兼容低版本的 JDK。</li></ul><p>对应到 class 文件中就是：</p><p><img src="http://images.attachie.club/Fobtl1xjOpW07KjJs6UERx5XpgbY" alt="file"></p><p>图中 1 就是魔数，第二个就是版本</p><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>紧接着主版本号的就是常量池，常量池可以理解为 class 文件的资源仓库，它是 class 文件结构中与其它项目关联最多的数据类型，也是占用 class 文件空间最大的数据项目之一，也是 class 文件中第一个出现的表类型数据项目。</p><p>由于常量池中常量的数量不是固定的，所以常量池入口需要放置一项 u2 类型的数据，代表常量池中的容量计数。不过，这里需要注意的是，这个容器计数是从 1 开始的而不是从 0 开始，也就是说，常量池中常量的个数是这个容器计数 - 1。将 0 空出来的目的是满足后面某些指向常量池的索引值的数据在特定情况下需要表达 “不引用任何一个常量池项目” 的含义。class 文件中只有常量池的容量计数是从 1 开始的，对于其它集合类型，比如接口索引集合、字段表集合、方法表集合等的容量计数都是从 0 开始的。</p><p>常量池中主要存放两大类常量：字面量和符号引用。字面量比较接近 Java 语言的常量概念，如文本字符串、声明为 final 的常量等。而符号引用则属于编译原理方面的概念，它包括三方面的内容：</p><ul><li>类和接口的全限定名（Fully Qualified Name）；</li><li>字段的名称和描述符（Descriptor）；</li><li>方法的名称和描述符；</li></ul><p>Java 代码在进行 javac 编译的时候并不像 C 和 C++ 那样有连接这一步，而是在虚拟机加载 class 文件的时候进行动态连接。也就是说，在 class 文件中不会保存各个方法、字段的最终内存布局信息，因此这些字段、方法的符号引用不经过运行期转换的话无法得到真正的内存入口地址，虚拟机也就无法使用。当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址中。</p><p>常量池中的每一项都是一个表，在 JDK1.7 之前有 11 中结构不同的表结构，在 JDK1.7 中为了更好的支持动态语言调用，又增加了 3 种（CONSTANT_MethodHandle_info、CONSTANT_MethodType_info 和 CONSTANT_InvokeDynamic_info）。不过这里不会介绍这三种表数据结构。</p><p>这 14 个表的开始第一个字节是一个 u1 类型的 tag，用来标识是哪一种常量类型。这 14 种常量类型所代表的含义如下：</p><p><img src="http://images.attachie.club/FmcENGmX49Tk2Fr1pJgOzezhVufA" alt="file"></p><p>由 class 文件结构图可知：</p><p><img src="http://images.attachie.club/Ftyx56PQxsQUvMMs4z1eJHP--tN2" alt="file"></p><p>常量池的开头两个字节 0x0022 是常量池的容量计数，这里是 34，也就是说，这个常量池中有 33 个常量项。 我们可以看一下这 33 个常量：</p><p><img src="http://images.attachie.club/Fu9brBWKJrwkB_b1IOGl7v5CeS4A" alt="file"></p><p>蓝色部分的内容就是 33 个常量，我们可以发现图片右边用 UTF-8 编码后已经把常量翻译成了英文字母。可以看到这部分的内容非常多。因为常量池中的常量比较多，每一中常量还有自己的结构，导致常量池的结构非常复杂，这里只解析第一个常量作为示例：</p><p>看看这个例子的第一项，容量计数后面的第一个字节标识这个常量的类型，是 0x0A，即 10，查表可知是类方法的符号引用，这个常量表的结构如下：</p><p><img src="http://images.attachie.club/FnC19o2P1VCT4zbPZeGHKDOgMBn_" alt="file"></p><p>按照这个结构，可以知道 name_index 是 6（0x0006），descriptor_index 是 20（0x0014）。这都是一个索引，指向常量池中的其他常量，其中 name 描述了这个方法的名称，descriptor 描述了这个方法的访问标志（比如 public、private 等）、参数类型和返回类型。（这里因为手工解析常量池确实是一件很坑爹的工作，而且后面会介绍自动解析的工具，所以这里就不去管 name 和 descriptor 的内容了）</p><p>我们可以看到手工解析常量池是一件非常痛苦的事情，这里还只是一个特别简单的例子生成的 class 文件，我们可以自己想想如果是自己写的一个程序编译为 class 文件后，它的常量池会非常大，所以 Java 已经为我们提供了一个解析常量池的工具 javap，我们可以通过 javap -verbose class 文件名，就可以自动帮我们解析了，下面是这个程序的解析结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">警告: 二进制文件HelloWorld包含temp.HelloWorld</span><br><span class="line">Classfile &#x2F;I:&#x2F;work&#x2F;out&#x2F;production&#x2F;work&#x2F;temp&#x2F;HelloWorld.class</span><br><span class="line">  Last modified 2018-8-3; size 543 bytes</span><br><span class="line">  MD5 checksum 5eeb0ca06c253d3206781e81895bd4a4</span><br><span class="line">  Compiled from &quot;HelloWorld.java&quot;</span><br><span class="line">public class temp.HelloWorld</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 &#x3D; Methodref          #6.#20         &#x2F;&#x2F; java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 &#x3D; Fieldref           #21.#22        &#x2F;&#x2F; java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">   #3 &#x3D; String             #23            &#x2F;&#x2F; Hello,World</span><br><span class="line">   #4 &#x3D; Methodref          #24.#25        &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">   #5 &#x3D; Class              #26            &#x2F;&#x2F; temp&#x2F;HelloWorld</span><br><span class="line">   #6 &#x3D; Class              #27            &#x2F;&#x2F; java&#x2F;lang&#x2F;Object</span><br><span class="line">   #7 &#x3D; Utf8               &lt;init&gt;</span><br><span class="line">   #8 &#x3D; Utf8               ()V</span><br><span class="line">   #9 &#x3D; Utf8               Code</span><br><span class="line">  #10 &#x3D; Utf8               LineNumberTable</span><br><span class="line">  #11 &#x3D; Utf8               LocalVariableTable</span><br><span class="line">  #12 &#x3D; Utf8               this</span><br><span class="line">  #13 &#x3D; Utf8               Ltemp&#x2F;HelloWorld;</span><br><span class="line">  #14 &#x3D; Utf8               main</span><br><span class="line">  #15 &#x3D; Utf8               ([Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #16 &#x3D; Utf8               args</span><br><span class="line">  #17 &#x3D; Utf8               [Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #18 &#x3D; Utf8               SourceFile</span><br><span class="line">  #19 &#x3D; Utf8               HelloWorld.java</span><br><span class="line">  #20 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F; &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #21 &#x3D; Class              #28            &#x2F;&#x2F; java&#x2F;lang&#x2F;System</span><br><span class="line">  #22 &#x3D; NameAndType        #29:#30        &#x2F;&#x2F; out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">  #23 &#x3D; Utf8               Hello,World</span><br><span class="line">  #24 &#x3D; Class              #31            &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream</span><br><span class="line">  #25 &#x3D; NameAndType        #32:#33        &#x2F;&#x2F; println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #26 &#x3D; Utf8               temp&#x2F;HelloWorld</span><br><span class="line">  #27 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span><br><span class="line">  #28 &#x3D; Utf8               java&#x2F;lang&#x2F;System</span><br><span class="line">  #29 &#x3D; Utf8               out</span><br><span class="line">  #30 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">  #31 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream</span><br><span class="line">  #32 &#x3D; Utf8               println</span><br><span class="line">  #33 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">&#123;</span><br><span class="line">  public temp.HelloWorld();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 2: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Ltemp&#x2F;HelloWorld;</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;2, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">         0: getstatic     #2                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">         3: ldc           #3                  &#x2F;&#x2F; String Hello,World</span><br><span class="line">         5: invokevirtual #4                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">         8: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 4: 0</span><br><span class="line">        line 5: 8</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       9     0  args   [Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;HelloWorld.java&quot;</span><br></pre></td></tr></table></figure><h2 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h2><p>常量池结束后紧接着的两个字节代表访问标志，用来标识一些类或接口的访问信息，包括：这个 Class 是类还是接口；是否定义为 public；是否定义为 abstract；如果是类的话，是否被声明为 final 等。具体的标志位以及含义如下表：</p><p><img src="http://images.attachie.club/Ftgg8-XZhAL5sfYGdeuDcYFVzbCq" alt="file"><br><img src="http://images.attachie.club/Fmbq9Bqc7hmjUPwRf8ANM9YzkUYS" alt="file"></p><p>由于 access_flags 是两个字节大小，一共有十六个标志位可以使用，当前仅仅定义了 8 个，没有用到的标志位都是 0。对于一个类来说，可能会有多个访问标志，这时就可以对照上表中的标志值取或运算的值。拿上面那个例子来说，它的访问标志值是 0x0021，查表可知，这是 ACC_PUBLIC 和 ACC_SUPER 值取或运算的结果。所以 HelloWorld 这个类的访问标志就是 ACC_PUBLIC 和 ACC_SUPER，这一点我们可以在 javap 得到的结果中验证：</p><p><img src="http://images.attachie.club/FgQ_m0bmiGBTno-53jEx-YdNzzmS" alt="file"></p><h2 id="类索引、父类索引与接口索引集合"><a href="#类索引、父类索引与接口索引集合" class="headerlink" title="类索引、父类索引与接口索引集合"></a>类索引、父类索引与接口索引集合</h2><p>在访问标志 access_flags 后接下来就是类索引（this_class）和父类索引（super_class），这两个数据都是 u2 类型的，而接下来的接口索引集合是一个 u2 类型的集合，class 文件由这三个数据项来确定类的继承关系。由于 Java 中是单继承，所以父类索引只有一个；但 Java 类可以实现多个接口，所以接口索引是一个集合。</p><p>类索引用来确定这个类的全限定名，这个全限定名就是说一个类的类名包含所有的包名，然后使用”/” 代替”.”。比如 Object 的全限定名是 java.lang.Object。父类索引确定这个类的父类的全限定名，除了 Object 之外，所有的类都有父类，所以除了 Object 之外所有类的父类索引都不为 0. 接口索引集合存储了 implements 语句后面按照从左到右的顺序的接口。</p><p>类索引和父类索引都是一个索引，这个索引指向常量池中的 CONSTANT_Class_info 类型的常量。然后再 CONSTANT_Class_info 常量中的索引就可以找到常量池中类型为 CONSTANT_Utf8_info 的常量，而这个常量保存着类的全限定名。</p><h2 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h2><p>字段表集合，顾名思义就是 Java 类中的字段，字段又分为类字段（静态属性）和实例字段（对象属性），那么，在 Class 文件中是如何保存这些字段的呢？我们可以想一想保存一个字段需要保存它的哪些信息呢？</p><p>答案是：字段的作用域（public、private 和 protected 修饰符）、是实例变量还是类变量（static 修饰符）、可变性（final 修饰符）、并发可见性（volatile 修饰符）、是否可被序列化（transient 修饰符）、字段的数据类型（基本类型、对象、数组）以及字段名称。</p><h2 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h2><p>在字段表集合中介绍了字段的描述符和方法的描述符，对于理解方法表有很大帮助。class 文件存储格式中对方法的描述和对字段的描述几乎相同，方法表的结构也和字段表相同，这里就不再列出。不过，方法表的访问标志和字段的不同，列出如下：</p><h2 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h2><p>属性表在前面出现了多次，在 Class 文件、字段表和方法表都可以携带自己的属性表集合，来描述某些场景专有的信息。 与 Class 文件中其他的数据项目要求严格的顺序、长度和内容不同，属性表集合的限制比较少，不要求严格的顺序，只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写入自定义的属性信息，Java 虚拟机会在运行时忽略掉那些不认识的信息。为了能正确解析 class 文件，《Java 虚拟机规范（第二版）》中预定义了 9 项虚拟机应当识别的属性。现在，属性已经达到了 21 项。具体信息如下表，这里仅对常见的属性做介绍：</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>其实真心不想写这篇的，因为自己也没有静下心来，认真的一个个自己去实际，只是说把书上的东西搬过来，这个坑以后补吧，可能对字节码的东西还是刚接触，等有了最基本的概率再去啃它，太难了</p><h2 id="日常求赞"><a href="#日常求赞" class="headerlink" title="日常求赞"></a>日常求赞</h2><blockquote><p>好了各位，以上就是这篇文章的全部内容了，能看到这里的人呀，都是<strong>真粉</strong>。</p><p>创作不易，各位的支持和认可，就是我创作的最大动力，我们下篇文章见</p><p>六脉神剑 | 文 【原创】如果本篇博客有任何错误，请批评指教，不胜感激 ！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 3 集合数组</title>
      <link href="/basecharp/41816.html"/>
      <url>/basecharp/41816.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单的介绍一下集合，通俗来讲就是用来保管多个数据的方案。比如说我们是一个公司的仓库管理，公司有一堆货物需要管理，有同类的，有不同类的，总而言之就是很多、很乱。我们对照集合的概念对仓库进行管理的话，那么 数组就是将一堆货整整齐齐的码在仓库的某个地方，普通列表也是如此；Set就是在仓库里有这么一个货架，每种货品只能放一个，一旦某种货品超过一个了货架就塌了；Dictionary字典呢，在一个货架上随机摆放，然后再找一个本子把每个货品存放的位置记录下来。</p></blockquote><h1 id="1-主要集合"><a href="#1-主要集合" class="headerlink" title="1. 主要集合"></a>1. 主要集合</h1><p>C#/.NET Framework 提供了很多很有意思的集合类，数组、列表、链表、Set、字典等一系列的类。其中数组是语言的一部分，个人认为严格意义上不属于集合类这一部分。C#开发中常用的集合有数组、 List类、Set接口、Dictionary类、Queue类、LinkedList类等，其他的出镜率不高。<br>与其他（java）语言不同的一点是，C#的<code>List</code>是类，而不是接口，接口是<code>IList</code>，但这个接口意义不大，在使用<code>IList</code>的时候更多的倾向于使用<code>IEnumerable</code>，这主要是因为<code>IEnumerable</code> 有 <code>Linq</code>的支持再者两者的方法基本一致，能用<code>IList</code>的地方基本都可以用<code>IEnumerable</code>。</p><a id="more"></a><h2 id="1-1-Array-数组"><a href="#1-1-Array-数组" class="headerlink" title="1.1 Array 数组"></a>1.1 Array 数组</h2><p>数组，集合的基础部分，主要特点是一经初始化就无法再次对数组本身进行增删元素。C#虽然添加了一些修改数组的扩展方法，但基本都会返回新的数组对象。</p><h3 id="1-1-1-初始化"><a href="#1-1-1-初始化" class="headerlink" title="1.1.1 初始化"></a>1.1.1 初始化</h3><p>数组的初始化需要指定大小，可以显示指定或者隐式的指定。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示指定类型与大小，具体的元素后续赋值</span></span><br><span class="line"><span class="keyword">string</span>[] strArr = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">10</span>]; </span><br><span class="line"><span class="comment">//指定类型同时给元素赋值，具体大小由编译器自动推断</span></span><br><span class="line"><span class="keyword">string</span>[] strArr1 = <span class="keyword">new</span> <span class="keyword">string</span>[]&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>&#125;;</span><br><span class="line"><span class="comment">// 类型和大小都由编译器进行推断</span></span><br><span class="line"><span class="keyword">string</span>[] strArr2 = <span class="keyword">new</span> []&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-常用方法"><a href="#1-1-2-常用方法" class="headerlink" title="1.1.2 常用方法"></a>1.1.2 常用方法</h3><ol><li>访问和赋值<br>数组可以通过下标访问数组中的元素，下标从<strong>0</strong>开始，表示<strong>0</strong>位。代码如下：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> item0 = strArr[<span class="number">0</span>]; <span class="comment">//取出 "1"</span></span><br><span class="line"><span class="keyword">string</span> item2 = strArr[<span class="number">2</span>]; <span class="comment">// 取出 "3"</span></span><br><span class="line">strArr[<span class="number">0</span>] = <span class="string">"3"</span>; <span class="comment">// strArr = &#123;"3","2","3","4","5","6","7","8","9","10"&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取长度</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> length = strArr.Length;<span class="comment">// 获取一个整型的长度</span></span><br><span class="line"><span class="comment">//获取一个长整型的长度，对于一个非常大的数组且长度可能会超过int的最大值</span></span><br><span class="line"><span class="keyword">long</span> longLength = strArr.LongLength;</span><br></pre></td></tr></table></figure><ol start="3"><li>循环迭代</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通for 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; strArr.Length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">string</span> it = strArr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foreach 循环</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">string</span> it <span class="keyword">in</span> strArr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 依次循环，不需要下标，操作更快一点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-3-不常用但有用的方法"><a href="#1-1-3-不常用但有用的方法" class="headerlink" title="1.1.3 不常用但有用的方法"></a>1.1.3 不常用但有用的方法</h4><ol><li><p><code>CopyTo</code> 复制到</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyTo</span>(<span class="params">Array array, <span class="keyword">int</span> index</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyTo</span>(<span class="params">Array array, <span class="keyword">long</span> index</span>)</span>;</span><br></pre></td></tr></table></figure><p> 参数说明： array 需要复制到的数组，index 目标数组的起始下标</p><p> 方法说明：将 源数组的元素依次复制到 array从index下标开始的位置</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>[] strArr1 = <span class="keyword">new</span> <span class="keyword">string</span>[]&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>&#125;;</span><br><span class="line"><span class="keyword">string</span>[] strArr3 = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">10</span>];</span><br><span class="line">strArr1.CopyTo(strArr3, <span class="number">0</span>); <span class="comment">//strArr3 = &#123;"1","2","3","4",'5","6","7","8","9","10"&#125;</span></span><br></pre></td></tr></table></figure><p> 值得注意的是<code>strArr3</code>的长度不能 小于 index + strArr1.Length</p></li><li><p><code>Sort</code> 排序</p><p> 这个方法不是数组对象的方法，而是 <code>Array</code> 提供的一个静态方法。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span>[] &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">44</span>, <span class="number">98</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">92</span>&#125;;</span><br><span class="line">Array.Sort(arr1);<span class="comment">//0,1,2,3,4,5,6,9,12,13,18,28,44,81,92,98</span></span><br></pre></td></tr></table></figure><p> 值得注意的是，该方法是直接对数组进行操作，所以不会返回新的数组。</p></li><li><p><code>ToList</code> 转成 <code>List</code></p><p>顾名思义，将Array对象转成List对象。这里需要额外注意的是，<strong>转换成的List是不可改变长度的</strong>。</p></li><li><p><code>Clone()</code> 获得一个浅拷贝的数组对象</p><p>获取该对象的一个浅拷贝数组对象。</p></li></ol><p>至于其他的<code>Array</code>类和Array对象 还有很多有意思的方法，但是平时开发的时候使用的频率比较低。这里就不一一介绍了，以后需要会介绍一下的。</p><h2 id="1-2-List-列表"><a href="#1-2-List-列表" class="headerlink" title="1.2 List 列表"></a>1.2 List 列表</h2><p><code>List</code>列表为一个泛型类，泛型表示&lt;T&gt;，其中T表示列表中存放的元素类型，T代表C#中可实例化的类型。关于泛型的具体描述以后介绍，现在回过头来继续介绍列表。列表内部持有一个数组对象，列表有两个私有变量：一个是列表容量，即内部数组的大小；另一个是存放的元素数量，通过<code>Count</code>获取。<br><code>List</code>列表通过元素数量实现了<code>Add</code>和<code>Remove</code> 的操作，列表对象操作引发元素数量变动时都会导致对容量的重新计算，如果现有容量不满足后续操作需要的话，将会对现有数组进行扩充。</p><h3 id="1-2-1-初始化"><a href="#1-2-1-初始化" class="headerlink" title="1.2.1 初始化"></a>1.2.1 初始化</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">string</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();<span class="comment">// 初始化一个空的列表</span></span><br><span class="line">List&lt;<span class="keyword">string</span>&gt; list1 = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;&#123;<span class="string">"12"</span>, <span class="string">"2"</span>&#125;;<span class="comment">//初始化一个包含两个元素的列表</span></span><br><span class="line">list1 = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;(<span class="number">100</span>);<span class="comment">//初始化一个空的列表，并指定list的初始容量为100</span></span><br><span class="line">list = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;(list1);<span class="comment">// 使用一个List/Array 初始化一个列表</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-常用方法"><a href="#1-2-2-常用方法" class="headerlink" title="1.2.2 常用方法"></a>1.2.2 常用方法</h3><ol><li><p><code>Count</code> 或<code>LongCount</code>获取元素的数量</p><p> Count 表示获取一个int类型的的数量值，LongCount表示获取一个long类型的数量值。通常情况下两者返回的结果是一致的，但是如果列表中元素的数量超过了int允许的最大返回直接使用 <code>Count</code>获取将会出现数据溢出的问题，这时候就需要<code>LongCount</code>了。</p></li><li><p>访问元素/修改元素</p><p> C#的列表操作单个元素很简单 ，与数组的操作方式完全一样。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str = list1[<span class="number">0</span>];<span class="comment">//获取 list1 的第一个元素，即下标为0的元素</span></span><br><span class="line"> list1[<span class="number">2</span>] = <span class="string">"233"</span>; <span class="comment">//   将 list1 的第三个元素设置为“233” ，即下标为2 的元素，这里假设list1有至少三个元素</span></span><br></pre></td></tr></table></figure><p> 需要注意的地方是，如果给定的下标超过了List对象的索引值范围会报<code>ArgumentOutOfRangeException</code>。判断方法就是 <strong>下标</strong>&gt;= <code>Count</code>，如果满足就会越界。</p></li><li><p><code>Add</code>或<code>AddRange</code> 添加到列表最后</p><p> 将元素添加到List的末尾，<code>Add</code>添加一个，<code>AddRange</code>添加一组，支持数组、列表。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">string</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();<span class="comment">// 初始化一个空的列表</span></span><br><span class="line">list.Add(<span class="string">"12"</span>);<span class="comment">//list = &#123;"12"&#125;</span></span><br><span class="line">List&lt;<span class="keyword">string</span>&gt; list1 = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;&#123;<span class="string">"14"</span>, <span class="string">"2"</span>&#125;;</span><br><span class="line">list.AddRange(list1);<span class="comment">// list = &#123;"12","14","2"&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Insert(int index, T item)</code>或<code>InsertRange(int index,IEnumerable&lt;T&gt; items)</code> 插入</p><ul><li><p><code>Insert(int index,T item)</code> 在 index 下标处插入一个元素，该下标以及该下标以后的元素依次后移</p></li><li><p><code>InsertRange(int index,IEnumerable&lt;T&gt; items)</code> 在index下标处插入一组元素，该下标以及之后的元素依次后移</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; arr1 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">44</span>, <span class="number">98</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">92</span>&#125;;</span><br><span class="line">arr1.Insert(<span class="number">3</span>,<span class="number">37</span>);<span class="comment">// arr1 = 1,9,28,37,5,3,6,0,12,44,98,4,2,13,18,81,92 下标为3的元素变成了37，之后的元素依次后移了</span></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; arr1 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">44</span>, <span class="number">98</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">92</span>&#125;;</span><br><span class="line">List&lt;<span class="keyword">int</span>&gt; arr2 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">arr1.InsertRange(<span class="number">2</span>,arr2);<span class="comment">//arr1=  1,9,2,3,4,5,28,5,3,6,0,12,44,98,4,2,13,18,81,92 可以明显发现下标为2的元素发生了变化</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>Contains(T item)</code> 是否包含<br> 返回一个Boolean类型的结果，如果包含则返回<code>true</code>，如果不包含则返回<code>false</code></p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; arr2 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">arr2.Contains(<span class="number">8</span>);<span class="comment">//false</span></span><br><span class="line">arr2.Contains(<span class="number">3</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Remove(T item)</code> 删除指定元素</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; arr2 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">arr2.Remove(<span class="number">3</span>);<span class="comment">// arr2 = 2,4,5</span></span><br><span class="line">arr2.Remove(<span class="number">6</span>);<span class="comment">//arr2 = 2,4,5</span></span><br></pre></td></tr></table></figure><p> 值得注意的是，如果删除一个不存在的元素时，不会报错，列表也不会发生任何改变。</p></li><li><p><code>RemoveAt(int index)</code> 删除位于下标的元素</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; arr2 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">arr2.RemoveAt(<span class="number">1</span>);<span class="comment">//arr2 = 2,4,5</span></span><br></pre></td></tr></table></figure><p>  如果移除的下标超过了列表的最后一个元素的下标将会抛出异常</p></li><li><p><code>RemoveRane(IEnumerable&lt;T&gt; items)</code> 删除一组元素</p><p> 与<code>Remove(T item)</code>一致，如果要删除的元素不在列表中，则列表元素不会发生变化。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; arr1 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">28</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">44</span>, <span class="number">98</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">81</span>, <span class="number">92</span>&#125;;</span><br><span class="line">List&lt;<span class="keyword">int</span>&gt; arr2 = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">arr1.RemoveRange(arr2);</span><br></pre></td></tr></table></figure></li><li><p><code>GetRange(int index,int count)</code></p><p> 从列表中获取一个子列表，从<code>index</code>开始，获取<code>count</code>个元素，如果源列表中从<code>index</code>开始剩余的元素不足<code>count</code>个将会报错。</p></li></ol><h3 id="1-2-3-不常用但有用的方法"><a href="#1-2-3-不常用但有用的方法" class="headerlink" title="1.2.3 不常用但有用的方法"></a>1.2.3 不常用但有用的方法</h3><ol><li><p><code>Clear()</code>删除所有元素</p><p> 将列表清空，调用方法之后，列表中将不包含任何元素</p></li><li><p><code>Reverse()</code> 调转顺序</p><p> 将列表按照从尾到头的顺序进行排列</p></li><li><p><code>IndexOf(T item)</code> 查找下标</p><p> 查找元素在列表中的下标，如果没找到元素，则返回-1</p></li><li><p><code>Sort()</code>排序</p><p> 对列表进行排序，调用方法后，会按照默认排序方法返回一个排序结果</p></li></ol><h2 id="1-3-Set-集合"><a href="#1-3-Set-集合" class="headerlink" title="1.3 Set 集合"></a>1.3 Set 集合</h2><p>C#没有为<code>Set</code>单独设置类，一方面是因为Set出镜率不高，另一方面也因为<code>Set</code>本身的机制所致。Set集合不能包含重复元素，如果尝试存入重复元素集合元素将不会发生任何变化。<br>Set集合中元素的顺序与存放顺序不一定相同。因为Set集合中存放对于使用者而言是乱序存放的。<br>我们常用的Set集合有 <code>HashSet&lt;T&gt;</code>和<code>SortSet&lt;T&gt;</code>，其他的Set相关类则属于更加少见。至少在我5年多的开发经历中没有用过。</p><h3 id="1-3-1-HashSet-lt-T-gt-和SortSet-lt-T-gt"><a href="#1-3-1-HashSet-lt-T-gt-和SortSet-lt-T-gt" class="headerlink" title="1.3.1 HashSet&lt;T&gt; 和SortSet&lt;T&gt;"></a>1.3.1 <code>HashSet&lt;T&gt;</code> 和<code>SortSet&lt;T&gt;</code></h3><ul><li><code>HashSet</code> 俗称 哈希集合或者哈希Set，内部使用Hash值作为元素的唯一性验证，即调用对象的<code>HashCode()</code>方法作为Hash值的来源。</li><li><code>SortSet</code> 顾名思义，排序集合，它每次在插入的时候都会对元素进行一次排序</li></ul><h3 id="1-3-2-共同点"><a href="#1-3-2-共同点" class="headerlink" title="1.3.2 共同点"></a>1.3.2 共同点</h3><ol><li><p>初始化</p><p>  两者相同的地方就是 都有以下几种初始化方法</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;T&gt; <span class="keyword">set</span> = <span class="keyword">new</span> HashSet&lt;T&gt;();<span class="comment">// = new SortSet&lt;T&gt;(); 初始化一个空的集合</span></span><br><span class="line"><span class="comment">//使用一个集合对象初始化</span></span><br><span class="line">Set&lt;T&gt; set1 = <span class="keyword">new</span> HashSet&lt;T&gt;(IEnumerable&lt;T&gt; items);<span class="comment">// = new SortSet&lt;T&gt;(IEnumerable&lt;T&gt; items); </span></span><br><span class="line">Set&lt;T&gt; set2 = <span class="keyword">new</span> HashSet&lt;T&gt;()&#123;T t1, T t2, T t3&#125;;<span class="comment">// 与上一种一样</span></span><br></pre></td></tr></table></figure></li><li><p>添加元素</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1.Add(item);<span class="comment">// 集合只支持添加单个元素，但是可以通过集合运算的方式增加多个元素</span></span><br></pre></td></tr></table></figure></li><li><p>移除元素</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1.Remove(item);<span class="comment">//删除集合中与item判断相等的元素</span></span><br></pre></td></tr></table></figure></li><li><p>访问元素</p><p> 需要注意的地方是，C#对Set没有支持下标访问方式获取Set里的元素，这是因为索引位置对于集合来说意义不大，没有操作意义。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> set1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Set 只能通过遍历访问元素，不能通过Get或者下标操作访问元素。关于<code>foreach</code>循环会在下一篇《<code>C#基础知识</code>系列》里进行介绍。</p></li><li><p>集合运算</p><p> <img src="http://images.attachie.club/FrzLzJDaiJiP5G3_k6cXW1JzcgQh" alt="file"></p><ol><li><p><code>UnionWith</code>  并</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;<span class="keyword">int</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">38</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">17</span>&#125;;</span><br><span class="line"><span class="keyword">set</span>.UnionWith(<span class="keyword">new</span> []&#123;<span class="number">5</span>,<span class="number">57</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">33</span>&#125;); <span class="comment">// set = 0,1,3,4,5,8,17,29,33,38,48,57</span></span><br></pre></td></tr></table></figure><p> 通过传入一个集合对象，将该集合设置为两个集合的并集，也就是说取上图 A,B,C 三个区域的和</p></li><li><p><code>ExceptWith</code> 差</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;<span class="keyword">int</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">38</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">17</span>&#125;;</span><br><span class="line"><span class="keyword">set</span>.ExceptWith(<span class="keyword">new</span> []&#123;<span class="number">5</span>,<span class="number">57</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">33</span>&#125;); <span class="comment">// set =17,29,38,48</span></span><br></pre></td></tr></table></figure><p> 传入一个集合，从set中去掉同属于两个集合的元素，保留只存在于set的元素，也就是取上图中的A部分元素</p></li><li><p><code>IntersectWith</code> 交</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;<span class="keyword">int</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">38</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">17</span>&#125;;</span><br><span class="line"><span class="keyword">set</span>.ExceptWith(<span class="keyword">new</span> []&#123;<span class="number">5</span>,<span class="number">57</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">33</span>&#125;); <span class="comment">// set =0,1,33</span></span><br></pre></td></tr></table></figure><p> 传入一个集合，保留set与传入集合里相同的元素，也就是说取的是上图中的B部分</p></li><li><p><code>SymmetricExceptWith</code> 余集</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;<span class="keyword">int</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">38</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">17</span>&#125;;</span><br><span class="line"><span class="keyword">set</span>.SymmetricExceptWith(<span class="keyword">new</span> []&#123;<span class="number">5</span>,<span class="number">57</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">33</span>&#125;);<span class="comment">//set= 3,4,5,8,17,29,38,48,57</span></span><br></pre></td></tr></table></figure><p> 传入一个集合，保留set与传入集合两个集合中不同的元素，也就是取上图的A+C这两部分。</p></li></ol></li><li><p><code>Contains</code> 包含</p><p>  判断集合中是否包含目标元素，返回true/false</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;<span class="keyword">int</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">38</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">17</span>&#125;;</span><br><span class="line"><span class="keyword">set</span>.Contains(<span class="number">1</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-3-不同点"><a href="#1-3-3-不同点" class="headerlink" title="1.3.3 不同点"></a>1.3.3 不同点</h3><ol><li>初始化<ul><li><code>HashSet&lt;T&gt;</code> 支持传入一个自定义的相等比较器，该比较器需要返回一个 bool值；可以指定起始容量</li><li><code>SortSet&lt;T&gt;</code> 支持传入一个自定义的大小比较器，该比较器返回一个int值；不能指定起始容量</li></ul></li><li>其他<br><code>Comparer</code> 属性：SortSet 可以获取大小比较器；HashSet 获取一个相等比较器</li></ol><h2 id="1-4-Dictionary-字典"><a href="#1-4-Dictionary-字典" class="headerlink" title="1.4 Dictionary 字典"></a>1.4 Dictionary 字典</h2><p><code>Dictionary</code>  字典，正如它的名称一样，<code>Dictionary</code> 需要指定两个类型，一个作为索引键，一个作为数据值。就像字典一样，每一个词条内容都只有一个字词索引，但可以出现同义词一样。当然，作为我博大精深的中文会出现同字不同音的词组，但是一旦把音、字组合起来作为索引，那还是只会出现一个词条。<br>所以 <code>Dictionary</code>的使用方式也跟字典一样，通过索引访问和操作数据。</p><h3 id="1-4-1-初始化"><a href="#1-4-1-初始化" class="headerlink" title="1.4.1 初始化"></a>1.4.1 初始化</h3><p><code>Dictionary</code>的初始化有如下几个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;();<span class="comment">// 键是字符串，值是int类型</span></span><br><span class="line">Dictionary&lt;<span class="keyword">string</span>,<span class="keyword">int</span>&gt; dict1 = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;(<span class="number">10</span>);<span class="comment">// 指定初始容量是10</span></span><br><span class="line">Dictionary&lt;<span class="keyword">string</span>,<span class="keyword">int</span>&gt; dict2 = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="string">"1"</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="string">"2"</span>,<span class="number">2</span>&#125;</span><br><span class="line">&#125;;<span class="comment">// 在大括号标记中 通过 &#123;key,value&#125;的写法创建一个 字典对象，并包含这些键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个字典对象，以传入的对象为基础创建一个字典</span></span><br><span class="line">Dictionary&lt;<span class="keyword">string</span>,<span class="keyword">int</span>&gt; dict3 = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;(dict2);</span><br></pre></td></tr></table></figure><h3 id="1-4-2-常用方法"><a href="#1-4-2-常用方法" class="headerlink" title="1.4.2 常用方法"></a>1.4.2 常用方法</h3><ol><li><p>添加元素</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">dict.Add(<span class="string">"1"</span>,<span class="number">2</span>);<span class="comment">//添加一个 键为“1”，值为2的键值对。</span></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="comment">//字典可以类似列表的形式通过下标添加或更新键对应的值，</span></span><br><span class="line"><span class="comment">//不过与列表不同的是，字典的下标是字符串</span></span><br><span class="line">dict[<span class="string">"2"</span>] = <span class="number">4</span>;<span class="comment">// 如果 dict中2有值，则更新为4，如果没有，则设置2对应的值为4</span></span><br></pre></td></tr></table></figure></li><li><p>获取元素</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">省略数据填充阶段</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">value</span> = dict[<span class="string">"2"</span>]; <span class="comment">// value = 4</span></span><br><span class="line"><span class="comment">// 如果Dictionary中不存在索引为“2”的数据</span></span><br><span class="line"><span class="comment">// 将会抛出 System.Collections.Generic.KeyNotFoundException 异常</span></span><br></pre></td></tr></table></figure><p> C# 的<code>Dictionary</code>还有一个<code>TryGetValue</code>方法可以用来尝试获取，他的使用方法是这样的：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> obj = <span class="number">0</span>;</span><br><span class="line">boolean isContains = dict.TryGetValue(<span class="string">"3"</span>, <span class="keyword">out</span> obj);</span><br><span class="line"><span class="comment">// 方法会返回 dict是否包含键“3”的结果，如果有 obj 则存放了dict中对应的值，如果没有，则返回false且不改变 obj 的值</span></span><br></pre></td></tr></table></figure></li><li><p><code>Count</code></p><p> 获取<code>Dictionary</code>里键值对的数量。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = dict.Count;</span><br></pre></td></tr></table></figure><p> Dictionary没有<code>LongCount</code>属性，因为对于<code>Dictionary</code>存放数据需要比对<code>Key</code>的相等性，如果存放巨量数据将会对数据的访问和操作效率有影响。</p></li><li><p><code>Keys</code></p><p> 获取<code>Dictionary</code>里所有的键，返回一个KeyCollection对象，不需要关心这是一个什么类型，可以简单的把它当做一个存放了键的<code>HashSet</code>。</p></li><li><p><code>ContainsKey()</code></p><p> 是否包含键：通常与获取元素一起使用，可以先判断<code>Dictionary</code>里是否有这个键，然后再进行后续操作。</p></li><li><p><code>Remove()</code></p><p> 删除<code>Dictionary</code>中键对应的元素，删除后再次访问会报错。如果删除一个不存在的元素将返回flase。<br> 操作示例：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;<span class="keyword">string</span>,<span class="keyword">int</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="comment">//省略赋值操作</span></span><br><span class="line"><span class="keyword">bool</span> result = dict.Remove(<span class="string">"2"</span>);<span class="comment">// 如果dict里包含键为“2”的元素，则result为true，否则为false</span></span><br></pre></td></tr></table></figure><p> 另一种方法：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> result = dict.Remove(<span class="string">"2"</span>, <span class="keyword">out</span> <span class="keyword">value</span>);</span><br><span class="line"><span class="comment">// 如果dict 里包含键为“2”的元素，则result 为 false且value为对应的值</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-4-3-不常用但有用的方法"><a href="#1-4-3-不常用但有用的方法" class="headerlink" title="1.4.3 不常用但有用的方法"></a>1.4.3 不常用但有用的方法</h3><ol><li><p><code>ContainsValue()</code></p><p>  是否包含值，与<code>ContainsKey</code>的用法一样，只不过遍历的是值；用处不大。</p></li><li><p><code>Values</code></p><p> 获取值的集合类似与<code>KeyValues</code>。</p></li></ol><h1 id="2-传统集合（非泛型）"><a href="#2-传统集合（非泛型）" class="headerlink" title="2. 传统集合（非泛型）"></a>2. 传统集合（非泛型）</h1><p>C#的传统集合基本都存放在<code>System.Collections</code>命名空间里，详细的可以查看<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections" target="_blank" rel="noopener">微软官方文档</a>。这个命名空间里的集合类使用都不多，不过C#的集合体系的接口规范都是在这个里面定义的。</p><h2 id="2-1-常见类介绍"><a href="#2-1-常见类介绍" class="headerlink" title="2.1 常见类介绍"></a>2.1 常见类介绍</h2><ol><li><p><code>ArrayList</code> List的非泛型版，与List操作方法一致，不过返回值是Object类型</p></li><li><p><code>SortedList</code> 一个排序的键值对集合，我没用过，不过官方给了如下示例：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SamplesSortedList</span>  &#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span>  &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates and initializes a new SortedList.</span></span><br><span class="line">SortedList mySL = <span class="keyword">new</span> SortedList();</span><br><span class="line"> mySL.Add(<span class="string">"Third"</span>, <span class="string">"!"</span>);</span><br><span class="line"> mySL.Add(<span class="string">"Second"</span>, <span class="string">"World"</span>);</span><br><span class="line"> mySL.Add(<span class="string">"First"</span>, <span class="string">"Hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Displays the properties and values of the SortedList.</span></span><br><span class="line">Console.WriteLine( <span class="string">"mySL"</span> );</span><br><span class="line">Console.WriteLine( <span class="string">"  Count:    &#123;0&#125;"</span>, mySL.Count );</span><br><span class="line">Console.WriteLine( <span class="string">"  Capacity: &#123;0&#125;"</span>, mySL.Capacity );</span><br><span class="line">Console.WriteLine( <span class="string">"  Keys and Values:"</span> );</span><br><span class="line">PrintKeysAndValues( mySL );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintKeysAndValues</span>(<span class="params"> SortedList myList </span>)</span>  &#123;</span><br><span class="line">Console.WriteLine( <span class="string">"\t-KEY-\t-VALUE-"</span> );</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.Count; i++ )  &#123;</span><br><span class="line"> Console.WriteLine( <span class="string">"\t&#123;0&#125;:\t&#123;1&#125;"</span>, myList.GetKey(i), myList.GetByIndex(i) );</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>HashTable</code>表示根据键的哈希代码进行组织的键/值对的集合。<code>HashTable</code>的结构类似于Dictionary但又与其不同，它的键值存储用的是Hash值。以下是官方给出的示例代码：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Create a new hash table.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Hashtable openWith = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add some elements to the hash table. There are no </span></span><br><span class="line"><span class="comment">// duplicate keys, but some of the values are duplicates.</span></span><br><span class="line">openWith.Add(<span class="string">"txt"</span>, <span class="string">"notepad.exe"</span>);</span><br><span class="line">openWith.Add(<span class="string">"bmp"</span>, <span class="string">"paint.exe"</span>);</span><br><span class="line">openWith.Add(<span class="string">"dib"</span>, <span class="string">"paint.exe"</span>);</span><br><span class="line">openWith.Add(<span class="string">"rtf"</span>, <span class="string">"wordpad.exe"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Add method throws an exception if the new key is </span></span><br><span class="line"><span class="comment">// already in the hash table.</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">openWith.Add(<span class="string">"txt"</span>, <span class="string">"winword.exe"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"An element with Key = \"txt\" already exists."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Item property is the default property, so you </span></span><br><span class="line"><span class="comment">// can omit its name when accessing elements. </span></span><br><span class="line">Console.WriteLine(<span class="string">"For key = \"rtf\", value = &#123;0&#125;."</span>, openWith[<span class="string">"rtf"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The default Item property can be used to change the value</span></span><br><span class="line"><span class="comment">// associated with a key.</span></span><br><span class="line">openWith[<span class="string">"rtf"</span>] = <span class="string">"winword.exe"</span>;</span><br><span class="line">Console.WriteLine(<span class="string">"For key = \"rtf\", value = &#123;0&#125;."</span>, openWith[<span class="string">"rtf"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If a key does not exist, setting the default Item property</span></span><br><span class="line"><span class="comment">// for that key adds a new key/value pair.</span></span><br><span class="line">openWith[<span class="string">"doc"</span>] = <span class="string">"winword.exe"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ContainsKey can be used to test keys before inserting </span></span><br><span class="line"><span class="comment">// them.</span></span><br><span class="line"><span class="keyword">if</span> (!openWith.ContainsKey(<span class="string">"ht"</span>))</span><br><span class="line">&#123;</span><br><span class="line">openWith.Add(<span class="string">"ht"</span>, <span class="string">"hypertrm.exe"</span>);</span><br><span class="line">Console.WriteLine(<span class="string">"Value added for key = \"ht\": &#123;0&#125;"</span>, openWith[<span class="string">"ht"</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// When you use foreach to enumerate hash table elements,</span></span><br><span class="line"><span class="comment">// the elements are retrieved as KeyValuePair objects.</span></span><br><span class="line">Console.WriteLine();</span><br><span class="line"><span class="keyword">foreach</span>( DictionaryEntry de <span class="keyword">in</span> openWith )</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"Key = &#123;0&#125;, Value = &#123;1&#125;"</span>, de.Key, de.Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// To get the values alone, use the Values property.</span></span><br><span class="line">ICollection valueColl = openWith.Values;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The elements of the ValueCollection are strongly typed</span></span><br><span class="line"><span class="comment">// with the type that was specified for hash table values.</span></span><br><span class="line">Console.WriteLine();</span><br><span class="line"><span class="keyword">foreach</span>( <span class="keyword">string</span> s <span class="keyword">in</span> valueColl )</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"Value = &#123;0&#125;"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// To get the keys alone, use the Keys property.</span></span><br><span class="line">ICollection keyColl = openWith.Keys;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The elements of the KeyCollection are strongly typed</span></span><br><span class="line"><span class="comment">// with the type that was specified for hash table keys.</span></span><br><span class="line">Console.WriteLine();</span><br><span class="line"><span class="keyword">foreach</span>( <span class="keyword">string</span> s <span class="keyword">in</span> keyColl )</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"Key = &#123;0&#125;"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the Remove method to remove a key/value pair.</span></span><br><span class="line">Console.WriteLine(<span class="string">"\nRemove(\"doc\")"</span>);</span><br><span class="line">openWith.Remove(<span class="string">"doc"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!openWith.ContainsKey(<span class="string">"doc"</span>))</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"Key \"doc\" is not found."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This code example produces the following output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">An element with Key = "txt" already exists.</span></span><br><span class="line"><span class="comment">For key = "rtf", value = wordpad.exe.</span></span><br><span class="line"><span class="comment">For key = "rtf", value = winword.exe.</span></span><br><span class="line"><span class="comment">Value added for key = "ht": hypertrm.exe</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Key = dib, Value = paint.exe</span></span><br><span class="line"><span class="comment">Key = txt, Value = notepad.exe</span></span><br><span class="line"><span class="comment">Key = ht, Value = hypertrm.exe</span></span><br><span class="line"><span class="comment">Key = bmp, Value = paint.exe</span></span><br><span class="line"><span class="comment">Key = rtf, Value = winword.exe</span></span><br><span class="line"><span class="comment">Key = doc, Value = winword.exe</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Value = paint.exe</span></span><br><span class="line"><span class="comment">Value = notepad.exe</span></span><br><span class="line"><span class="comment">Value = hypertrm.exe</span></span><br><span class="line"><span class="comment">Value = paint.exe</span></span><br><span class="line"><span class="comment">Value = winword.exe</span></span><br><span class="line"><span class="comment">Value = winword.exe</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Key = dib</span></span><br><span class="line"><span class="comment">Key = txt</span></span><br><span class="line"><span class="comment">Key = ht</span></span><br><span class="line"><span class="comment">Key = bmp</span></span><br><span class="line"><span class="comment">Key = rtf</span></span><br><span class="line"><span class="comment">Key = doc</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Remove("doc")</span></span><br><span class="line"><span class="comment">Key "doc" is not found.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p> 虽然C#框架保留了非泛型集合元素，但不建议使用非泛型集合进行开发。</p></li></ol><h1 id="3-一些不常用的集合类"><a href="#3-一些不常用的集合类" class="headerlink" title="3 一些不常用的集合类"></a>3 一些不常用的集合类</h1><p>除了之前所说的几个集合类，C#还设置了一些在开发中不常用但在特定场合很有用的集合类。</p><h2 id="3-1-Queue-lt-T-gt-和-Queue"><a href="#3-1-Queue-lt-T-gt-和-Queue" class="headerlink" title="3.1 Queue&lt;T&gt; 和 Queue"></a>3.1 <code>Queue&lt;T&gt;</code> 和 <code>Queue</code></h2><p>这两个类是一对的，一个是泛型类，一个是非泛型类。该类中文名称是队列，如其名，队列讲究一个先进先出，所以队列每次取元素都是从头取，存放是放到队列尾。<br>操作代码如下：</p><ol><li><p>加入队列</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = <span class="keyword">new</span> Queue();</span><br><span class="line">queue.Enqueue(<span class="number">1</span>);</span><br><span class="line">queue.Enqueue(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="keyword">string</span>&gt; queue1 = <span class="keyword">new</span> Queue&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">queue1.Enqueue(<span class="string">"stri"</span>);<span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>读取队首的元素<br> 读取有两种：</p><ul><li><p>读取但不移除元素：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> obj= queue.Peek();</span><br><span class="line"><span class="keyword">string</span> str = queue.Peek();</span><br></pre></td></tr></table></figure></li><li><p>读取并移除元素：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> obj = queue.Dequeue();</span><br><span class="line"><span class="keyword">string</span> str = queue.Dequeue();</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>Count 获取元素数量</li></ol></li></ol><h2 id="3-2-LinkedList-lt-T-gt"><a href="#3-2-LinkedList-lt-T-gt" class="headerlink" title="3.2 LinkedList&lt;T&gt;"></a>3.2 <code>LinkedList&lt;T&gt;</code></h2><p><code>LinkedList</code>，链表。与List不同的地方是，<code>LinkedList</code>的元素是<code>LinkedListNode</code>对象，该对象有四个属性，分别是<code>List</code><br>-指向列表对象，<code>Previous</code>指向前一个对象如果有的话，<code>Next</code>指向后一个对象如果有的话。所以根据元素的属性可以发现链表的工作方式，链表就像一条锁链一样，一个元素分三块，一个指向前一个元素，一个用来存放值，一个指向下一个元素，简单如下图所示：<br><img src="http://images.attachie.club/FhF7lm4AZoMR7ULClGayEdDOL9cW" alt="file"><br>所以可以明显的发现<code>LinkedList</code>在随机插取上比一般的要快，因为它不用维护一个数组，但是在查找和坐标操作上明显要慢很多。<br><code>LinkedList</code>简单介绍这么多，可以看看它的一些常见操作：</p><ol><li><p><code>First</code> 第一个元素</p><p> 获取第一个元素</p></li><li><p><code>Last</code> 最后一个元素</p><p> 获取最后一个元素</p></li><li><p><code>AddAfter</code>/<code>AddBefore</code><br> 在某个节点后/在某个节点前插入数据<br> 支持以下参数列表：</p><ul><li><p>(LinkedListNode<T> node, T value)</p></li><li><p>(LinkedListNode<T> node, LinkedListNode<T> newNode)</p><p>第一个参数表示要插入的节点位置，第二个表示要插入的节点/元素。第一个参数会校验是否属于该链表，如果不属于则会抛出一个异常。第二个可以是值，也可以是初始化好的节点对象。如果是节点对象，则判断是否归属其他链表，如果是其他链表抛出异常。</p></li></ul></li><li><p><code>AddFirst</code>/<code>AddLast</code></p><p> 添加元素到头或者尾，可以使用<code>LinkedListNode</code>或者添加值。</p></li><li><p><code>Remove</code></p><p> 删除，可以传递某个节点，或者要删除的节点里存放的值。</p></li><li><p><code>RemoveFirst</code>/<code>RemoveLast</code><br> 删除第一个节点，删除最后一个节点，不含参数</p></li></ol><p>下面是微软官方的一些示例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Create the link list.</span></span><br><span class="line">        <span class="keyword">string</span>[] words =</span><br><span class="line">            &#123; <span class="string">"the"</span>, <span class="string">"fox"</span>, <span class="string">"jumps"</span>, <span class="string">"over"</span>, <span class="string">"the"</span>, <span class="string">"dog"</span> &#125;;</span><br><span class="line">        LinkedList&lt;<span class="keyword">string</span>&gt; sentence = <span class="keyword">new</span> LinkedList&lt;<span class="keyword">string</span>&gt;(words);</span><br><span class="line">        Display(sentence, <span class="string">"The linked list values:"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"sentence.Contains(\"jumps\") = &#123;0&#125;"</span>,</span><br><span class="line">            sentence.Contains(<span class="string">"jumps"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the word 'today' to the beginning of the linked list.</span></span><br><span class="line">        sentence.AddFirst(<span class="string">"today"</span>);</span><br><span class="line">        Display(sentence, <span class="string">"Test 1: Add 'today' to beginning of the list:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Move the first node to be the last node.</span></span><br><span class="line">        LinkedListNode&lt;<span class="keyword">string</span>&gt; mark1 = sentence.First;</span><br><span class="line">        sentence.RemoveFirst();</span><br><span class="line">        sentence.AddLast(mark1);</span><br><span class="line">        Display(sentence, <span class="string">"Test 2: Move first node to be last node:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change the last node to 'yesterday'.</span></span><br><span class="line">        sentence.RemoveLast();</span><br><span class="line">        sentence.AddLast(<span class="string">"yesterday"</span>);</span><br><span class="line">        Display(sentence, <span class="string">"Test 3: Change the last node to 'yesterday':"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Move the last node to be the first node.</span></span><br><span class="line">        mark1 = sentence.Last;</span><br><span class="line">        sentence.RemoveLast();</span><br><span class="line">        sentence.AddFirst(mark1);</span><br><span class="line">        Display(sentence, <span class="string">"Test 4: Move last node to be first node:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Indicate the last occurence of 'the'.</span></span><br><span class="line">        sentence.RemoveFirst();</span><br><span class="line">        LinkedListNode&lt;<span class="keyword">string</span>&gt; current = sentence.FindLast(<span class="string">"the"</span>);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 5: Indicate last occurence of 'the':"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add 'lazy' and 'old' after 'the' (the LinkedListNode named current).</span></span><br><span class="line">        sentence.AddAfter(current, <span class="string">"old"</span>);</span><br><span class="line">        sentence.AddAfter(current, <span class="string">"lazy"</span>);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 6: Add 'lazy' and 'old' after 'the':"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Indicate 'fox' node.</span></span><br><span class="line">        current = sentence.Find(<span class="string">"fox"</span>);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 7: Indicate the 'fox' node:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add 'quick' and 'brown' before 'fox':</span></span><br><span class="line">        sentence.AddBefore(current, <span class="string">"quick"</span>);</span><br><span class="line">        sentence.AddBefore(current, <span class="string">"brown"</span>);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 8: Add 'quick' and 'brown' before 'fox':"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep a reference to the current node, 'fox',</span></span><br><span class="line">        <span class="comment">// and to the previous node in the list. Indicate the 'dog' node.</span></span><br><span class="line">        mark1 = current;</span><br><span class="line">        LinkedListNode&lt;<span class="keyword">string</span>&gt; mark2 = current.Previous;</span><br><span class="line">        current = sentence.Find(<span class="string">"dog"</span>);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 9: Indicate the 'dog' node:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The AddBefore method throws an InvalidOperationException</span></span><br><span class="line">        <span class="comment">// if you try to add a node that already belongs to a list.</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Test 10: Throw exception by adding node (fox) already in the list:"</span>);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            sentence.AddBefore(current, mark1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InvalidOperationException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Exception message: &#123;0&#125;"</span>, ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove the node referred to by mark1, and then add it</span></span><br><span class="line">        <span class="comment">// before the node referred to by current.</span></span><br><span class="line">        <span class="comment">// Indicate the node referred to by current.</span></span><br><span class="line">        sentence.Remove(mark1);</span><br><span class="line">        sentence.AddBefore(current, mark1);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 11: Move a referenced node (fox) before the current node (dog):"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove the node referred to by current.</span></span><br><span class="line">        sentence.Remove(current);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 12: Remove current node (dog) and attempt to indicate it:"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the node after the node referred to by mark2.</span></span><br><span class="line">        sentence.AddAfter(mark2, current);</span><br><span class="line">        IndicateNode(current, <span class="string">"Test 13: Add node removed in test 11 after a referenced node (brown):"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The Remove method finds and removes the</span></span><br><span class="line">        <span class="comment">// first node that that has the specified value.</span></span><br><span class="line">        sentence.Remove(<span class="string">"old"</span>);</span><br><span class="line">        Display(sentence, <span class="string">"Test 14: Remove node that has the value 'old':"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When the linked list is cast to ICollection(Of String),</span></span><br><span class="line">        <span class="comment">// the Add method adds a node to the end of the list.</span></span><br><span class="line">        sentence.RemoveLast();</span><br><span class="line">        ICollection&lt;<span class="keyword">string</span>&gt; icoll = sentence;</span><br><span class="line">        icoll.Add(<span class="string">"rhinoceros"</span>);</span><br><span class="line">        Display(sentence, <span class="string">"Test 15: Remove last node, cast to ICollection, and add 'rhinoceros':"</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">"Test 16: Copy the list to an array:"</span>);</span><br><span class="line">        <span class="comment">// Create an array with the same number of</span></span><br><span class="line">        <span class="comment">// elements as the inked list.</span></span><br><span class="line">        <span class="keyword">string</span>[] sArray = <span class="keyword">new</span> <span class="keyword">string</span>[sentence.Count];</span><br><span class="line">        sentence.CopyTo(sArray, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> s <span class="keyword">in</span> sArray)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Release all the nodes.</span></span><br><span class="line">        sentence.Clear();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.WriteLine(<span class="string">"Test 17: Clear linked list. Contains 'jumps' = &#123;0&#125;"</span>,</span><br><span class="line">            sentence.Contains(<span class="string">"jumps"</span>));</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params">LinkedList&lt;<span class="keyword">string</span>&gt; words, <span class="keyword">string</span> test</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(test);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> word <span class="keyword">in</span> words)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(word + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">IndicateNode</span>(<span class="params">LinkedListNode&lt;<span class="keyword">string</span>&gt; node, <span class="keyword">string</span> test</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(test);</span><br><span class="line">        <span class="keyword">if</span> (node.List == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Node '&#123;0&#125;' is not in the list.\n"</span>,</span><br><span class="line">                node.Value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">"("</span> + node.Value + <span class="string">")"</span>);</span><br><span class="line">        LinkedListNode&lt;<span class="keyword">string</span>&gt; nodeP = node.Previous;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (nodeP != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.Insert(<span class="number">0</span>, nodeP.Value + <span class="string">" "</span>);</span><br><span class="line">            nodeP = nodeP.Previous;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node = node.Next;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result.Append(<span class="string">" "</span> + node.Value);</span><br><span class="line">            node = node.Next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(result);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//This code example produces the following output:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//The linked list values:</span></span><br><span class="line"><span class="comment">//the fox jumps over the dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 1: Add 'today' to beginning of the list:</span></span><br><span class="line"><span class="comment">//today the fox jumps over the dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 2: Move first node to be last node:</span></span><br><span class="line"><span class="comment">//the fox jumps over the dog today</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 3: Change the last node to 'yesterday':</span></span><br><span class="line"><span class="comment">//the fox jumps over the dog yesterday</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 4: Move last node to be first node:</span></span><br><span class="line"><span class="comment">//yesterday the fox jumps over the dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 5: Indicate last occurence of 'the':</span></span><br><span class="line"><span class="comment">//the fox jumps over (the) dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 6: Add 'lazy' and 'old' after 'the':</span></span><br><span class="line"><span class="comment">//the fox jumps over (the) lazy old dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 7: Indicate the 'fox' node:</span></span><br><span class="line"><span class="comment">//the (fox) jumps over the lazy old dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 8: Add 'quick' and 'brown' before 'fox':</span></span><br><span class="line"><span class="comment">//the quick brown (fox) jumps over the lazy old dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 9: Indicate the 'dog' node:</span></span><br><span class="line"><span class="comment">//the quick brown fox jumps over the lazy old (dog)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 10: Throw exception by adding node (fox) already in the list:</span></span><br><span class="line"><span class="comment">//Exception message: The LinkedList node belongs a LinkedList.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 11: Move a referenced node (fox) before the current node (dog):</span></span><br><span class="line"><span class="comment">//the quick brown jumps over the lazy old fox (dog)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 12: Remove current node (dog) and attempt to indicate it:</span></span><br><span class="line"><span class="comment">//Node 'dog' is not in the list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 13: Add node removed in test 11 after a referenced node (brown):</span></span><br><span class="line"><span class="comment">//the quick brown (dog) jumps over the lazy old fox</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 14: Remove node that has the value 'old':</span></span><br><span class="line"><span class="comment">//the quick brown dog jumps over the lazy fox</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 15: Remove last node, cast to ICollection, and add 'rhinoceros':</span></span><br><span class="line"><span class="comment">//the quick brown dog jumps over the lazy rhinoceros</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 16: Copy the list to an array:</span></span><br><span class="line"><span class="comment">//the</span></span><br><span class="line"><span class="comment">//quick</span></span><br><span class="line"><span class="comment">//brown</span></span><br><span class="line"><span class="comment">//dog</span></span><br><span class="line"><span class="comment">//jumps</span></span><br><span class="line"><span class="comment">//over</span></span><br><span class="line"><span class="comment">//the</span></span><br><span class="line"><span class="comment">//lazy</span></span><br><span class="line"><span class="comment">//rhinoceros</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Test 17: Clear linked list. Contains 'jumps' = False</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="3-3-Stack-lt-T-gt-和-Stack"><a href="#3-3-Stack-lt-T-gt-和-Stack" class="headerlink" title="3.3 Stack&lt;T&gt; 和 Stack"></a>3.3 <code>Stack&lt;T&gt;</code> 和 <code>Stack</code></h2><p><code>Stack</code>广泛的翻译是栈，是一种后进先出的集合。在一些特殊场景里，使用十分广泛。<br><code>Stack</code>有两个很重要的方法<code>Pop</code> 和<code>Push</code>，出/进。Pop 获取最后一个元素，并退出栈，Push 向栈推入一个元素。<br>具体可以参照<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.stack-1?view=netcore-3.1" target="_blank" rel="noopener">官方文档</a></p><h1 id="4-集合相关命名空间"><a href="#4-集合相关命名空间" class="headerlink" title="4 集合相关命名空间"></a>4 集合相关命名空间</h1><p>C# 的集合还有其他的一些命名空间里藏着宝贝，不过在实际开发中使用频率并不大，可以按需查看。</p><h2 id="4-1-System-Collections-Concurrent-线程安全"><a href="#4-1-System-Collections-Concurrent-线程安全" class="headerlink" title="4.1 System.Collections.Concurrent 线程安全"></a>4.1 <code>System.Collections.Concurrent</code> 线程安全</h2><p>这个命名空间，提供了一系列线程安全的集合类，当出现多线程操作集合的时候，应当使用这个命名空间的集合。名称和常用的类是一一对应的，不过只提供了<code>ConcurrentDictionary&lt;TKey,TValue&gt;</code>、<code>ConcurrentQueue&lt;T&gt;</code>、<code>ConcurrentStack&lt;T&gt;</code>等几个集合类。具体可以查看<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.concurrent?view=netcore-3.1" target="_blank" rel="noopener">官方文档</a></p><h2 id="4-2-System-Collections-Immutable-不可变集合"><a href="#4-2-System-Collections-Immutable-不可变集合" class="headerlink" title="4.2 System.Collections.Immutable 不可变集合"></a>4.2 <code>System.Collections.Immutable</code> 不可变集合</h2><p>命名空间包含用于定义不可变集合的接口和类，如果需要使用这个命名空间，则需要使用NuGet下载。</p><ul><li>共享集合，使其使用者可以确保集合永远不会发生更改。</li><li>提供多线程应用程序中的隐式线程安全（无需锁来访问集合）。</li><li>遵循函数编程做法。</li><li>在枚举过程中修改集合，同时确保该原始集合不会更改。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】JVM从入门到入土之JVM的类加载机制</title>
      <link href="/java-plus/18228.html"/>
      <url>/java-plus/18228.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>偶然间发现的一个JVM系列文章，初看一下感觉很有意思。</p><footer><strong>掘金，六脉神剑</strong><cite><a href="https://juejin.im/post/5e1aaf626fb9a0301d11ac8e" target="_blank" rel="noopener">JVM从入门到入土之JVM的类加载机制</a></cite></footer></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>文本已收录至我的GitHub仓库，欢迎Star：<a href="https://github.com/bin392328206/six-finger" target="_blank" rel="noopener">github.com/bin39232820…</a><br/><br><strong>种一棵树最好的时间是十年前，其次是现在</strong><br/><br>我知道很多人不玩<strong>qq</strong>了,但是怀旧一下,欢迎加入六脉神剑Java菜鸟学习群，群聊号码：<strong>549684836</strong> 鼓励大家在技术的路上写博客</p></blockquote><h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>学Java的没办法都逃不过Java虚拟机的，所以这个系列是必须讲的，因为你要构建你的Java知识体系，你就肯定知道要怎么按步骤学，对于JVM的学习我也自己的一个小规划吧，从JVM介绍,然后，Java文件编程成.class文件，然后Java虚拟机怎么加载这写.class文件，加载到虚拟机之后，这些数据怎么再Java虚拟机中存储，存储之后我们知道Java是自动回收垃圾，不像C C++那样，那我们我们肯定得知道垃圾回收算法，和垃圾回收器，最后到真正的一个Java系统的JVM调优，这个就是我打算要讲的这个系列，然后我大多数类容参考周志明老师的深入理解Java虚拟机</p><a id="more"></a><p><img src="http://images.attachie.club/FomwObHkZVV1ZXcpeIH0MPzpFF3H" alt="file"></p><h2 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h2><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。 JVM屏蔽了与具体操作系统平台相关的信息，使Java程序只需生成在Java虚拟机上运行的目标代码（字节码）,就可以在多种平台上不加修改地运行。JVM在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行 ,是Java跨平台的原因。</p><h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h2><p><img src="http://images.attachie.club/FrSSELJHVMM00A1IWV7siSd4Wj6B" alt="file"></p><p>这个是我从oracle官网截图的，从中可以看出JDK=JRE+一些工具，JRE里面包含了JVM(Java虚拟机)</p><h2 id="JVM总体概述"><a href="#JVM总体概述" class="headerlink" title="JVM总体概述"></a>JVM总体概述</h2><p>JVM总体上是由</p><ul><li>类装载子系统（ClassLoader）</li><li>运行时数据区</li><li>执行引擎</li><li>内存回收</li><li>类文件结构</li></ul><p>以上5个部分组成，每一个都是非常重要的，如果你要了解JVM，要学习JVM调优，那么只能是一个个去把他们啃了</p><h2 id="什么是类加载机制"><a href="#什么是类加载机制" class="headerlink" title="什么是类加载机制"></a>什么是类加载机制</h2><p>书上的原话：</p><blockquote><p>虚拟机把描述类的数据从Class文件加载到内存，并对这些数据进行校验，转换 解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制</p></blockquote><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的生命周期包括</p><ul><li>加载</li><li>验证</li><li>准备</li><li>解析</li><li>初始化</li><li>使用</li><li>卸载</li></ul><p>总共是7个阶段</p><p><img src="http://images.attachie.club/FvVw3tdQyzP_2Xs7rfhiDUC8DxHQ" alt="file"></p><h2 id="理解类加载三个字"><a href="#理解类加载三个字" class="headerlink" title="理解类加载三个字"></a>理解类加载三个字</h2><p>首先 类 是指的.Class文件类，那么怎么生成这个文件呢？</p><ul><li>Java代码编译</li><li>原本就是.Class 文件</li><li>动态代理生成</li></ul><p>等等 还有很多</p><p>那么 加载 这2个字应该怎么理解呢 大家可以看下图</p><p><img src="http://images.attachie.club/Fj55MVOqVLe1vTEH17_8eLq3E6TN" alt="file"></p><p>本地的.Class文件通过类加载器加载到JVM内存中的方法区里面，然后通过这个对象来访问数据区的数据</p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流代表的静态存储结构转化成方法区的二进制字节流</li><li>再内存的方法区生成这个类的Java.lang.Class对象，作为这个类各个数据访问的入口</li></ol><h2 id="五种必须初始化的情况"><a href="#五种必须初始化的情况" class="headerlink" title="五种必须初始化的情况"></a>五种必须初始化的情况</h2><p>Java并没用规定生命时候进行类加载的第一阶段，但是对于初始化阶段，虚拟机有严格的规范</p><ul><li>遇到new 关键字的时候</li><li>使用reflect包的方法的时候</li><li>当初始化一个类的时候发现父类还没初始化，必须先初始化父类</li><li>当虚拟机启动的时候，加载main方法的类</li><li>当使用1.7的动态语言支持的时候（这块没有接触过，有没有大佬懂的）</li></ul><h2 id="验证阶段"><a href="#验证阶段" class="headerlink" title="验证阶段"></a>验证阶段</h2><p>分为以下几种样装情况</p><ul><li>文件格式的验证，验证当前字节流是否能被JVM识别</li><li>元数据的验证，验证它的父类，它的继承，是否是抽象类等</li><li>字节码验证，验证逻辑是否合理</li><li>符合引用的验证 验证是否能通过生成的Class对象找到对应的数据</li></ul><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p><p>1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p><p>2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p><p>假设一个类变量的定义为：</p><p>public static int value = 3；</p><p>那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</p><p>下表列出了Java中所有基本数据类型以及reference类型的默认零值：</p><p><img src="http://images.attachie.club/Foyo9YX3DelamBfil348Q4c2nEyi" alt="file"></p><p>这里还需要注意如下几点：</p><ul><li>对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而- 对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</li><li>对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</li><li>对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</li><li>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</li></ul><p>如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。</p><h2 id="解析阶段"><a href="#解析阶段" class="headerlink" title="解析阶段"></a>解析阶段</h2><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程<br>##初始化阶段<br>到了初始化阶段，才真正开始执行类中定义的Java代码</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>站在Java虚拟机的角度来讲，只存在两种不同的类加载器：</p><ul><li>启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分。</li><li>所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</li></ul><p>站在Java开发人员的角度来看，类加载器可以大致划分为以下四类：</p><ul><li>启动类加载器 （C实现）</li><li>扩展类加载器  (ClassLoader)</li><li>应用程序加载器 (ClassLoader)</li><li>自定义加载器 (ClassLoader)</li></ul><p>这几种类加载器的层次关系如下图所示：</p><p><img src="http://images.attachie.club/FnhsqiwKdRSmT6ST82opBY6m7AsZ" alt="file"></p><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>类加载器之间的这种层次关系叫做双亲委派模型。<br>双亲委派模型要求除了顶层的启动类加载器（Bootstrap ClassLoader）外，其余的类加载器都应当有自己的父类加载器。这里的类加载器之间的父子关系一般不是以继承关系实现的，而是用组合实现的。</p><h2 id="双亲委派模型的工作过程"><a href="#双亲委派模型的工作过程" class="headerlink" title="双亲委派模型的工作过程"></a>双亲委派模型的工作过程</h2><p>由我来概况就是 八个字 <strong>向上检查，从下加载</strong><br/><br>如果一个类接受到类加载请求，他自己不会去加载这个请求，而是将这个类加载请求委派给父类加载器，这样一层一层传送，直到到达启动类加载器（Bootstrap ClassLoader）。<br>只有当父类加载器无法加载这个请求时，子加载器才会尝试自己去加载。</p><h2 id="双亲委派模型的代码实现"><a href="#双亲委派模型的代码实现" class="headerlink" title="双亲委派模型的代码实现"></a>双亲委派模型的代码实现</h2><p>双亲委派模型的代码实现集中在java.lang.ClassLoader的loadClass()方法当中。</p><ul><li>首先检查类是否被加载，没有则调用父类加载器的loadClass()方法；</li><li>若父类加载器为空，则默认使用启动类加载器作为父加载器；<li>若父类加载失败，抛出ClassNotFoundException 异常后，再调用自己的findClass() 方法。loadClass源代码如下：</li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&amp;lt;?&amp;gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//1 首先检查类是否被加载</span></span><br><span class="line">    Class c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//2 没有则调用父类加载器的loadClass()方法；</span></span><br><span class="line">                c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//3 若父类加载器为空，则默认使用启动类加载器作为父加载器；</span></span><br><span class="line">                c = findBootstrapClass0(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           <span class="comment">//4 若父类加载失败，抛出ClassNotFoundException 异常后，这个方法就是加载的核心代码</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">        <span class="comment">//5 再调用自己的findClass() 方法。</span></span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">NetworkClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">*         String host;</span><br><span class="line">*         <span class="keyword">int</span> port;</span><br><span class="line">*</span><br><span class="line">*         <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">*             <span class="keyword">byte</span>[] b = loadClassData(name);</span><br><span class="line">*             <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">*         &#125;</span><br><span class="line">*</span><br><span class="line">*         <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">*             <span class="comment">// load the class data from the connection</span></span><br><span class="line">*             &amp;amp;nbsp;.&amp;amp;nbsp;.&amp;amp;nbsp;.</span><br><span class="line">*         &#125;</span><br><span class="line">*     &#125;</span><br></pre></td></tr></table></figure><p>这个就是官方的例子</p><p><img src="http://images.attachie.club/FmdVtdRYaMSWQiGQMnEdooWDEGwA" alt="file"></p><h2 id="破环双亲委派"><a href="#破环双亲委派" class="headerlink" title="破环双亲委派"></a>破环双亲委派</h2><p>双亲委派模型很好的解决了各个类加载器加载基础类的统一性问题。即越基础的类由越上层的加载器进行加载。<br>若加载的基础类中需要回调用户代码，而这时顶层的类加载器无法识别这些用户代码，怎么办呢？这时就需要破坏双亲委派模型了。</p><p>java默认的线程上下文类加载器是系统类加载器(AppClassLoader).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Now create the class loader to use to launch the application    </span></span><br><span class="line">   <span class="keyword">try</span> &#123;    </span><br><span class="line">       loader = AppClassLoader.getAppClassLoader(extcl);    </span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;    </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(    </span><br><span class="line">   <span class="string">"Could not create application class loader"</span> );    </span><br><span class="line">   &#125;    </span><br><span class="line">        </span><br><span class="line">   <span class="comment">// Also set the context class loader for the primordial thread.    </span></span><br><span class="line">  Thread.currentThread().setContextClassLoader(loader);</span><br></pre></td></tr></table></figure><p>以上代码摘自sun.misc.Launch的无参构造函数Launch()。</p><p>使用线程上下文类加载器,可以在执行线程中,抛弃双亲委派加载链模式,使用线程上下文里的类加载器加载类.</p><p>典型的例子有,通过线程上下文来加载第三方库jndi实现,而不依赖于双亲委派.</p><p>大部分java app服务器(jboss, tomcat..)也是采用contextClassLoader来处理web服务。</p><p><img src="http://images.attachie.club/FpVoEfh5QzRjqDtJaCfJ_Zf5fH_B" alt="file"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>今天把类加载机制好好讲了一下，这样大家就更加的熟悉了内的加载过程，对于Java开发是有好处的</p><h2 id="日常求赞"><a href="#日常求赞" class="headerlink" title="日常求赞"></a>日常求赞</h2><blockquote><p>好了各位，以上就是这篇文章的全部内容了，能看到这里的人呀，都是<strong>真粉</strong>。</p></blockquote><blockquote><p>创作不易，各位的支持和认可，就是我创作的最大动力，我们下篇文章见</p></blockquote><blockquote><p>六脉神剑 | 文 【原创】如果本篇博客有任何错误，请批评指教，不胜感激 ！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】 Linux-包教包会系列</title>
      <link href="/Linux/26159.html"/>
      <url>/Linux/26159.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单的Linux入门教程</p><footer><strong>张攀钦</strong><cite><a href="https://juejin.im/post/5e7602716fb9a07c7d0081e8" target="_blank" rel="noopener">Linux-包教包会系列</a></cite></footer></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前我的不喜欢用 <code>Linux</code> 系统，什么目录啊，文件啊，权限啊，都得命令操作，入门难度较大。但是一旦熟练起来，真不想再去用 <code>windows</code> 了。再加上 <code>shell</code> 脚本，那才叫如虎添翼啊，真的是见识到了什么才是性能，什么才是自动化。</p><p><code>Linux</code> 相较于 <code>windows</code> 而言，占用内存更小，因为 windows 的图形化界面比较占内存。<code>Linux</code> 的生态也比较丰富，各种各样的服务端软件都会有 <code>Linux</code> 版本。<code>Linux</code> 也衍生出各种格言的版本，我用的比较多的是 <code>Centos</code></p><p>在 Linux 中，一切皆文件。所以各种目录、文件的权限、创建者、所属组都是比较实用的东西。</p><p>本文内容基于<font color="red"> <code>Centos 7.4</code></font> 版本。</p><p>主要内容:</p><ul><li>linux 目录说明</li><li>PATH 加载的原理及配置</li><li>常用简单命令</li><li>sed,awk,find,管道流,重定向,scp<a id="more"></a><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2></li></ul><p>Linux 中的目录还是要清楚的，有一些约定成俗的规定需要大家了解。</p><p>目录只介绍一些重要常用的。大致了解什么作用即可。</p><img alt="image-20200320134926002" class="lazyload" data-height="897" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf92772912f1?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1280"/><img alt="190301204277681" class="lazyload" data-height="390" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf92aee924bf?imageView2/0/w/1280/h/960/ignore-error/1" data-width="705"/><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录-/"></a>根目录-<code>/</code></h3><p>根目录下面有许多子目录 <code>bin</code> <code>etc</code> <code>home</code> <code>opt</code> <code>usr</code> <code>sbin</code> <code>var</code> <code>tmp</code> 等等。</p><h3 id="root"><a href="#root" class="headerlink" title="/root"></a><code>/root</code></h3><p>是用户 <code>root</code> 的家目录。</p><h3 id="home"><a href="#home" class="headerlink" title="/home"></a><code>/home</code></h3><p>除 <code>root</code> 用户之外的其它的用户家目录。<code>cd ~</code> 就是进入当前用户的家目录。 </p><h3 id="bin"><a href="#bin" class="headerlink" title="/bin"></a><code>/bin</code></h3><p><code>/bin</code> 实际是个软连接（理解为 windows 的快捷方式），链接到 <code>/usr/bin</code>。里面都是一些二进制的执行文件。我们常用的 <code>yum</code> <code>su</code> <code>sudo</code> <code>cp</code> 都在这个目录下。通常我们安装的程序，可以在这里访问到。</p><h3 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a><code>/sbin</code></h3><p><code>s</code> 指 Spuer user。</p><p><code>/sbin</code> 也是一个软连接，链接到 <code>/usr/sbin</code> 存放二进制文件，管理员可执行的命令。</p><h3 id="etc"><a href="#etc" class="headerlink" title="/etc"></a><code>/etc</code></h3><p><code>/etc</code>  为配置文件所在路径。比如 <code>/etc/nginx</code> 存放 <code>nginx</code> 的配置文件。</p><h3 id="usr"><a href="#usr" class="headerlink" title="/usr"></a><code>/usr</code></h3><p><code>usr</code> 为 <code>unix system resources</code> 简写。表示系统资源的路径。</p><h4 id="usr-bin"><a href="#usr-bin" class="headerlink" title="/usr/bin"></a><code>/usr/bin</code></h4><p>所有用户的都可访问的二进制命令，不包括系统管理员的命令。</p><h4 id="usr-share"><a href="#usr-share" class="headerlink" title="/usr/share"></a><code>/usr/share</code></h4><p>包含共享数据。比如 <code>/usr/share/nginx</code> 为 nginx 存放的静态资源。</p><h4 id="usr-local"><a href="#usr-local" class="headerlink" title="/usr/local"></a><code>/usr/local</code></h4><p>从源码编译安装的程序安装到这里。</p><h4 id="usr-src"><a href="#usr-src" class="headerlink" title="/usr/src"></a><code>/usr/src</code></h4><p>系统内核 <code>kernel</code>  源码位置。</p><h3 id="var"><a href="#var" class="headerlink" title="/var"></a><code>/var</code></h3><p>程序运行产生的缓存文件，锁文件，pid 文件，日志文件等会在这个目录，一些经常会变化的内容保存的位置。</p><h2 id="命令执行的优先级"><a href="#命令执行的优先级" class="headerlink" title="命令执行的优先级"></a>命令执行的优先级</h2><p>我们经常用 <code>pwd</code> 获取当前目录路径，如果我自己写个 shell 脚本，命名为 <code>pwd</code>,将其加入到  <code>PATH</code> 中，那二者谁会执行呢？</p><p>这就是为什么要了解命令的优先级了。</p><h3 id="命令优先级"><a href="#命令优先级" class="headerlink" title="命令优先级"></a>命令优先级</h3><p>第一优先级：指定路径的命令。绝对路径 <code>/home/parallels/a.sh</code> 或者相对路径 <code>./a.sh</code>。</p><p>第二优先级：别名指定的命令 <code>alias pwd=/home/parallels/a.sh</code></p><p>第三优先级：内部命令(pwd)</p><p>第四优先级：hash 命令</p><p>第五优先级：通过 <code>PATH</code> 定义的查找顺序查找</p><p>如果以上顺序都找不到，就会报 <code>未找到命令...</code> 的错误。</p><p>通过 <code>type command</code> 可以查看 command 命令类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># clear 已被哈希 (&#x2F;usr&#x2F;bin&#x2F;clear)，clear 哈希命令</span><br><span class="line">type clear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># pwd 是 shell 内嵌。pwd 是内嵌命令。</span><br><span class="line">type pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># java 是 &#x2F;usr&#x2F;bin&#x2F;java，java 是通过 PATH 寻找到的命令。</span><br><span class="line">type java复制代码</span><br></pre></td></tr></table></figure><p><code>alias pwd=/home/parallels/a.sh</code> 通过改写 <code>pwd</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># a.sh</span><br><span class="line">echo 11复制代码</span><br></pre></td></tr></table></figure><p>当我执行 <code>pwd</code> 的时候，命令运行的是 <code>a.sh</code></p><h2 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h2><h3 id="PATH-生效的原理"><a href="#PATH-生效的原理" class="headerlink" title="PATH 生效的原理"></a>PATH 生效的原理</h3><p><font color="red">启动终端的时候会初始化命令，会加载 <code>/etc/profile</code> 和 <code>~/.bash_profile</code> </font></p><p><code>/etc/profile</code> 会将路径加载<code>/usr/local/bin</code> 、<code>/usr/bin</code>、<code>/usr/local/sbin</code> 、<code>/usr/sbin</code> 追加到 PATH 中去。然后将  <code>/etc/profile.d/*.sh</code> 进行初始化。</p><p><code>~</code>对应当前登录用户的用户空间。比如我用 <code>flyu</code> 操作当前 shell，那么<code>~</code> 等于 <code>/home/flyu</code></p><p><code>~/.bash_profile</code> 会判断 <code>~/.bashrc</code> 存在吗，存在会运行它。</p><p><code>~/.bashrc</code> 中会判断 <code>/etc/bashrc</code> 存在吗，存在会运行它。</p><p><code>/ect/bashrc</code> 将  <code>/etc/profile.d/*.sh</code> 进行初始化。</p><h3 id="PATH-全局配置"><a href="#PATH-全局配置" class="headerlink" title="PATH 全局配置"></a>PATH 全局配置</h3><p>基于以上的理解，<font color="red">全局命令配置建议直接在 <code>/usr/bin</code>下建立软连接到你的可执行文件。</font></p><p>不要想着在 <code>/etc/profile.d/</code> 下写脚本进行配置 PATH。当脚本写错，那么你可能会配置 <code>PATH</code> 的有效性，</p><h3 id="PATH-用户配置"><a href="#PATH-用户配置" class="headerlink" title="PATH 用户配置"></a>PATH 用户配置</h3><p>用户配置 PATH 直接在 <code>~/.bashrc</code> 中追加 PATH 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH&#x3D;&quot;$&#123;PATH&#125;:&#x2F;usr&#x2F;local&#x2F;aa&quot;</span><br><span class="line">export PATH复制代码</span><br></pre></td></tr></table></figure><p>一般我们用 <code>yum</code> 安装环境已经给配置好了环境变量。</p><h2 id="系统登录"><a href="#系统登录" class="headerlink" title="系统登录"></a>系统登录</h2><p>我比较讨厌一遍一遍输入用户名和密码访问服务器。</p><p>我每次只要输入 <code>ssh mflyyou</code>  连接我的服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mflyyou.com复制代码</span><br></pre></td></tr></table></figure><h3 id="1、生成公钥私钥"><a href="#1、生成公钥私钥" class="headerlink" title="1、生成公钥私钥"></a>1、生成公钥私钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -o -t rsa  -b 4096复制代码</span><br></pre></td></tr></table></figure><img alt="img" class="lazyload" data-height="289" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf9306fe85e9?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1280"/><h3 id="2、将公钥复制到远程服务器"><a href="#2、将公钥复制到远程服务器" class="headerlink" title="2、将公钥复制到远程服务器"></a>2、将公钥复制到远程服务器</h3><p><code>.pub</code> 结尾是公钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ssh-copy-id -i &#123;公钥绝对路径&#125; &#123;远程服务器用户名&#125;@&#123;远程服务器 ip&#125;</span><br><span class="line">ssh-copy-id -i &#x2F;Users&#x2F;zhangpanqin&#x2F;.ssh&#x2F;test_local_server.pub parallels@10.211.55.8复制代码</span><br></pre></td></tr></table></figure><p>以上命令作用是，将指定的公钥内容，拷贝到远程服务器上的指定用户<code>parallels</code>下。这样以后这个用户（parallels）就可以不用输入密码登录了。</p><p>运行上述命令将公钥内容拷贝到 /home/parallels/.ssh/authorized_keys。</p><img alt="img" class="lazyload" data-height="347" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf93545f5535?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1280"/><h3 id="3、本地电脑配置私钥"><a href="#3、本地电脑配置私钥" class="headerlink" title="3、本地电脑配置私钥"></a>3、本地电脑配置私钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host mflyyou.com</span><br><span class="line">  HostName 10.211.55.8</span><br><span class="line">  AddKeysToAgent yes</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  User parallels</span><br><span class="line">  IdentityFile &#x2F;Users&#x2F;zhangpanqin&#x2F;.ssh&#x2F;test_local_server复制代码</span><br></pre></td></tr></table></figure><img alt="img" class="lazyload" data-height="274" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf9396ada584?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1122"/><p>以上配置结束，你可以 <code>ssh mflyyou.com</code> 登录远程服务器了。</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>linux 下<code>用户</code>、<code>组</code>创建和管理。可以控制哪些<code>目录</code>和<code>文件</code>可以访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建 mflyyou 用户,同时会创建 mflyyou 组</span><br><span class="line">adduser mflyyou复制代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改 mflyyou 的密码，命令之后会提示你输入密码</span><br><span class="line">passwd mflyyou复制代码</span><br></pre></td></tr></table></figure><p>创建的用户是不具有 <code>sudo</code> 提升权限的能力，需要修改 <code>/etc/sudoers</code> 使之生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 在 root 下运行，修改文件的可写性</span><br><span class="line">chmod  700 &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line"># &#x2F;etc&#x2F;sudoers 文件中填写 mflyyou ALL&#x3D;(ALL)      PASSWD:ALL</span><br><span class="line">root    ALL&#x3D;(ALL)       ALL</span><br><span class="line">mflyyou ALL&#x3D;(ALL)      PASSWD:ALL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 权限给了之后，修改文件 &#x2F;etc&#x2F;sudoers 为只读性</span><br><span class="line">chmod  400 &#x2F;etc&#x2F;sudoers复制代码</span><br></pre></td></tr></table></figure><h2 id="文件权限控制"><a href="#文件权限控制" class="headerlink" title="文件权限控制"></a>文件权限控制</h2><img alt="image-20200320212048568" class="lazyload" data-height="574" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf948bed7ad5?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1126"/><p>每行信息开头的第一个字母表示文件类型。</p><p><code>d</code> 表示目录。</p><p><code>-</code> 表示文件。</p><p><code>l</code> 表示软连接。</p><p><code>mkdir</code> 创建目录。</p><p><code>touch</code> 创建空文件。</p><p>对文件夹或文件划分权限。 4 读 r，2 编辑 w,1 执行 x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 754 &#x2F;opt&#x2F;config复制代码</span><br></pre></td></tr></table></figure><p>修改 /opt/config 所属用户、用户组、其它人的访问权限。 </p><li>所属用户：读、编辑、执行，7 </li><li>所属组：读、执行，5 </li><li>其他：读，4</li><p>修改文件夹或者文件的所属用户和用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 递归修改 &#x2F;opt&#x2F;config 的归属 admin 用户，所属 admin 组</span><br><span class="line">chown -R admin:admin  &#x2F;opt&#x2F;config 复制代码</span><br></pre></td></tr></table></figure><img alt="img" class="lazyload" data-height="551" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf961c2e0b84?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1280"/><h2 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><p>linux 分为源码包和rpm 包。源码包需要我们自己编译，然后安装，自由度比较高。rpm 包是厂商编译好的二进制包，可以类比 windows .exe 包。但 rpm 包安装的时候需要处理依赖关系。因此，yum 管理 rpm 包诞生。yum 一般需要联网，有的时候，部署的服务器没有网络，我们可以通过挂载光盘或者 U 盘搭建本地 yum 源使用。</p><p>rpm 包安装的好处之一是我们不需要配置环境变量了。包已经内置处理好了。</p><p>比如我们安装 jdk ,通过官网下载 jdk rpm 包。</p><img alt="img" class="lazyload" data-height="365" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf965bacc616?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1280"/><h4 id="rpm-包安装"><a href="#rpm-包安装" class="headerlink" title="rpm 包安装"></a>rpm 包安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">rpm -lvh 包全名复制代码</span><br></pre></td></tr></table></figure><img alt="img" class="lazyload" data-height="309" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf96b243b299?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1280"/><h4 id="卸载-rpm-包"><a href="#卸载-rpm-包" class="headerlink" title="卸载 rpm 包"></a>卸载 rpm 包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 卸载</span><br><span class="line">rpm -e 包名复制代码</span><br></pre></td></tr></table></figure><h4 id="查询安装了哪些-npm-包"><a href="#查询安装了哪些-npm-包" class="headerlink" title="查询安装了哪些 npm 包"></a>查询安装了哪些 npm 包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep nginx复制代码</span><br></pre></td></tr></table></figure><h4 id="查看安装的-rpm-包的信息"><a href="#查看安装的-rpm-包的信息" class="headerlink" title="查看安装的 rpm 包的信息"></a>查看安装的 rpm 包的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询安装包的信息</span><br><span class="line">rpm -qi 包名复制代码</span><br></pre></td></tr></table></figure><img alt="image-20200320232543119" class="lazyload" data-height="814" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf9749248f5c?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1280"/><h4 id="查找-rpm-包会安装哪些文件及位置"><a href="#查找-rpm-包会安装哪些文件及位置" class="headerlink" title="查找 rpm 包会安装哪些文件及位置"></a>查找 rpm 包会安装哪些文件及位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询包安装位置</span><br><span class="line">rpm -ql 包名复制代码</span><br></pre></td></tr></table></figure><img alt="image-20200320232309137" class="lazyload" data-height="762" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf98081803c1?imageView2/0/w/1280/h/960/ignore-error/1" data-width="1034"/><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询文件属于的安装程序</span><br><span class="line">rpm -qf 系统文件名 </span><br><span class="line"></span><br><span class="line"># 校验安装的包中的文件是否被修改</span><br><span class="line">rpm -V 包名</span><br><span class="line"></span><br><span class="line"># 升级</span><br><span class="line">rpm -Uvh 包全名复制代码</span><br></pre></td></tr></table></figure><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>国外的 yum 源速度较慢，使用ali提供了yum 源镜像，速度挺快，给阿里点赞。</p><p>yum 实际是也是安装的 <code>rpm</code> 包，只是包之间的依赖关系由 <code>rpm</code> 管理了。</p><h4 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h4><p><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.217a1b1181urQb" target="_blank" rel="noopener">阿里 Centos yum 源</a></p><p><a href="https://developer.aliyun.com/mirror/epel?spm=a2c6h.13651102.0.0.217a1b1181urQb" target="_blank" rel="noopener">阿里 epel 源</a></p><h4 id="yum-命令"><a href="#yum-命令" class="headerlink" title="yum 命令"></a>yum 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 列出一个或一组软件包</span><br><span class="line">yum list</span><br><span class="line"></span><br><span class="line"># 在软件包详细信息中搜索指定字符串</span><br><span class="line">yum search </span><br><span class="line"></span><br><span class="line"># 安装包</span><br><span class="line">yum -y install 包名</span><br><span class="line"></span><br><span class="line"># 升级包，一定要指定包，不然 linux 全局更新</span><br><span class="line">yum -y update 包名</span><br><span class="line"></span><br><span class="line"># 卸载包，尽量不卸载</span><br><span class="line">yum -y remove 包名复制代码</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>linux</code> 的命令不用刻意记，<code>-h</code> <code>-?</code> <code>man</code> 都可以查看命令的帮助信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># man，查看系统内置的命令</span><br><span class="line">man find</span><br><span class="line"></span><br><span class="line"># -h -? 一般是程序的帮助信息</span><br><span class="line">nginx -h复制代码</span><br></pre></td></tr></table></figure><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 复制 a.txt 到tmp 目录下</span><br><span class="line">cp a.txt &#x2F;tmp</span><br><span class="line"># 复制 test 目录到 &#x2F;tmp,保持文件所有特性和权限一样</span><br><span class="line">cp -r -a test &#x2F;tmp</span><br><span class="line"># 复制为软连接，快捷方式</span><br><span class="line">cp -s  a.txt &#x2F;tmp&#x2F;a.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 递归删除 test 目录及旗下内容</span><br><span class="line">rm -f -r test</span><br><span class="line"></span><br><span class="line"># 将a.txt 移动到&#x2F;tmp 下</span><br><span class="line">mv a.txt &#x2F;tmp</span><br><span class="line"></span><br><span class="line"># 创建文件夹</span><br><span class="line">mkdir b</span><br><span class="line"></span><br><span class="line"># 查看文本内容</span><br><span class="line">cat a.txt</span><br><span class="line"></span><br><span class="line"># 查看目录下内容</span><br><span class="line">ll</span><br><span class="line"># 查看目录下全部内容</span><br><span class="line">ll -a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看一个文件新生成内容，动态观看</span><br><span class="line"></span><br><span class="line">tail -f -n 10 a.txt</span><br><span class="line"></span><br><span class="line"># 有的时候，两个命令执行有 依赖关系 ，a 执行成功执行 b</span><br><span class="line"></span><br><span class="line">a &amp;&amp; b</span><br><span class="line"></span><br><span class="line"># a 执行成功与否，b 都要执行</span><br><span class="line"></span><br><span class="line">a || b复制代码</span><br></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><ul><li>创建软连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 复制为软连接，快捷方式</span><br><span class="line">cp -s  a.txt &#x2F;tmp&#x2F;a.txt复制代码</span><br></pre></td></tr></table></figure><h3 id="scp-远程拷贝"><a href="#scp-远程拷贝" class="headerlink" title="scp-远程拷贝"></a>scp-远程拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将 a 目录下的所有资源 拷贝到指定远程地址的 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; 下</span><br><span class="line">scp -rp &#x2F;a&#x2F;* 用户名@ip:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;复制代码</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>Linux shell 使用 3 种标准的 I/O 流，每种流都与一个文件描述符相关联：</p><ol><li><strong>stdout</strong> 是<strong>标准输出流</strong>，它显示来自命令的输出。它的文件描述符为 1。</li><li><strong>stderr</strong> 是<strong>标准错误流</strong>，它显示来自命令的错误输出。它的文件描述符为 2。</li><li><strong>stdin</strong> 是<strong>标准输入流</strong>，它为命令提供输入。它的文件描述符为 0。</li></ol><p><code>&amp;gt;</code> 改变输出流。<code>&amp;gt;</code> 等价于 <code>1&amp;gt;</code></p><p><code>&amp;lt;</code> 改变输入流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 改变输出流量,a.txt 不存在的情况下创建</span><br><span class="line">echo &quot;111&quot; &gt; a.txt </span><br><span class="line"></span><br><span class="line"># 有时候我们需要将标准输出流和标准错误流输入到一个文件。a.txt 存在，bb.txt 不存在。内容不会追加。</span><br><span class="line">ls a.txt bb.txt &gt; error.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"># 如果内容需要追加</span><br><span class="line">ls a.txt bb.txt &gt;&gt; error.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"># 如果不想要输出内容, 写入到 &#x2F;dev&#x2F;null 的内容都会被丢弃掉 </span><br><span class="line">ls a.txt bb.txt &gt;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1复制代码</span><br></pre></td></tr></table></figure><h3 id="管道流"><a href="#管道流" class="headerlink" title="管道流-|"></a>管道流-<code>|</code></h3><p>多个命令通过 <code>|</code> 链接，前一个命令的输出，是后一个命令的输入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat error.log  | grep &quot;a.txt&quot;复制代码</span><br></pre></td></tr></table></figure><h3 id="grep-查询文本"><a href="#grep-查询文本" class="headerlink" title="grep-查询文本"></a>grep-查询文本</h3><p>用于查询内容中符合指定格式的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 不查询指定命令</span><br><span class="line">grep -v</span><br><span class="line"></span><br><span class="line"># 忽略大小</span><br><span class="line">grep -i</span><br><span class="line"></span><br><span class="line">ps -ef | grep jail-2.0-0.0.1-SNAPSHOT.jar | grep -v grep 复制代码</span><br></pre></td></tr></table></figure><h3 id="awk-操作文本"><a href="#awk-操作文本" class="headerlink" title="awk-操作文本"></a>awk-操作文本</h3><p>对文本根据 <code>空格</code>  或者  <code>tab</code> 切割，然后根据操作获取符合条件的某行中某列的数据。</p><p><code>$n</code> 获取第几个内容，<code>$0</code> 获取当前行，<code>$NF</code> 获取最后一个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># a2</span><br><span class="line">echo &quot;a1 a2 a3&quot; | awk &#39;&#123;print $2&#125;&#39;</span><br><span class="line"></span><br><span class="line"># a3</span><br><span class="line">echo &quot;a1 a2 a3&quot; | awk &#39;&#123;print $NF&#125;&#39;</span><br><span class="line"></span><br><span class="line"># a2</span><br><span class="line">echo &quot;a1 a2 a3&quot; | awk &#39;&#123;print $(NF-1)&#125;&#39;复制代码</span><br></pre></td></tr></table></figure><p>awk 还提供一些内置函数。其余的内置函数可以查看帮助命令。</p><ul><li><code>toupper()</code>：字符转为大写。</li><li><code>tolower()</code>：字符转为小写。</li><li><code>length()</code>：返回字符串长度。</li><li><code>substr()</code>：返回子字符串。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># A2</span><br><span class="line">echo &quot;a1 a2 a3&quot; | awk &#39;&#123;print toupper($2)&#125;&#39;</span><br><span class="line"></span><br><span class="line"># a2</span><br><span class="line">echo &quot;A1 A2 A3&quot; | awk &#39;&#123;print tolower($2)&#125;&#39;</span><br><span class="line"></span><br><span class="line"># 9</span><br><span class="line">echo &quot;A1 123456789 A3&quot; | awk &#39;&#123;print length($2)&#125;&#39;</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">echo &quot;A1 123456789 A3&quot; | awk &#39;&#123;print substr($2)&#125;&#39;复制代码</span><br></pre></td></tr></table></figure><p>指定分隔符使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># A2</span><br><span class="line">echo &quot;a1:a2:a3&quot; | awk -F: &#39;&#123;print toupper($2)&#125;&#39;复制代码</span><br></pre></td></tr></table></figure><p>使用条件进行筛选。</p><p>log.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a1 a2 a3 a4</span><br><span class="line">bb1 bb2 bb3 bb4</span><br><span class="line">ccc1 ccc2 ccc3 ccc4复制代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取每行第一列内容</span><br><span class="line">awk &#39;&#123;print $1&#125;&#39; a.txt</span><br><span class="line"></span><br><span class="line"># 获取每行第一列，字符长度大于 2 的，只有第二和第三行的打印出来了。bb1,ccc1</span><br><span class="line">awk &#39;length($1) &gt; 2 &#123;print $1&#125;&#39; a.txt复制代码</span><br></pre></td></tr></table></figure><h3 id="sed-操作文本"><a href="#sed-操作文本" class="headerlink" title="sed-操作文本"></a>sed-操作文本</h3><p>也是一个比较厉害的操作文本的命令。可以用于替换文件中的内容，删除或新增内容，搜索符合条件的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将 a 替换为 ，</span><br><span class="line">echo &quot;a1b2c1&quot; | sed s&#x2F;a&#x2F;,&#x2F;g</span><br><span class="line"></span><br><span class="line"># 比如我们在本地部署集群的时候，批量生成配置文件</span><br><span class="line">sed s&#x2F;6379&#x2F;6380&#x2F;g redis.conf &gt; redis_6380.conf复制代码</span><br></pre></td></tr></table></figure><h3 id="find-查询文件"><a href="#find-查询文件" class="headerlink" title="find-查询文件"></a>find-查询文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># find  path  option ;</span><br><span class="line"></span><br><span class="line"># 查询某个路径下的名称为 a.sh，这里会查出文件和目录</span><br><span class="line">find &#x2F; -name &quot;a.sh&quot;</span><br><span class="line"></span><br><span class="line"># 指定查询 文件（f）或者目录(d)</span><br><span class="line"></span><br><span class="line">find &#x2F; -name &quot;a.sh&quot; -type f复制代码</span><br></pre></td></tr></table></figure><hr><blockquote></blockquote><p>本文由 <a href="http://www.mflyyou.cn/" target="_blank" rel="noopener">张攀钦的博客</a> 创作。 可自由转载、引用，但需署名作者且注明文章出处。</p><blockquote></blockquote><p>如转载至微信公众号，请在文末添加作者公众号二维码。微信公众号名称：Mflyyou</p><img alt="img" class="lazyload" data-height="258" src="https://user-gold-cdn.xitu.io/2020/3/21/170fcf9875e29908?imageView2/0/w/1280/h/960/ignore-error/1" data-width="258"/>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】后端程序员必备：书写高质量SQL的30条建议</title>
      <link href="/database/sql/14604.html"/>
      <url>/database/sql/14604.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对于一个普通开发来说完全够用的数据库优化建议，让你的程序快人一步。</p><footer><strong>ay_huaxiao</strong><cite><a href="https://juejin.im/post/5e624d156fb9a07ca80ab6f2" target="_blank" rel="noopener">《后端程序员必备：书写高质量SQL的30条建议 》</a></cite></footer></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文将结合实例demo，阐述30条有关于优化SQL的建议，多数是实际开发中总结出来的，希望对大家有帮助。</p><h3 id="1、查询SQL尽量不要使用select-，而是select具体字段。"><a href="#1、查询SQL尽量不要使用select-，而是select具体字段。" class="headerlink" title="1、查询SQL尽量不要使用select *，而是select具体字段。"></a>1、查询SQL尽量不要使用select *，而是select具体字段。</h3><p>反例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>正例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>，<span class="keyword">name</span> <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>只取需要的字段，节省资源、减少网络开销。</li><li>select * 进行查询时，很可能就不会使用到覆盖索引了，就会造成回表查询。</li></ul><a id="more"></a><h3 id="2、如果知道查询结果只有一条或者只要最大-最小一条记录，建议用limit-1"><a href="#2、如果知道查询结果只有一条或者只要最大-最小一条记录，建议用limit-1" class="headerlink" title="2、如果知道查询结果只有一条或者只要最大/最小一条记录，建议用limit 1"></a>2、如果知道查询结果只有一条或者只要最大/最小一条记录，建议用limit 1</h3><p>假设现在有employee员工表，要找出一个名字叫jay的人.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>，<span class="keyword">name</span> <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jay'</span></span><br></pre></td></tr></table></figure><p>正例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>，<span class="keyword">name</span> <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jay'</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>加上limit 1后,只要找到了对应的一条记录,就不会继续向下扫描了,效率将会大大提高。</li><li>当然，如果name是唯一索引的话，是不必要加上limit 1了，因为limit的存在主要就是为了防止全表扫描，从而提高性能,如果一个语句本身可以预知不用全表扫描，有没有limit ，性能的差别并不大。</li></ul><h3 id="3、应尽量避免在where子句中使用or来连接条件"><a href="#3、应尽量避免在where子句中使用or来连接条件" class="headerlink" title="3、应尽量避免在where子句中使用or来连接条件"></a>3、应尽量避免在where子句中使用or来连接条件</h3><p>新建一个user表，它有一个普通索引userId，表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`userId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_userId`</span> (<span class="string">`userId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>假设现在需要查询userid为1或者年龄为18岁的用户，很容易有以下sql</p><p>反例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid=<span class="number">1</span> <span class="keyword">or</span> age =<span class="number">18</span></span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//使用union all </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid=<span class="number">1</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">//或者分开两条<span class="keyword">sql</span>写：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid=<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>使用or可能会使索引失效，从而全表扫描。</li></ul><blockquote><p>对于or+没有索引的age这种情况，假设它走了userId的索引，但是走到age查询条件时，它还得全表扫描，也就是需要三步过程： 全表扫描+索引扫描+合并<br>如果它一开始就走全表扫描，直接一遍扫描就完事。<br>mysql是有优化器的，处于效率与成本考虑，遇到or条件，索引可能失效，看起来也合情合理。</p></blockquote><h3 id="4、优化limit分页"><a href="#4、优化limit分页" class="headerlink" title="4、优化limit分页"></a>4、优化limit分页</h3><p>我们日常做分页需求时，一般会用 limit 实现，但是当偏移量特别大的时候，查询效率就变得低下。</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>，<span class="keyword">name</span>，age <span class="keyword">from</span> employee <span class="keyword">limit</span> <span class="number">10000</span>，<span class="number">10</span></span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//方案一 ：返回上次查询的最大记录(偏移量)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>，<span class="keyword">name</span> <span class="keyword">from</span> employee <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">10000</span> <span class="keyword">limit</span> <span class="number">10.</span></span><br><span class="line"></span><br><span class="line">//方案二：<span class="keyword">order</span> <span class="keyword">by</span> + 索引</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>，<span class="keyword">name</span> <span class="keyword">from</span> employee <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>  <span class="keyword">limit</span> <span class="number">10000</span>，<span class="number">10</span></span><br><span class="line"></span><br><span class="line">//方案三：在业务允许的情况下限制页数：</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>当偏移量最大的时候，查询效率就会越低，因为Mysql并非是跳过偏移量直接去取后面的数据，而是先把偏移量+要取的条数，然后再把前面偏移量这一段的数据抛弃掉再返回的。</li><li>如果使用优化方案一，返回上次最大查询记录（偏移量），这样可以跳过偏移量，效率提升不少。</li><li>方案二使用order by+索引，也是可以提高查询效率的。</li><li>方案三的话，建议跟业务讨论，有没有必要查这么后的分页啦。因为绝大多数用户都不会往后翻太多页。</li></ul><h3 id="5、优化你的like语句"><a href="#5、优化你的like语句" class="headerlink" title="5、优化你的like语句"></a>5、优化你的like语句</h3><p>日常开发中，如果用到模糊关键字查询，很容易想到like，但是like很可能让你的索引失效。</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> userId，<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userId <span class="keyword">like</span> <span class="string">'%123'</span>;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> userId，<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userId <span class="keyword">like</span> <span class="string">'123%'</span>;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>把%放前面，并不走索引，如下：<br><img src="http://images.attachie.club/FryDwXtWZP7PGv_RqW1u9-ZxDUUR" alt="file"></li><li>把% 放关键字后面，还是会走索引的。如下：<br><img src="http://images.attachie.club/FiCpKOm-UmtbpqtO526tV25dSNAq" alt="file"></li></ul><h3 id="6、使用where条件限定要查询的数据，避免返回多余的行"><a href="#6、使用where条件限定要查询的数据，避免返回多余的行" class="headerlink" title="6、使用where条件限定要查询的数据，避免返回多余的行"></a>6、使用where条件限定要查询的数据，避免返回多余的行</h3><p>假设业务场景是这样：查询某个用户是否是会员。曾经看过老的实现代码是这样。。。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; userIds = sqlMap.queryList(<span class="string">"select userId from user where isVip=1"</span>);</span><br><span class="line"><span class="keyword">boolean</span> isVip = userIds.contains(userId);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Long userId = sqlMap.queryObject(<span class="string">"select userId from user where userId='userId' and isVip='1' "</span>)</span><br><span class="line"><span class="keyword">boolean</span> isVip = userId！=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>需要什么数据，就去查什么数据，避免返回不必要的数据，节省开销。</li></ul><h3 id="7、尽量避免在索引列上使用mysql的内置函数"><a href="#7、尽量避免在索引列上使用mysql的内置函数" class="headerlink" title="7、尽量避免在索引列上使用mysql的内置函数"></a>7、尽量避免在索引列上使用mysql的内置函数</h3><p>业务需求：查询最近七天内登陆过的用户(假设loginTime加了索引)</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> userId,loginTime <span class="keyword">from</span> loginuser <span class="keyword">where</span> <span class="keyword">Date_ADD</span>(loginTime,<span class="built_in">Interval</span> <span class="number">7</span> <span class="keyword">DAY</span>) &gt;=<span class="keyword">now</span>();</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> userId,loginTime <span class="keyword">from</span> loginuser <span class="keyword">where</span>  loginTime &gt;= <span class="keyword">Date_ADD</span>(<span class="keyword">NOW</span>(),<span class="built_in">INTERVAL</span> - <span class="number">7</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>索引列上使用mysql的内置函数，索引失效<br><img src="http://images.attachie.club/Fi8l3GzL-fTLR1YPAWJAqkkpdr3o" alt="file"></li><li>如果索引列不加内置函数，索引还是会走的。<br><img src="http://images.attachie.club/Fh22xXXwxw4M1T934_qzdRpWvvKK" alt="file"></li></ul><h3 id="8、应尽量避免在-where-子句中对字段进行表达式操作，这将导致系统放弃使用索引而进行全表扫"><a href="#8、应尽量避免在-where-子句中对字段进行表达式操作，这将导致系统放弃使用索引而进行全表扫" class="headerlink" title="8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致系统放弃使用索引而进行全表扫"></a>8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致系统放弃使用索引而进行全表扫</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age<span class="number">-1</span> =<span class="number">10</span>；</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age =<span class="number">11</span>；</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>虽然age加了索引，但是因为对它进行运算，索引直接迷路了。。。<br><img src="http://images.attachie.club/Fj_daXaBNyYrBjs15lv0CouK0bU3" alt="file"></li></ul><h3 id="9、Inner-join-、left-join、right-join，优先使用Inner-join，如果是left-join，左边表结果尽量小"><a href="#9、Inner-join-、left-join、right-join，优先使用Inner-join，如果是left-join，左边表结果尽量小" class="headerlink" title="9、Inner join 、left join、right join，优先使用Inner join，如果是left join，左边表结果尽量小"></a>9、Inner join 、left join、right join，优先使用Inner join，如果是left join，左边表结果尽量小</h3><blockquote><ul><li>Inner join 内连接，在两张表进行连接查询时，只保留两张表中完全匹配的结果集</li><li>left join 在两张表进行连接查询时，会返回左表所有的行，即使在右表中没有匹配的记录。</li><li>right join 在两张表进行连接查询时，会返回右表所有的行，即使在左表中没有匹配的记录。</li></ul></blockquote><p>都满足SQL需求的前提下，推荐优先使用Inner join（内连接），如果要使用left join，左边表数据结果尽量小，如果有条件的尽量放到左边处理。</p><p>反例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tab1 t1 <span class="keyword">left</span> <span class="keyword">join</span> tab2 t2  <span class="keyword">on</span> t1.size = t2.size <span class="keyword">where</span> t1.id&gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> tab1 <span class="keyword">where</span> <span class="keyword">id</span> &gt;<span class="number">2</span>) t1 <span class="keyword">left</span> <span class="keyword">join</span> tab2 t2 <span class="keyword">on</span> t1.size = t2.size;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>如果inner join是等值连接，或许返回的行数比较少，所以性能相对会好一点。</li><li>同理，使用了左连接，左边表数据结果尽量小，条件尽量放到左边处理，意味着返回的行数可能比较少。</li></ul><h3 id="10、应尽量避免在-where-子句中使用-或-lt-gt-操作符，否则将引擎放弃使用索引而进行全表扫描。"><a href="#10、应尽量避免在-where-子句中使用-或-lt-gt-操作符，否则将引擎放弃使用索引而进行全表扫描。" class="headerlink" title="10、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。"></a>10、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age,<span class="keyword">name</span>  <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age &lt;&gt;<span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//可以考虑分开两条sql写</span><br><span class="line"><span class="keyword">select</span> age,<span class="keyword">name</span>  <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age &lt;<span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> age,<span class="keyword">name</span>  <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age &gt;<span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>使用!=和&lt;&gt;很可能会让索引失效</li></ul><p><img src="http://images.attachie.club/FpTCKWRUn2RE1maCqWmNDtpuB1TP" alt="file"></p><h3 id="11、使用联合索引时，注意索引列的顺序，一般遵循最左匹配原则。"><a href="#11、使用联合索引时，注意索引列的顺序，一般遵循最左匹配原则。" class="headerlink" title="11、使用联合索引时，注意索引列的顺序，一般遵循最左匹配原则。"></a>11、使用联合索引时，注意索引列的顺序，一般遵循最左匹配原则。</h3><p>表结构：（有一个联合索引idx_userid_age，userId在前，age在后）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`userId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_userid_age`</span> (<span class="string">`userId`</span>,<span class="string">`age`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/FjXYOVvVZkxTGOjpbCaARVM4AmUY" alt="file"></p><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//符合最左匹配原则</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid=<span class="number">10</span> <span class="keyword">and</span> age =<span class="number">10</span>；</span><br><span class="line">//符合最左匹配原则</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid =<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/Fo4AEND03TJT7kWjs4z-Fukh76ge" alt="file"></p><ul><li>当我们创建一个联合索引的时候，如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则。</li><li>联合索引不满足最左原则，索引一般会失效，但是这个还跟Mysql优化器有关的。</li></ul><h3 id="12、对查询进行优化，应考虑在-where-及-order-by-涉及的列上建立索引，尽量避免全表扫描。"><a href="#12、对查询进行优化，应考虑在-where-及-order-by-涉及的列上建立索引，尽量避免全表扫描。" class="headerlink" title="12、对查询进行优化，应考虑在 where 及 order by 涉及的列上建立索引，尽量避免全表扫描。"></a>12、对查询进行优化，应考虑在 where 及 order by 涉及的列上建立索引，尽量避免全表扫描。</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> address =<span class="string">'深圳'</span> <span class="keyword">order</span> <span class="keyword">by</span> age ;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/FhgzMebauXQ46zusWDBPKHMAKLr2" alt="file"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">index</span> idx_address_age (address,age)</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/Fr3DFtj54HPePMCZKYtjo-gqw4On" alt="file"></p><h3 id="13、如果插入数据过多，考虑批量插入。"><a href="#13、如果插入数据过多，考虑批量插入。" class="headerlink" title="13、如果插入数据过多，考虑批量插入。"></a>13、如果插入数据过多，考虑批量插入。</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(User u :list)&#123;</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,age) <span class="keyword">values</span>(<span class="comment">#name#,#age#)   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//一次500批量插入，分批进行</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,age) <span class="keyword">values</span></span><br><span class="line">&lt;foreach collection=<span class="string">"list"</span> item=<span class="string">"item"</span> <span class="keyword">index</span>=<span class="string">"index"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">    (<span class="comment">#&#123;item.name&#125;,#&#123;item.age&#125;)</span></span><br><span class="line">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>批量插入性能好，更加省时间</li></ul><blockquote><p>打个比喻:假如你需要搬一万块砖到楼顶,你有一个电梯,电梯一次可以放适量的砖（最多放500）,你可以选择一次运送一块砖,也可以一次运送500,你觉得哪个时间消耗大?</p></blockquote><h3 id="14、在适当的时候，使用覆盖索引。"><a href="#14、在适当的时候，使用覆盖索引。" class="headerlink" title="14、在适当的时候，使用覆盖索引。"></a>14、在适当的时候，使用覆盖索引。</h3><p>覆盖索引能够使得你的SQL语句不需要回表，仅仅访问索引就能够得到所有需要的数据，大大提高了查询效率。</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// like模糊查询，不走索引了</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid <span class="keyword">like</span> <span class="string">'%123%'</span></span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/Fi2iK7z5FBGXjSArkvZqI6Bd0A9a" alt="file"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//id为主键，那么为普通索引，即覆盖索引登场了。</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid <span class="keyword">like</span> <span class="string">'%123%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2020/3/21/170fafe4a0d3d5e6?imageslim" alt="img"></p><h3 id="15、慎用distinct关键字"><a href="#15、慎用distinct关键字" class="headerlink" title="15、慎用distinct关键字"></a>15、慎用distinct关键字</h3><p>distinct 关键字一般用来过滤重复记录，以返回不重复的记录。在查询一个字段或者很少字段的情况下使用时，给查询带来优化效果。但是在字段很多的时候使用，却会大大降低查询效率。</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> * <span class="keyword">from</span>  <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>带distinct的语句cpu时间和占用时间都高于不带distinct的语句。因为当查询很多字段时，如果使用distinct，数据库引擎就会对数据进行比较，过滤掉重复数据，然而这个比较，过滤的过程会占用系统资源，cpu时间。</li></ul><h3 id="16、删除冗余和重复索引"><a href="#16、删除冗余和重复索引" class="headerlink" title="16、删除冗余和重复索引"></a>16、删除冗余和重复索引</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KEY `idx_userId` (`userId`)  </span><br><span class="line">KEY `idx_userId_age` (`userId`,`age`)</span><br></pre></td></tr></table></figure><p>正例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除userId索引，因为组合索引（A，B）相当于创建了（A）和（A，B）索引</span><br><span class="line">KEY `idx_userId_age` (`userId`,`age`)</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>重复的索引需要维护，并且优化器在优化查询的时候也需要逐个地进行考虑，这会影响性能的。</li></ul><h3 id="17、如果数据量较大，优化你的修改-删除语句。"><a href="#17、如果数据量较大，优化你的修改-删除语句。" class="headerlink" title="17、如果数据量较大，优化你的修改/删除语句。"></a>17、如果数据量较大，优化你的修改/删除语句。</h3><p>避免同时修改或删除过多数据，因为会造成cpu利用率过高，从而影响别人对数据库的访问。</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//一次删除10万或者100万+？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> &lt;<span class="number">100000</span>;</span><br><span class="line">//或者采用单一循环操作，效率低，时间漫长</span><br><span class="line">for（User user：list）&#123;</span><br><span class="line">   <span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span>； </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//分批进行删除,如每次500</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">500</span></span><br><span class="line"><span class="keyword">delete</span> product <span class="keyword">where</span> <span class="keyword">id</span>&gt;=<span class="number">500</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;<span class="number">1000</span>；</span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>一次性删除太多数据，可能会有lock wait timeout exceed的错误，所以建议分批操作。</li></ul><h3 id="18、where子句中考虑使用默认值代替null。"><a href="#18、where子句中考虑使用默认值代替null。" class="headerlink" title="18、where子句中考虑使用默认值代替null。"></a>18、where子句中考虑使用默认值代替null。</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/FlnKI09gJ5WGUucae3lconXotJOP" alt="file"></p><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//设置0为默认值</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age&gt;<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/FiHeYlA4DeeYd4gQmWns60yuqCF8" alt="file"></p><ul><li>并不是说使用了is null 或者 is not null 就会不走索引了，这个跟mysql版本以及查询成本都有关。</li></ul><blockquote><p>如果mysql优化器发现，走索引比不走索引成本还要高，肯定会放弃索引，这些条件<code>！=，&gt;is null，is not null</code>经常被认为让索引失效，其实是因为一般情况下，查询的成本高，优化器自动放弃的。</p></blockquote><ul><li>如果把null值，换成默认值，很多时候让走索引成为可能，同时，表达意思会相对清晰一点。</li></ul><h3 id="19、不要有超过5个以上的表连接"><a href="#19、不要有超过5个以上的表连接" class="headerlink" title="19、不要有超过5个以上的表连接"></a>19、不要有超过5个以上的表连接</h3><ul><li>连表越多，编译的时间和开销也就越大。</li><li>把连接表拆开成较小的几个执行，可读性更高。</li><li>如果一定需要连接很多表才能得到数据，那么意味着糟糕的设计了。</li></ul><h3 id="20、exist-amp-in的合理利用"><a href="#20、exist-amp-in的合理利用" class="headerlink" title="20、exist &amp; in的合理利用"></a>20、exist &amp; in的合理利用</h3><p>假设表A表示某企业的员工表，表B表示部门表，查询所有部门的所有员工，很容易有以下SQL:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> deptId <span class="keyword">in</span> (<span class="keyword">select</span> deptId <span class="keyword">from</span> B);</span><br></pre></td></tr></table></figure><p>这样写等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先查询部门表B</span></span><br><span class="line"><span class="keyword">select</span> deptId <span class="keyword">from</span> B</span><br><span class="line"><span class="comment">#再由部门deptId，查询A的员工</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> A.deptId = B.deptId</span><br></pre></td></tr></table></figure><p>可以抽象成这样的一个循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;&gt; resultSet ;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.length;i++) &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;A.length;j++) &#123;</span><br><span class="line">       <span class="keyword">if</span>(A[i].id==B[j].id) &#123;</span><br><span class="line">          resultSet.add(A[i]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>显然，除了使用in，我们也可以用exists实现一样的查询功能，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B <span class="keyword">where</span> A.deptId = B.deptId);</span><br></pre></td></tr></table></figure><p>因为exists查询的理解就是，先执行主查询，获得数据后，再放到子查询中做条件验证，根据验证结果（true或者false），来决定主查询的数据结果是否得意保留。</p><p>那么，这样写就等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A,先从A表做循环</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> B <span class="keyword">where</span> A.deptId = B.deptId,再从B表做循环.</span><br></pre></td></tr></table></figure><p>同理，可以抽象成这样一个循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;&gt; resultSet ;</span><br><span class="line"> for(int i&#x3D;0;i&lt;A.length;i++) &#123;</span><br><span class="line">       for(int j&#x3D;0;j&lt;B.length;j++) &#123;</span><br><span class="line">       if(A[i].deptId&#x3D;&#x3D;B[j].deptId) &#123;</span><br><span class="line">          resultSet.add(A[i]);</span><br><span class="line">          break;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>数据库最费劲的就是跟程序链接释放。假设链接了两次，每次做上百万次的数据集查询，查完就走，这样就只做了两次；相反建立了上百万次链接，申请链接释放反复重复，这样系统就受不了了。即mysql优化原则，就是小表驱动大表，小的数据集驱动大的数据集，从而让性能更优。</p><p>因此，我们要选择最外层循环小的，也就是，如果<strong>B的数据量小于A，适合使用in，如果B的数据量大于A，即适合选择exist</strong>。</p><h3 id="21、尽量用-union-all-替换-union"><a href="#21、尽量用-union-all-替换-union" class="headerlink" title="21、尽量用 union all 替换 union"></a>21、尽量用 union all 替换 union</h3><p>如果检索结果中不会有重复的记录，推荐union all 替换 union。</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid=<span class="number">1</span> </span><br><span class="line"><span class="keyword">union</span>  </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid=<span class="number">1</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>  </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>如果使用union，不管检索结果有没有重复，都会尝试进行合并，然后在输出最终结果前进行排序。如果已知检索结果没有重复记录，使用union all 代替union，这样会提高效率。</li></ul><h3 id="22、索引不宜太多，一般5个以内。"><a href="#22、索引不宜太多，一般5个以内。" class="headerlink" title="22、索引不宜太多，一般5个以内。"></a>22、索引不宜太多，一般5个以内。</h3><ul><li>索引并不是越多越好，索引虽然提高了查询的效率，但是也降低了插入和更新的效率。</li><li>insert或update时有可能会重建索引，所以建索引需要慎重考虑，视具体情况来定。</li><li>一个表的索引数最好不要超过5个，若太多需要考虑一些索引是否没有存在的必要。</li></ul><h3 id="23、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型"><a href="#23、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型" class="headerlink" title="23、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型"></a>23、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">king_id` varchar（20） NOT NULL <span class="keyword">COMMENT</span> <span class="string">'守护者Id'</span></span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`king_id` int(11) NOT NULL <span class="keyword">COMMENT</span> <span class="string">'守护者Id'</span><span class="string">`</span></span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>相对于数字型字段，字符型会降低查询和连接的性能，并会增加存储开销。</li></ul><h3 id="24、索引不适合建在有大量重复数据的字段上，如性别这类型数据库字段。"><a href="#24、索引不适合建在有大量重复数据的字段上，如性别这类型数据库字段。" class="headerlink" title="24、索引不适合建在有大量重复数据的字段上，如性别这类型数据库字段。"></a>24、索引不适合建在有大量重复数据的字段上，如性别这类型数据库字段。</h3><p>因为SQL优化器是根据表中数据量来进行查询优化的，如果索引列有大量重复数据，Mysql查询优化器推算发现不走索引的成本更低，很可能就放弃索引了。</p><h3 id="25、尽量避免向客户端返回过多数据量。"><a href="#25、尽量避免向客户端返回过多数据量。" class="headerlink" title="25、尽量避免向客户端返回过多数据量。"></a>25、尽量避免向客户端返回过多数据量。</h3><p>假设业务需求是，用户请求查看自己最近一年观看过的直播数据。</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//一次性查询所有数据回来</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> LivingInfo <span class="keyword">where</span> watchId =useId <span class="keyword">and</span> watchTime &gt;= <span class="keyword">Date_sub</span>(<span class="keyword">now</span>(),<span class="built_in">Interval</span> <span class="number">1</span> Y)</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//分页查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> LivingInfo <span class="keyword">where</span> watchId =useId <span class="keyword">and</span> watchTime&gt;= <span class="keyword">Date_sub</span>(<span class="keyword">now</span>(),<span class="built_in">Interval</span> <span class="number">1</span> Y) <span class="keyword">limit</span> <span class="keyword">offset</span>，pageSize</span><br><span class="line"></span><br><span class="line">//如果是前端分页，可以先查询前两百条记录，因为一般用户应该也不会往下翻太多页，</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> LivingInfo <span class="keyword">where</span> watchId =useId <span class="keyword">and</span> watchTime&gt;= <span class="keyword">Date_sub</span>(<span class="keyword">now</span>(),<span class="built_in">Interval</span> <span class="number">1</span> Y) <span class="keyword">limit</span> <span class="number">200</span> ;</span><br></pre></td></tr></table></figure><h3 id="26、当在SQL语句中连接多个表时-请使用表的别名，并把别名前缀于每一列上，这样语义更加清晰。"><a href="#26、当在SQL语句中连接多个表时-请使用表的别名，并把别名前缀于每一列上，这样语义更加清晰。" class="headerlink" title="26、当在SQL语句中连接多个表时,请使用表的别名，并把别名前缀于每一列上，这样语义更加清晰。"></a>26、当在SQL语句中连接多个表时,请使用表的别名，并把别名前缀于每一列上，这样语义更加清晰。</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  * <span class="keyword">from</span> A <span class="keyword">inner</span></span><br><span class="line"><span class="keyword">join</span> B <span class="keyword">on</span> A.deptId = B.deptId;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  memeber.name,deptment.deptName <span class="keyword">from</span> A <span class="keyword">member</span> <span class="keyword">inner</span></span><br><span class="line"><span class="keyword">join</span> B deptment <span class="keyword">on</span> member.deptId = deptment.deptId;</span><br></pre></td></tr></table></figure><h3 id="27、尽可能使用varchar-nvarchar-代替-char-nchar。"><a href="#27、尽可能使用varchar-nvarchar-代替-char-nchar。" class="headerlink" title="27、尽可能使用varchar/nvarchar 代替 char/nchar。"></a>27、尽可能使用varchar/nvarchar 代替 char/nchar。</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`deptName` char(100) DEFAULT NULL <span class="keyword">COMMENT</span> <span class="string">'部门名称'</span></span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`deptName` varchar(100) DEFAULT NULL <span class="keyword">COMMENT</span> <span class="string">'部门名称'</span></span><br></pre></td></tr></table></figure><p>理由：</p><ul><li>因为首先变长字段存储空间小，可以节省存储空间。</li><li>其次对于查询来说，在一个相对较小的字段内搜索，效率更高。</li></ul><h3 id="28、为了提高group-by-语句的效率，可以在执行到该语句前，把不需要的记录过滤掉。"><a href="#28、为了提高group-by-语句的效率，可以在执行到该语句前，把不需要的记录过滤掉。" class="headerlink" title="28、为了提高group by 语句的效率，可以在执行到该语句前，把不需要的记录过滤掉。"></a>28、为了提高group by 语句的效率，可以在执行到该语句前，把不需要的记录过滤掉。</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job，<span class="keyword">avg</span>（salary） <span class="keyword">from</span> employee  <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> job =<span class="string">'president'</span> </span><br><span class="line"><span class="keyword">or</span> job = <span class="string">'managent'</span></span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job，<span class="keyword">avg</span>（salary） <span class="keyword">from</span> employee <span class="keyword">where</span> job =<span class="string">'president'</span> </span><br><span class="line"><span class="keyword">or</span> job = <span class="string">'managent'</span> <span class="keyword">group</span> <span class="keyword">by</span> job；</span><br></pre></td></tr></table></figure><h3 id="29、如果字段类型是字符串，where时一定用引号括起来，否则索引失效"><a href="#29、如果字段类型是字符串，where时一定用引号括起来，否则索引失效" class="headerlink" title="29、如果字段类型是字符串，where时一定用引号括起来，否则索引失效"></a>29、如果字段类型是字符串，where时一定用引号括起来，否则索引失效</h3><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid =<span class="number">123</span>;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/FkmpRYRrm1eef7mE9-cGMqhOycDq" alt="file"></p><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid =<span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/Fp8XKlxObHdwERUowHHPbUV1w6wb" alt="file"></p><ul><li>为什么第一条语句未加单引号就不走索引了呢？ 这是因为不加单引号时，是字符串跟数字的比较，它们类型不匹配，MySQL会做隐式的类型转换，把它们转换为浮点数再做比较。</li></ul><h3 id="30、使用explain-分析你SQL的计划"><a href="#30、使用explain-分析你SQL的计划" class="headerlink" title="30、使用explain 分析你SQL的计划"></a>30、使用explain 分析你SQL的计划</h3><p>日常开发写SQL的时候，尽量养成一个习惯吧。用explain分析一下你写的SQL，尤其是走不走索引这一块。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> userid =<span class="number">10086</span> <span class="keyword">or</span> age =<span class="number">18</span>;</span><br></pre></td></tr></table></figure><p><img src="http://images.attachie.club/Fp8VTx5g7u2DpOrMNg70sgSBSx2w" alt="file"></p><h3 id="参考与感谢"><a href="#参考与感谢" class="headerlink" title="参考与感谢"></a>参考与感谢</h3><ul><li><a href="https://segmentfault.com/a/1190000014509559" target="_blank" rel="noopener">Mysql优化原则_小表驱动大表IN和EXISTS的合理利用</a></li><li><a href="https://www.cnblogs.com/knowledgesea/p/3686105.html" target="_blank" rel="noopener">sql语句的优化分析</a></li></ul><h3 id="作者公众号"><a href="#作者公众号" class="headerlink" title="作者公众号"></a>作者公众号</h3><p><img src="https://user-gold-cdn.xitu.io/2019/7/28/16c381c89b127bbb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据库概念 </category>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】浅谈MySQL并发控制：隔离级别、锁与MVCC</title>
      <link href="/database/26172.html"/>
      <url>/database/26172.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单的介绍了一下Mysql的锁和隔离，情况</p><footer><strong>Turling_hu</strong><cite><a href="https://juejin.im/post/5e72246ae51d4527143e6a0d" target="_blank" rel="noopener">浅谈MySQL并发控制：隔离级别、锁与MVCC</a></cite></footer></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果数据库中的事务都是串行执行的，这种方式可以保障事务的执行不会出现异常和错误，但带来的问题是串行执行会带来性能瓶颈；而事务并发执行，如果不加以控制则会引发诸多问题，包括死锁、更新丢失等等。这就需要我们在性能和安全之间做出合理的权衡，使用适当的并发控制机制保障并发事务的执行。</p><a id="more"></a><h1 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h1><p>首先我们先来了解一下并发事务会带来哪些问题。并发事务访问相同记录大致可归纳为以下3种情况：</p><ul><li><strong>读-读</strong>：即并发事务相继读取同一记录；</li><li><strong>写-写</strong>：即并发事务相继对同一记录做出修改；</li><li><strong>写-读</strong>或<strong>读-写</strong>：即两个并发事务对同一记录分别进行读操作和写操作。</li></ul><h2 id="读-读"><a href="#读-读" class="headerlink" title="读-读"></a>读-读</h2><p>因为读取记录并不会对记录造成任何影响，所以同个事务并发读取同一记录也就不存在任何安全问题，所以允许这种操作。</p><h2 id="写-写"><a href="#写-写" class="headerlink" title="写-写"></a>写-写</h2><p>如果允许并发事务都读取同一记录，并相继基于旧值对这一记录做出修改，那么就会出现前一个事务所做的修改被后面事务的修改覆盖，即出现<strong>提交覆盖</strong>的问题。</p><p>另外一种情况，并发事务相继对同一记录做出修改，其中一个事务提交之后之后另一个事务发生回滚，这样就会出现已提交的修改因为回滚而丢失的问题，即<strong>回滚覆盖</strong>问题。</p><p>这两种问题都造成丢失更新，其中回滚覆盖称为<strong>第一类丢失更新</strong>问题，提交覆盖称为<strong>第二类丢失更新</strong>问题。</p><h2 id="写-读或读-写"><a href="#写-读或读-写" class="headerlink" title="写-读或读-写"></a><strong>写-读</strong>或<strong>读-写</strong></h2><p>这种情况较为复杂，也最容易出现问题。</p><p>如果一个事务读取了另一个事务尚未提交的修改记录，那么就出现了<strong>脏读</strong>的问题；</p><p>如果我们加以控制使得一个事务只能读取其他已提交事务的修改的数据，那么这个事务在另一事物提交修改前后读取到的数据是不一样的，这就意味着发生了<strong>不可重复读</strong>；</p><p>如果一个事务根据一些条件查询到一些记录，之后另一事物向表中插入了一些记录，原先的事务以相同条件再次查询时发现得到的结果跟第一次查询得到的结果不一致，这就意味着发生了<strong>幻读</strong>。</p><h1 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h1><p>对于以上提到的并发事务执行过程中可能出现的问题，其严重性也是不一样的，我们可以按照问题的严重程度排个序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">丢失更新 &gt; 脏读 &gt;不可重复读 &gt;幻读</span><br></pre></td></tr></table></figure><p>因此如果我们可以容忍一些严重程度较轻的问题，我们就能获取一些性能上的提升。于是便有了事务的四种隔离级别：</p><ul><li>读未提交（<code>Read Uncommitted</code>）：允许读取未提交的记录，会发生脏读、不可重复读、幻读；</li><li>读已提交（<code>Read Committed</code>）：只允许读物已提交的记录，不会发生脏读，但会出现重复读、幻读；</li><li>可重复读（<code>Repeatable Read</code>）：不会发生脏读和不可重复读的问题，但会发生幻读问题；但<code>MySQL</code>在此隔离级别下利用<strong>间隙锁</strong>可以禁止幻读问题的发生；</li><li>可串行化（<code>Serializable</code>）：即事务串行执行，以上各种问题自然也就都不会发生。</li></ul><p>值得注意的是以上四种隔离级别都不会出现回滚覆盖的问题，但是提交覆盖的问题对于<code>MySQL</code>来说，在<code>Read Uncommitted</code>、<code>Read Committed</code>以及<code>Repeatable Read</code>这三种隔离级别下都会发生（标准的<code>Repeatable Read</code>隔离级别不允许出现提交覆盖的问题），需要额外加锁来避免此问题。</p><h1 id="隔离级别的实现"><a href="#隔离级别的实现" class="headerlink" title="隔离级别的实现"></a>隔离级别的实现</h1><p><code>SQL</code>规范定义了以上四种隔离级别，但是并没有给出如何实现四种隔离级别，因此不同数据库的实现方式和使用方式也并不相同。而<code>SQL</code>隔离级别的标准是依据基于锁的实现方式来制定的，因为有必要先了解一下传统的基于锁的隔离级别是如何实现的。</p><h2 id="传统隔离级别的实现"><a href="#传统隔离级别的实现" class="headerlink" title="传统隔离级别的实现"></a>传统隔离级别的实现</h2><p>既然说到传统的隔离级别是基于锁实现的，我们先来了解一下锁。</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>传统的锁有两种：</p><ul><li>共享锁（<code>Shared Locks</code>）：简称<code>S锁</code>，事务对一条记录进行读操作时，需要先获取该记录的共享锁。</li><li>排他锁（<code>Exclusive Locks</code>）：简称<code>X锁</code>，事务对一条记录进行写操作时，需要先获取该记录的排他锁。</li></ul><p>需要注意的是，加了共享锁的记录，其他事务也可以获得该记录的共享锁，但是无法获取该记录的排他锁，即<code>S锁</code>和<code>S锁</code>是兼容的，<code>S锁</code>和<code>X锁</code>是不兼容的；而加了排他锁的记录，其他事务既无法获取该记录的共享锁也无法获取排他锁，即<code>X锁</code>和<code>X锁</code>也是不兼容的。</p><p>另外，刚刚说到事务对一条记录进行读操作时，需要先获取该记录的<code>S锁</code>，但有时事务在读取记录时需要阻止其他事务访问该记录，这时就需要获取该记录的<code>X锁</code>。以<code>MySQL</code>为例，有以下两种锁定读的方式：</p><ul><li>读取时对记录加<code>S锁</code>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>;</span><br></pre></td></tr></table></figure><p>如果事务执行了该语句，则会在读取的记录上加<code>S锁</code>，这样就允许其他事务也能获取到该记录的<code>S锁</code>；而如果其他事务需要获取该记录的<code>X锁</code>，那么就需要等待当前事务提交后释放掉<code>S锁</code>。</p><ul><li>读取时对记录加<code>X锁</code>：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>如果事务执行了该语句，则会在读取的记录上加<code>X锁</code>，这样其他事务想要说去该记录的<code>S锁</code>或<code>X锁</code>，那么需要等待当前事务提交后释放掉<code>X锁</code>。</p><p>对于锁的粒度而言，锁又可以分为两种：</p><ul><li>行锁：只锁住某一行记录，其他行的记录不受影响。</li><li>表锁：锁住整个表，所有对于该表的操作都会受影响。</li></ul><h3 id="基于锁实现隔离级别"><a href="#基于锁实现隔离级别" class="headerlink" title="基于锁实现隔离级别"></a>基于锁实现隔离级别</h3><p>在基于锁的实现方式下，四种隔离级别的区别就在于加锁方式的区别：</p><ul><li><strong>读未提交</strong>：读操作不加锁，读读，读写，写读并行；写操作加<code>X锁</code>且直到事务提交后才释放。</li><li><strong>读已提交</strong>：读操作加<code>S锁</code>，写操作加<code>X锁</code>且直到事务提交后才释放；读操作不会阻塞其他事务读或写，写操作会阻塞其他事务写和读，因此可以防止脏读问题。</li><li><strong>可重复读</strong>：读操作加<code>S锁</code>且直到事务提交后才释放，写操作加<code>X锁</code>且直到事务提交后才释放；读操作不会阻塞其他事务读但会阻塞其他事务写，写操作会阻塞其他事务读和写，因此可以防止脏读、不可重复读。</li><li><strong>串行化</strong>：读操作和写操作都加<code>X锁</code>且直到事务提交后才释放，粒度为表锁，也就是严格串行。</li></ul><p>这里面有一些细节值得注意：</p><ul><li>如果锁获取之后直到事务提交后才释放，这种锁称为<strong>长锁</strong>；如果锁在操作完成之后就被释放，这种锁称为<strong>短锁</strong>。例如，在读已提交隔离级别下，读操作所加<code>S锁</code>为短锁，写操作所加<code>X锁</code>为长锁。</li><li>对于可重复读和串行化隔离级别，读操作所加<code>S锁</code>和写操作所加<code>X锁</code>均为长锁，即事务获取锁之后直到事务提交后才能释放，这种把获取锁和释放锁分为两个不同的阶段的协议称为<strong>两阶段锁</strong>协议（<code>2-phase locking</code>）。两阶段锁协议规定在加锁阶段，一个事务可以获得锁但是不能释放锁；而在解锁阶段事务只可以释放锁，并不能获得新的锁。两阶段锁协议能够保证事务串行化执行，解决事务并发问题，但也会导致死锁发生的概率大大提升。</li></ul><h2 id="MySQL隔离级别的实现"><a href="#MySQL隔离级别的实现" class="headerlink" title="MySQL隔离级别的实现"></a>MySQL隔离级别的实现</h2><p>不同数据库对于<code>SQL</code>标准中规定的隔离级别支持是不一样的，数据库引擎实现隔离级别的方式虽然都在尽可能地贴近标准的隔离级别规范，但和标准的预期还是有些不一样的地方。</p><p><code>MySQL</code>（<code>InnoDB</code>）支持的4种隔离级别，与标准的各级隔离级别允许出现的问题有些出入，比如<code>MySQL</code>在可重复读隔离级别下可以防止幻读的问题出现，但也会出现提交覆盖的问题。</p><p>相对于传统隔离级别基于锁的实现方式，<code>MySQL</code> 是通过<code>MVCC</code>（多版本并发控制）来实现读-写并发控制，又是通过两阶段锁来实现写-写并发控制的。<code>MVCC</code>是一种无锁方案，用以解决事务<strong>读-写</strong>并发的问题，能够极大提升<strong>读-写</strong>并发操作的性能。</p><h3 id="MVCC的实现原理"><a href="#MVCC的实现原理" class="headerlink" title="MVCC的实现原理"></a>MVCC的实现原理</h3><p>为了方便描述，首先我们创建一个表<code>book</code>，就三个字段，分别是主键<code>book_id</code>, 名称<code>book_name</code>, 库存<code>stock</code>。然后向表中插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'数据结构'</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">'C++指南'</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span>(<span class="number">3</span>, <span class="string">'精通Java'</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h4 id="版本链"><a href="#版本链" class="headerlink" title="版本链"></a>版本链</h4><p>对于使用<code>InnoDB</code>存储引擎的表，其聚簇索引记录中包含了两个重要的隐藏列：</p><ul><li>事务ID（<code>DB_TRX_ID</code>）：每当事务对聚簇索引中的记录进行修改时，都会把当前事务的事务id记录到<code>DB_TRX_ID</code>中。</li><li>回滚指针（<code>DB_ROLL_PTR</code>）：每当事务对聚簇索引中的记录进行修改时，都会把该记录的旧版本记录到<code>undo</code>日志中，通过<code>DB_ROLL_PTR</code>这个指针可以用来获取该记录旧版本的信息。</li></ul><p>如果在一个事务中多次对记录进行修改，则每次修改都会生成<code>undo</code>日志，并且这些<code>undo</code>日志通过<code>DB_ROLL_PTR</code>指针串联成一个版本链，版本链的头结点是该记录最新的值，尾结点是事务开始时的初始值。</p><p>例如，我们在表<code>book</code>中做以下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line"></span><br><span class="line">UPDATE book SET stock &#x3D; 200 WHERE id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">UPDATE book SET stock &#x3D; 300 WHERE id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>那么<code>id=1</code>的记录此时的版本链就如下图所示：<br><img src="http://images.attachie.club/FjHJA1fKpFDJPLDzjiimqq-_r5c8" alt="file"></p><h4 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h4><p>对于使用<code>Read Uncommitted</code>隔离级别的事务来说，只需要读取版本链上最新版本的记录即可；对于使用<code>Serializable</code>隔离级别的事务来说，<code>InnoDB</code>使用加锁的方式来访问记录。而<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别来说，都需要读取已经提交的事务所修改的记录，也就是说如果版本链中某个版本的修改没有提交，那么该版本的记录时不能被读取的。所以需要确定在<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别下，版本链中哪个版本是能被当前事务读取的。于是<code>ReadView</code>的概念被提出以解决这个问题。</p><p><code>ReadView</code>相当于某个时刻表记录的一个快照，在这个快照中我们能获取到与当前记录相关的事务中，哪些事务是已提交的<strong>稳定事务</strong>，哪些是<strong>正在活跃的事务</strong>，哪些是<strong>生成快照之后才开启的事务</strong>。由此我们就能根据<strong>可见性比较算法</strong>判断出版本链中能被读取的最新版本记录。</p><p><strong>可见性比较算法</strong>是基于事务ID的比较算法。首先我们需要知道的一个事实是：事务<code>id</code>是递增分配的。从<code>ReadView</code>中我们能获取到生成快照时刻系统中活跃的事务中最小和最大的事务<code>id</code>（最大的事务<code>id</code>实际上是系统中将要分配给下一个事务的<code>id</code>值），这样我们就得到了一个活跃事务<code>id</code>的范围，我们可称之为<code>ACTIVE_TRX_ID_RANGE</code>。那么小于这个范围的事务id对应的事务都是已提交的稳定事务，大于这个范围的事务都是在快照生成之后才开启的事务，而在<code>ACTIVE_TRX_ID_RANGE</code>范围内的事务中除了正在活跃的事务，也都是已提交的稳定事务。</p><p>有了以上信息之后，我们顺着版本链从头结点开始查找最新的可被读取的版本记录：</p><p>1、首先判断版本记录的<code>DB_TRX_ID</code>字段与生成<code>ReadView</code>的事务对应的事务ID是否相等。如果相等，那就说明该版本的记录是在当前事务中生成的，自然也就能够被当前事务读取；否则进行第2步。</p><p>2、如果版本记录的<code>DB_TRX_ID</code>字段小于范围<code>ACTIVE_TRX_ID_RANGE</code>，表明该版本记录是已提交事务修改的记录，即对当前事务可见；否则进行下一步。</p><p>3、如果版本记录的<code>DB_TRX_ID</code>字段位于范围<code>ACTIVE_TRX_ID_RANGE</code>内，如果该事务ID对应的不是活跃事务，表明该版本记录是已提交事务修改的记录，即对当前事务可见；如果该事务ID对应的是活跃事务，那么对当前事务不可见，则读取版本链中下一个版本记录，重复以上步骤，直到找到对当前事务可见的版本。</p><p>如果某个版本记录经过以上步骤判断确定其对当前事务可见，则查询结果返回此版本记录；否则读取下一个版本记录继续按照上述步骤进行判断，直到版本链的尾结点。如果遍历完版本链没有找到对当前事务可见的版本，则查询结果为空。</p><p>在<code>MySQL</code>中，<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别下的区别就是它们生成<code>ReadView</code>的时机不同。</p><h3 id="MVCC实现不同隔离级别"><a href="#MVCC实现不同隔离级别" class="headerlink" title="MVCC实现不同隔离级别"></a>MVCC实现不同隔离级别</h3><p>之前说到<code>ReadView</code>的机制只在<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别下生效，所以只有这两种隔离级别才有<code>MVCC</code>。<br>在<code>Read Committed</code>隔离级别下，每次读取数据时都会生成<code>ReadView</code>；而在<code>Repeatable Read</code>隔离级别下只会在事务首次读取数据时生成<code>ReadView</code>，之后的读操作都会沿用此<code>ReadView</code>。</p><p>下面我们通过例子来看看<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别下<code>MVCC</code>的不同表现。我们继续以表<code>book</code>为例进行演示。</p><h4 id="Read-Committed隔离级别分析"><a href="#Read-Committed隔离级别分析" class="headerlink" title="Read Committed隔离级别分析"></a>Read Committed隔离级别分析</h4><p>假设在<code>Read Committed</code>隔离级别下，有如下事务在执行，事务<code>id</code>为10：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; // 开启Transaction 10</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">200</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">300</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>此时该事务尚未提交，<code>id</code>为2的记录版本链如下图所示：<br><img src="http://images.attachie.club/FtWWadTJ-rRSxQhModSNFZ73ggzR" alt="file"><br>然后我们开启一个事务对<code>id</code>为2的记录进行查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>当执行<code>SELECT</code>语句时会生成一个<code>ReadView</code>，该<code>ReadView</code>中的<code>ACTIVE_TRX_ID_RANGE</code>为<code>[10, 11)</code>，当前事务ID<code>creator_trx_id</code>为<code>0</code>（因为事务中当执行写操作时才会分配一个单独的事务<code>id</code>，否则事务<code>id</code>为<code>0</code>）。按照我们之前所述<code>ReadView</code>的工作原理，我们查询到的版本记录为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+-----------+-------+</span><br><span class="line">|book_id  | book_name | stock |</span><br><span class="line">+----------+-----------+-------+</span><br><span class="line">| 2        | C++指南    |  100  |</span><br><span class="line">+----------+-----------+-------+</span><br></pre></td></tr></table></figure><p>然后我们将事务<code>id</code>为10的事务提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; // 开启Transaction 10</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">200</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">300</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>同时开启执行另一事务<code>id</code>为<code>11</code>的事务，但不提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; // 开启Transaction 11</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">400</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>此时<code>id</code>为2的记录版本链如下图所示：<br><img src="http://images.attachie.club/FmJXDtxhs9JXE8Rex1jB2QfKQ-iw" alt="file"><br>然后我们回到刚才的查询事务中再次查询<code>id</code>为2的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>; // 此时Transaction 10 未提交</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>; // 此时Transaction 10 已提交</span><br></pre></td></tr></table></figure><p>当第二次执行<code>SELECT</code>语句时会再次生成一个<code>ReadView</code>，该<code>ReadView</code>中的<code>ACTIVE_TRX_ID_RANGE</code>为<code>[11, 12)</code>，当前事务ID<code>creator_trx_id</code>依然为<code>0</code>。按照<code>ReadView</code>的工作原理进行分析，我们查询到的版本记录为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+-----------+-------+</span><br><span class="line">| book_id  | book_name | stock |</span><br><span class="line">+----------+-----------+-------+</span><br><span class="line">| 2        | C++指南    | 300   </span><br><span class="line">|+----------+-----------+-------+</span><br></pre></td></tr></table></figure><p>从上述分析可以发现，因为每次执行查询语句都会生成新的<code>ReadView</code>，所以在<code>Read Committed</code>隔离级别下的事务读取到的是查询时刻表中已提交事务修改之后的数据。</p><h4 id="Repeatable-Read隔离级别分析"><a href="#Repeatable-Read隔离级别分析" class="headerlink" title="Repeatable Read隔离级别分析"></a>Repeatable Read隔离级别分析</h4><p>我们在<code>Repeatable Read</code>隔离级别下重复上面的事务操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; // 开启Transaction 20</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">200</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">300</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>此时该事务尚未提交，然后我们开启一个事务对<code>id</code>为2的记录进行查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>当事务第一次执行<code>SELECT</code>语句时会生成一个<code>ReadView</code>，该<code>ReadView</code>中的<code>ACTIVE_TRX_ID_RANGE</code>为<code>[10, 11)</code>，当前事务ID<code>creator_trx_id</code>为<code>0</code>。根据<code>ReadView</code>的工作原理，我们查询到的版本记录为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+-----------+-------+</span><br><span class="line">| book_id  | book_name | stock |</span><br><span class="line">+----------+-----------+-------+</span><br><span class="line">| 2        | C++指南    |  100  |</span><br><span class="line">+----------+-----------+-------+</span><br></pre></td></tr></table></figure><p>然后我们将事务<code>id</code>为20的事务提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; // 开启Transaction 20</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">200</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">300</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>同时开启执行另一事务<code>id</code>为21的事务，但不提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; // 开启Transaction 21</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> book <span class="keyword">SET</span> stock = <span class="number">400</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>然后我们回到刚才的查询事务中再次查询<code>id</code>为2的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>; // 此时Transaction 10 未提交</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>; // 此时Transaction 10 已提交</span><br></pre></td></tr></table></figure><p>当第二次执行<code>SELECT</code>语句时不会生成新的<code>ReadView</code>，依然会使用第一次查询时生成<code>ReadView</code>。因此我们查询到的版本记录跟第一次查询到的结果是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----------+-----------+-------+|</span><br><span class="line">book_id  | book_name | stock |</span><br><span class="line">+----------+-----------+-------+</span><br><span class="line">| 2        | C++指南    |  100  |</span><br><span class="line">+----------+-----------+-------+</span><br><span class="line"></span><br><span class="line">作者：Turling_hu</span><br><span class="line">链接：https:&#x2F;&#x2F;juejin.im&#x2F;post&#x2F;5e72246ae51d4527143e6a0d</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>从上述分析可以发现，因为在<code>Repeatable Read</code>隔离级别下的事务只会在第一次执行查询时生成<code>ReadView</code>，该事务中后续的查询操作都会沿用这个<code>ReadView</code>，因此此隔离级别下一个事务中多次执行同样的查询，其结果都是一样的，这样就实现了可重复读。</p><h3 id="快照读和当前读"><a href="#快照读和当前读" class="headerlink" title="快照读和当前读"></a>快照读和当前读</h3><h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><p>在<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别下，普通的<code>SELECT</code>查询都是读取<code>MVCC</code>版本链中的一个版本，相当于读取一个快照，因此称为<strong>快照读</strong>。这种读取方式不会加锁，因此读操作时非阻塞的，因此也叫<strong>非阻塞读</strong>。</p><p>在标准的<code>Repeatable Read</code>隔离级别下读操作会加<code>S锁</code>，直到事务结束，因此可以阻止其他事务的写操作；但在<code>MySQL</code>的<code>Repeatable Read</code>隔离级别下读操作没有加锁，不会阻止其他事务对相同记录的写操作，因此在后续进行写操作时就有可能写入基于版本链中的旧数据计算得到的结果，这就导致了提交覆盖的问题。想要避免此问题，就需要另外加锁来实现。</p><h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><p>之前提到<code>MySQL</code>有两种锁定读的方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>; // 读取时对记录加S锁，直到事务结束</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; // 读取时对记录加X锁，直到事务结束</span><br></pre></td></tr></table></figure><p>这种读取方式读取的是记录的当前最新版本，称为<strong>当前读</strong>。另外对于<code>DELETE</code>、<code>UPDATE</code>操作，也是需要先读取记录，获取记录的<code>X锁</code>，这个过程也是一个当前读。由于需要对记录进行加锁，会阻塞其他事务的写操作，因此也叫<strong>加锁读</strong>或<strong>阻塞读</strong>。</p><p>当前读不仅会对当前记录加<strong>行记录锁</strong>，还会对查询范围空间的数据加<strong>间隙锁</strong>（<code>GAP LOCK</code>），因此可以阻止幻读问题的出现。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了事务的多种并发问题，以及用以避免不同程度问题的隔离级别，并较为详细描述了传统隔离级别的实现方式以及<code>MySQL</code>隔离级别的实现方式。但数据库的并发机制较为复杂，本文也只是做了大致的描述和介绍，很多细节还需要读者自己查询相关资料进行更细致的了解。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1、<a href="https://segmentfault.com/a/1190000012650596" target="_blank" rel="noopener">MySQL-InnoDB-MVCC多版本并发控制</a></p><p>2、<a href="https://juejin.im/book/5bffcbc9f265da614b11b731" target="_blank" rel="noopener">MySQL 是怎样运行的：从根儿上理解 MySQL</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter NoteBook 系列之  安装启动和常用设置</title>
      <link href="/python/jupyter/13129.html"/>
      <url>/python/jupyter/13129.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，目前支持运行 40 多种编程语言。</p><p>Jupyter Notebook 的本质是一个 Web 应用程序，便于创建和共享文学化程序文档，支持实时代码，数学方程，可视化和 markdown。对于一些追求可视化的选手，或者说在写一些需要一步步调试的功能时，是一个很好的工具。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="通过Anaconda安装"><a href="#通过Anaconda安装" class="headerlink" title="通过Anaconda安装"></a>通过<code>Anaconda</code>安装</h2><p><code>Anaconda</code> 是一个很有意思的软件，也是Python中举足轻重的一部分，不过网上一搜一大堆，就不过多介绍了。</p><p>按照 官方给定的教程下载后，就会在启动面板看到 <code>Jupyter</code> 的图标。<br><img src="https://img-blog.csdnimg.cn/20200320162319877.png" alt="file"></p><blockquote><p>注：按照个人安装的包不一致，显示的版本和图标顺序会有所不同。</p></blockquote><h2 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a><code>pip</code>安装</h2><ol><li><p>如果只安装了一个Python版本，那直接在命令行中使用以下命令就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip  <span class="comment"># 如果没有pip 则安装，如果有则更新</span></span><br><span class="line">pip install jupyter  <span class="comment"># 安装 jupyter包</span></span><br></pre></td></tr></table></figure></li><li><p>如果安装了多个Python版本，则根据设置的Python安装别名进行安装<br>在<code>Python2</code> 和<code>Python3</code>共存的前提下，设置了<code>Python3</code>的别名为<code>python3</code> 使用以下命令，对于大多数内置了Py2和Py3的Linux来说 ，也是这个命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure><p>在<code>Python2</code> 和<code>Python3</code>共存的前提下，设置了<code>Python2</code>的别名为<code>python2</code> 使用以下命令<br>如果已经安装了<code>Python 2</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip</span><br><span class="line">pip2 install jupyter</span><br></pre></td></tr></table></figure></li></ol><p>嗯，怎么说呢，在非Anaconda环境下，多Python版本管理是个非常蛋疼的事情。</p><!--more--><h1 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h1><ol><li>在<code>Anaconda</code>环境中启动<br><img src="https://img-blog.csdnimg.cn/2020032016232075.png" alt="file"><br>在Windows+Anaconda 环境中会出现这两个图标，如果没有修改过任何配置的话，它们的启动后的工作目录应该都是</li></ol><p><strong>文档</strong> 目录，即当前用户的文档目录。点这两个都可以启动，启动后会出现如下的弹窗。Windows和Linux差不多，只是部分显示信息不同。<br><img src="https://img-blog.csdnimg.cn/20200320162320413.png" alt="file"><br>我这个因为一些设置，将<strong>当前用户</strong>根目录设置为工作目录了。启动成功后，会通过浏览器打开一个页面，然后就可以在网页里操作了。<br>2. 命令行启动<br>在命令行中输入 <code>jupyter notebook</code><br><img src="https://img-blog.csdnimg.cn/20200320162320768.png" alt="file"><br>这个就使用了我之前设置的启动目录，所以我一般用命令行启动，比较好控制启动目录。<br>3. 启动并临时设置工作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook . # 设置当前目录为工作目录，并启动jupyter notebook</span><br><span class="line">jupyter notebook path # 设置 path 目录为工作目录，path可以为任意目录，但需要注意 Windows和Linux关于目录分隔符的区别</span><br></pre></td></tr></table></figure><h1 id="Jupyter设置"><a href="#Jupyter设置" class="headerlink" title="Jupyter设置"></a>Jupyter设置</h1><h2 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h2><p>在命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>如果命令执行成功，会在 %用户目录%/.jupyter/ 下生成一个 <code>jupyter_notebook_config.py</code> 文件。</p><blockquote><p>注意 Windows的 %用户目录% 指 C:/Users/&lt;登录用户名&gt;<br>Linux 值 运行 cd ~  返回的目录</p></blockquote><p>如果已存在，则会提示是否已覆盖，按需输入y/N，默认是不覆盖</p><h2 id="修改几个常用项"><a href="#修改几个常用项" class="headerlink" title="修改几个常用项"></a>修改几个常用项</h2><ol><li><code>c.NotebookApp.notebook_dir</code> 默认工作目录</li><li><code>c.NotebookApp.password</code>  密码，使用的是 SHA1 密码串<br>生成密码串的方式：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure>在python交互命令行中执行以上命令，然后两次输入密码，就会得到一个密码串，格式是：’sha1:&lt;密码&gt;’<br>将得到的密码串（包括 sha1 前缀） 赋值给 <code>c.NotebookApp.password</code></li></ol><p>以上是我最近遇到的一些设置项，更多的可以查看 <code>jupyter_notebook_config.py</code>文件。<br>需要指出的是，配置文件中所有设置项都是注释的，如果需要修改，必须先取消注释才行。</p><h2 id="关于-Windows下-通过快捷方式启动Jupyter-NoteBook-可能需要的问题"><a href="#关于-Windows下-通过快捷方式启动Jupyter-NoteBook-可能需要的问题" class="headerlink" title="关于 Windows下 通过快捷方式启动Jupyter NoteBook 可能需要的问题"></a>关于 Windows下 通过快捷方式启动Jupyter NoteBook 可能需要的问题</h2><p>如果直接通过快捷方式启动，会遇到设置的工作目录不起作用的问题，右键快捷方式点击属性<br><img src="https://img-blog.csdnimg.cn/202003201623217.png" alt="file"><br>然后修改箭头指向的内容，点确认保存修改。</p><h1 id="使用-Visual-Code-写Jupyter-NoteBook"><a href="#使用-Visual-Code-写Jupyter-NoteBook" class="headerlink" title="使用 Visual Code 写Jupyter NoteBook"></a>使用 Visual Code 写Jupyter NoteBook</h1><p>每次启动 Jupyter NoteBook都会弹出一个黑框，身为一个非典型强迫症看着着实难受，所以就尝试了用code。<br>感觉很不错，code 安装<code>python</code>扩展后，直接新建 XXX.ipynb 文件就会自动渲染，效果如下<br><img src="https://img-blog.csdnimg.cn/20200320162321231.png" alt="file"><br>点 三角形箭头执行当前单元格。</p><h1 id="不重启服务安装其他包"><a href="#不重启服务安装其他包" class="headerlink" title="不重启服务安装其他包"></a>不重启服务安装其他包</h1><p>在平时使用的时候会遇到这么一种情况，写的正嗨的时候，发现要用的包没安装，不得已关闭然后pip安装，再启动，感觉相当费劲。所以我就查了一下有没有在不重启服务的前提下，安装三方包。现有方案如下</p><h2 id="方案一-使用命令"><a href="#方案一-使用命令" class="headerlink" title="方案一 使用命令"></a>方案一 使用命令</h2><p>在<code>jupyter notebook</code> 的单元格里输入下面的命令，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install</span><br></pre></td></tr></table></figure><p><code>jupyter</code> 可以通过这种方式访问别的命令，例如 !ls !touch xxx.py</p><h2 id="方案二-使用python脚本"><a href="#方案二-使用python脚本" class="headerlink" title="方案二  使用python脚本"></a>方案二  使用<code>python</code>脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">ok = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> ok:</span><br><span class="line">    get_ipython().system(<span class="string">'pip install numpy'</span>)<span class="comment">#或者os.system('pip install numpy')</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> numpy</span><br><span class="line">        ok = <span class="literal">True</span>;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>这种方式比较万能，适合很多python环境，在脚本或者其他不能重启的环境中可以通过这种方式安装三方包，不过也是一种权宜之计。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>jupyter notebook 的初步使用就这么多，更多功能需要后续慢慢挖掘。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> jupyter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Java 枚举的骚操作</title>
      <link href="/java-plus/62567.html"/>
      <url>/java-plus/62567.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者介绍了一个在java 系统上枚举的骚操作，也可以说是一个优化代码的操作方式，个人感觉相当不错的玩法。</p><footer><strong>CodeSheep</strong><cite><a href="https://juejin.im/post/5e702e66f265da5770144f22" target="_blank" rel="noopener">《恕我直言，我怀疑你没怎么用过枚举》</a></cite></footer></blockquote><h1 id="我们是否一样？"><a href="#我们是否一样？" class="headerlink" title="我们是否一样？"></a>我们是否一样？</h1><p>估计很多小伙伴（也包括我自己）都有这种情况，在自学<code>Java</code>语言看书时，关于枚举<code>enum</code>这一块的知识点可能都有点 *<em>“轻敌” *</em>，觉得这块内容非常简单，一带而过，而且在实际写代码过程中也不注意运用。<br>是的，我也是这样！直到有一天我提的代码审核没过，被技术总监一顿批，我才重新拿起了《Java编程思想》，把枚举这块的知识点重新又审视了一遍。</p><a id="more"></a><h1 id="为什么需要枚举"><a href="#为什么需要枚举" class="headerlink" title="为什么需要枚举"></a>为什么需要枚举</h1><p>常量定义它不香吗？为啥非得用枚举？<br>举个栗子，就以B站上传视频为例，视频一般有三个状态：草稿、审核和发布，我们可以将其定义为静态常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoStatus</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Draft = <span class="number">1</span>; <span class="comment">//草稿</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Review = <span class="number">2</span>; <span class="comment">//审核</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Published = <span class="number">3</span>; <span class="comment">//发布</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这种单值类型的静态常量定义，本身也没错，主要是在使用的地方没有一个明确性的约束而已，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judgeVideoStatus</span><span class="params">( <span class="keyword">int</span> status )</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如这里的 <code>judgeVideoStatus</code> 函数的本意是传入 <code>VideoStatus</code> 的三种静态常量之一，但由于没有类型上的约束，因此传入任意一个int值都是可以的，编译器也不会提出任何警告。<br>但是在枚举类型出现之后，上面这种情况就可以用枚举严谨地去约束，比如用枚举去定义视频状态就非常简洁了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> VideoStatus &#123;</span><br><span class="line">    Draft, Review, Published</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且主要是在用枚举的地方会有更强的类型约束：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入参就有明确类型约束</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judgeVideoStatus</span><span class="params">( VideoStatus status )</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在使用 <code>judgeVideoStatus</code> 函数时，入参类型就会受到明确的类型约束，一旦传入无效值，编译器就会帮我们检查，从而规避潜在问题。<br>除此之外，枚举在扩展性方面比普常量更方便、也更优雅。</p><!--more--><h1 id="重新系统认识一下枚举"><a href="#重新系统认识一下枚举" class="headerlink" title="重新系统认识一下枚举"></a>重新系统认识一下枚举</h1><p>还是拿前文《答应我，别再if/else走天下了可以吗》中的那个例子来说：比如，在后台管理系统中，肯定有用户角色一说，而且角色一般都是固定的，适合定义成一个枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserRole &#123;</span><br><span class="line"></span><br><span class="line">    ROLE_ROOT_ADMIN,  <span class="comment">// 系统管理员</span></span><br><span class="line"></span><br><span class="line">    ROLE_ORDER_ADMIN, <span class="comment">// 订单管理员</span></span><br><span class="line"></span><br><span class="line">    ROLE_NORMAL       <span class="comment">// 普通用户</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们就用这个<code>UserRole</code>为例来说明枚举的所有基本用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">UserRole role1 = UserRole.ROLE_ROOT_ADMIN;</span><br><span class="line">UserRole role2 = UserRole.ROLE_ORDER_ADMIN;</span><br><span class="line">UserRole role3 = UserRole.ROLE_NORMAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// values()方法：返回所有枚举常量的数组集合</span></span><br><span class="line"><span class="keyword">for</span> ( UserRole role : UserRole.values() ) &#123;</span><br><span class="line">    System.out.println(role);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印：</span></span><br><span class="line"><span class="comment">// ROLE_ROOT_ADMIN</span></span><br><span class="line"><span class="comment">// ROLE_ORDER_ADMIN</span></span><br><span class="line"><span class="comment">// ROLE_NORMAL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ordinal()方法：返回枚举常量的序数，注意从0开始</span></span><br><span class="line">System.out.println( role1.ordinal() ); <span class="comment">// 打印0</span></span><br><span class="line">System.out.println( role2.ordinal() ); <span class="comment">// 打印1</span></span><br><span class="line">System.out.println( role3.ordinal() ); <span class="comment">// 打印2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// compareTo()方法：枚举常量间的比较</span></span><br><span class="line">System.out.println( role1.compareTo(role2) ); <span class="comment">//打印-1</span></span><br><span class="line">System.out.println( role2.compareTo(role3) ); <span class="comment">//打印-2</span></span><br><span class="line">System.out.println( role1.compareTo(role3) ); <span class="comment">//打印-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// name()方法：获得枚举常量的名称</span></span><br><span class="line">System.out.println( role1.name() ); <span class="comment">// 打印ROLE_ROOT_ADMIN</span></span><br><span class="line">System.out.println( role2.name() ); <span class="comment">// 打印ROLE_ORDER_ADMIN</span></span><br><span class="line">System.out.println( role3.name() ); <span class="comment">// 打印ROLE_NORMAL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// valueOf()方法：返回指定名称的枚举常量</span></span><br><span class="line">System.out.println( UserRole.valueOf( <span class="string">"ROLE_ROOT_ADMIN"</span> ) );</span><br><span class="line">System.out.println( UserRole.valueOf( <span class="string">"ROLE_ORDER_ADMIN"</span> ) );</span><br><span class="line">System.out.println( UserRole.valueOf( <span class="string">"ROLE_NORMAL"</span> ) );</span><br></pre></td></tr></table></figure><p>除此之外，枚举还可以用于<code>switch</code>语句中，而且意义更加明确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">UserRole userRole = UserRole.ROLE_ORDER_ADMIN;</span><br><span class="line"><span class="keyword">switch</span> (userRole) &#123;</span><br><span class="line">    <span class="keyword">case</span> ROLE_ROOT_ADMIN:  <span class="comment">// 比如此处的意义就非常清晰了，比1，2，3这种数字好！</span></span><br><span class="line">        System.out.println(<span class="string">"这是系统管理员角色"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ROLE_ORDER_ADMIN:</span><br><span class="line">        System.out.println(<span class="string">"这是订单管理员角色"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ROLE_NORMAL:</span><br><span class="line">        System.out.println(<span class="string">"这是普通用户角色"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义扩充枚举"><a href="#自定义扩充枚举" class="headerlink" title="自定义扩充枚举"></a>自定义扩充枚举</h1><p>上面展示的枚举例子非常简单，仅仅是单值的情形，而实际项目中用枚举往往是多值用法。<br>比如，我想扩充一下上面的<code>UserRole</code>枚举，在里面加入 角色名 – 角色编码 的对应关系，这也是实际项目中常用的用法。<br>这时候我们可以在枚举里自定义各种属性、构造函数、甚至各种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserRole &#123;</span><br><span class="line"></span><br><span class="line">    ROLE_ROOT_ADMIN( <span class="string">"系统管理员"</span>, <span class="number">000000</span> ),</span><br><span class="line">    ROLE_ORDER_ADMIN( <span class="string">"订单管理员"</span>, <span class="number">100000</span> ),</span><br><span class="line">    ROLE_NORMAL( <span class="string">"普通用户"</span>, <span class="number">200000</span> ),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下为自定义属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String roleName;  <span class="comment">//角色名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer roleCode; <span class="comment">//角色编码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下为自定义构造函数</span></span><br><span class="line">    </span><br><span class="line">    UserRole( String roleName, Integer roleCode ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">        <span class="keyword">this</span>.roleCode = roleCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下为自定义方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.roleCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getRoleCodeByRoleName</span><span class="params">( String roleName )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( UserRole enums : UserRole.values() ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( enums.getRoleName().equals( roleName ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> enums.getRoleCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可知，在<code>enum</code>枚举类中完全可以像在普通<code>Class</code>里一样声明属性、构造函数以及成员方法。</p><h1 id="枚举-接口"><a href="#枚举-接口" class="headerlink" title="枚举 + 接口 = ?"></a>枚举 + 接口 = ?</h1><p>比如在我的前文《答应我，别再if/else走天下了可以吗》中讲烦人的if/else消除时，就讲过如何通过让枚举去实现接口来方便的完成。<br>这地方不妨再回顾一遍：<br>什么角色能干什么事，这很明显有一个对应关系，所以我们首先定义一个公用的接口RoleOperation，表示不同角色所能做的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleOperation</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">op</span><span class="params">()</span></span>;  <span class="comment">// 表示某个角色可以做哪些op操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们将不同角色的情况全部交由枚举类来做，定义一个枚举类RoleEnum，并让它去实现<code>RoleOperation</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RoleEnum implements RoleOperation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 系统管理员(有A操作权限)</span></span><br><span class="line">    ROLE_ROOT_ADMIN &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">op</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ROLE_ROOT_ADMIN:"</span> + <span class="string">" has AAA permission"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单管理员(有B操作权限)</span></span><br><span class="line">    ROLE_ORDER_ADMIN &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">op</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ROLE_ORDER_ADMIN:"</span> + <span class="string">" has BBB permission"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通用户(有C操作权限)</span></span><br><span class="line">    ROLE_NORMAL &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">op</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ROLE_NORMAL:"</span> + <span class="string">" has CCC permission"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在调用处就变得异常简单了，一行代码就行了，根本不需要什么<code>if/else</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JudgeRole</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">( String roleName )</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一行代码搞定！之前的if/else灰飞烟灭</span></span><br><span class="line">        <span class="keyword">return</span> RoleEnum.valueOf(roleName).op();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且这样一来，以后假如我想扩充条件，只需要去枚举类中加代码即可，而不用改任何老代码，非常符合开闭原则！</p><h1 id="枚举与设计模式"><a href="#枚举与设计模式" class="headerlink" title="枚举与设计模式"></a>枚举与设计模式</h1><p>什么？枚举还能实现设计模式？<br>是的！不仅能而且还能实现好几种！</p><h2 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化，避免外部创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个内部枚举</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum&#123;</span><br><span class="line"></span><br><span class="line">        SEED;  <span class="comment">// 唯一一个枚举对象，我们称它为“种子选手”！</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">        SingletonEnum()&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton(); <span class="comment">//真正的对象创建隐蔽在此！</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstnce</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 故意外露的对象获取方法，也是外面获取实例的唯一入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonEnum.SEED.getInstnce(); <span class="comment">// 通过枚举的种子选手来完成</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、策略模式"><a href="#2、策略模式" class="headerlink" title="2、策略模式"></a>2、策略模式</h2><p>这个也比较好举例，比如用枚举就可以写出一个基于策略模式的加减乘除计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Calculator &#123;</span><br><span class="line"></span><br><span class="line">        ADDITION &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Double <span class="title">execute</span><span class="params">( Double x, Double y )</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x + y; <span class="comment">// 加法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        SUBTRACTION &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Double <span class="title">execute</span><span class="params">( Double x, Double y )</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x - y; <span class="comment">// 减法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        MULTIPLICATION &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Double <span class="title">execute</span><span class="params">( Double x, Double y )</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x * y; <span class="comment">// 乘法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DIVISION &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Double <span class="title">execute</span><span class="params">( Double x, Double y )</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x/y;  <span class="comment">// 除法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Double <span class="title">execute</span><span class="params">(Double x, Double y)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println( Calculator.ADDITION.execute( <span class="number">4.0</span>, <span class="number">2.0</span> ) );       </span><br><span class="line">        <span class="comment">// 打印 6.0</span></span><br><span class="line">        System.out.println( Calculator.SUBTRACTION.execute( <span class="number">4.0</span>, <span class="number">2.0</span> ) );    </span><br><span class="line">        <span class="comment">// 打印 2.0</span></span><br><span class="line">        System.out.println( Calculator.MULTIPLICATION.execute( <span class="number">4.0</span>, <span class="number">2.0</span> ) ); </span><br><span class="line">        <span class="comment">// 打印 8.0</span></span><br><span class="line">        System.out.println( Calculator.DIVISION.execute( <span class="number">4.0</span>, <span class="number">2.0</span> ) );       </span><br><span class="line">        <span class="comment">// 打印 2.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="专门用于枚举的集合类"><a href="#专门用于枚举的集合类" class="headerlink" title="专门用于枚举的集合类"></a>专门用于枚举的集合类</h1><p>我们平常一般习惯于使用诸如：<code>HashMap</code> 和 <code>HashSet</code>等集合来盛放元素，而对于枚举，有它专门的集合类：<code>EnumSet</code>和<code>EnumMap</code></p><h2 id="1、EnumSet"><a href="#1、EnumSet" class="headerlink" title="1、EnumSet"></a>1、EnumSet</h2><p><code>EnumSet</code> 是专门为盛放枚举类型所设计的 Set 类型。<br>还是举例来说，就以文中开头定义的角色枚举为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserRole &#123;</span><br><span class="line"></span><br><span class="line">    ROLE_ROOT_ADMIN,  <span class="comment">// 系统管理员</span></span><br><span class="line"></span><br><span class="line">    ROLE_ORDER_ADMIN, <span class="comment">// 订单管理员</span></span><br><span class="line"></span><br><span class="line">    ROLE_NORMAL       <span class="comment">// 普通用户</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如系统里来了一批人，我们需要查看他是不是某个角色中的一个：<br>// 定义一个管理员角色的专属集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">EnumSet&lt;UserRole&gt; userRolesForAdmin </span><br><span class="line">    = EnumSet.of( </span><br><span class="line">        UserRole.ROLE_ROOT_ADMIN,</span><br><span class="line">        UserRole.ROLE_ORDER_ADMIN </span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断某个进来的用户是不是管理员</span></span><br><span class="line"><span class="function">Boolean <span class="title">isAdmin</span><span class="params">( User user )</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( userRoles.contains( user.getUserRole() ) )</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、EnumMap"><a href="#2、EnumMap" class="headerlink" title="2、EnumMap"></a>2、EnumMap</h2><p>同样，<code>EnumMap</code> 则是用来专门盛放枚举类型为key的 Map 类型。<br>比如，系统里来了一批人，我们需要统计不同的角色到底有多少人这种的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;UserRole,Integer&gt; userStatisticMap = <span class="keyword">new</span> EnumMap&lt;&gt;(UserRole<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( User user : userList ) &#123;</span><br><span class="line">    Integer num = userStatisticMap.get( user.getUserRole() );</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">null</span> != num ) &#123;</span><br><span class="line">        userStatisticMap.put( user.getUserRole(), num+<span class="number">1</span> );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        userStatisticMap.put( user.getUserRole(), <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>EnumMap</code>可以说非常方便了。</p><h1 id="总-结"><a href="#总-结" class="headerlink" title="总  结"></a>总  结</h1><p>小小的枚举就玩出这么多的花样，不过好在探索和总结的过程还挺有意思的，也复习了很多知识，慢慢来吧。</p>]]></content>
      
      
      <categories>
          
          <category> Java 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Java后端学习路线</title>
      <link href="/java-plus/55489.html"/>
      <url>/java-plus/55489.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者是CSDN里一个有名的技术分享博主，这是他总结的一份Java后端学习路线，个人看了之后感觉很不错，就搬了过来。</p><footer><strong>敖丙</strong><cite><a href="https://blog.csdn.net/qq_35190492/article/details/104548249" target="_blank" rel="noopener">Java后端学习路线（适合科班、非科班和已工作的仔）</a></cite></footer></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这期我想写很久了，但是因为时间的原因一直拖到了现在，我以为一两天就写完了，结果从构思到整理资料，再到写出来用了差不多一周的时间吧。<br>你们也知道丙丙一直都是创作鬼才来的，所以我肯定不会一本正经的写，我想了好几个切入点，最后决定用一个完整的电商系统作为切入点，带着大家看看，我们需要学些啥，我甚至还收集配套视频和资料，暖男石锤啊，这期是呕心沥血之作，不要白嫖了。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在写这个文章之前，我花了点时间，自己臆想了一个电商系统，基本上算是麻雀虽小五脏俱全，我今天就用它开刀，一步步剖析，我会讲一下我们可能会接触的技术栈可能不全，但是够用，最后给个学习路线。</p><p><strong>Tip：</strong>请多欣赏一会，每个点看一下，看看什么地方是你接触过的，什么技术栈是你不太熟悉的，我觉得还算是比较全的，有什么建议也可以留言给我。<br><img src="/images/pasted-22.png" alt="pasted image"><br>不知道大家都看了一下没，现在我们就要庖丁解牛了，我从上到下依次分析。</p><a id="more"></a><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>你可能会会好奇，你不是讲后端学习路线嘛，为啥还有前端的部分，我只能告诉你，傻瓜，肤浅。</p><p>我们可不能闭门造车，谁告诉你后端就不学点前端了？</p><p>前端现在很多也了解后端的技术栈的，你想我们去一个网站，最先接触的，最先看到的是啥？</p><p>没错就是前端，在大学你要是找不到专门的前端同学，去做系统肯定也要自己顶一下前端的，那我觉得最基本的技术栈得熟悉和了解吧，丙丙现在也是偶尔会开发一下我们的管理系统主要是VUE和React。</p><p>在这里我列举了我目前觉得比较简单和我们后端可以了解的技术栈，都是比较基础的。</p><p>作为一名后端了解部分前端知识还是很有必要的，在以后开发的时候，公司有前端那能帮助你前后端联调更顺畅，如果没前端你自己也能顶一下简单的页面。</p><p>HTML、CSS、JS、Ajax我觉得是必须掌握的点，看着简单其实深究或者去操作的话还是有很多东西的，其他作为扩展有兴趣可以了解，反正入门简单，只是精通很难很难。</p><p>在这一层不光有这些还有Http协议和Servlet，request、response、cookie、session这些也会伴随你整个技术生涯，理解他们对后面的你肯定有不少好处。<br><img src="/images/pasted-23.png" alt="pasted image"><br><strong>Tip：</strong>我这里最后删除了JSP相关的技术，我个人觉得没必要学了，很多公司除了老项目之外，新项目都不会使用那些技术了。</p><p>前端在我看来比后端难，技术迭代比较快，知识好像也没特定的体系，所以面试大厂的前端很多朋友都说难，不是技术多难，而是知识多且复杂，找不到一个完整的体系，相比之下后端明朗很多，我后面就开始讲后端了。</p><h2 id="网关层："><a href="#网关层：" class="headerlink" title="网关层："></a>网关层：</h2><p>互联网发展到现在，涌现了很多互联网公司，技术更新迭代了很多个版本，从早期的单机时代，到现在超大规模的互联网时代，几亿人参与的春运，几千亿成交规模的双十一，无数互联网前辈的造就了现在互联网的辉煌。</p><p>微服务，分布式，负载均衡等我们经常提到的这些名词都是这些技术在场景背后支撑。</p><p>单机顶不住，我们就多找点服务器，但是怎么将流量均匀的打到这些服务器上呢？</p><h3 id="负载均衡，LVS"><a href="#负载均衡，LVS" class="headerlink" title="负载均衡，LVS"></a>负载均衡，LVS</h3><p>我们机器都是IP访问的，那怎么通过我们申请的域名去请求到服务器呢？</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>大家刷的抖音，B站，快手等等视频服务商，是怎么保证同时为全国的用户提供快速的体验？</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>我们这么多系统和服务，还有这么多中间件的调度怎么去管理调度等等？</p><h3 id="zk"><a href="#zk" class="headerlink" title="zk"></a>zk</h3><p>这么多的服务器，怎么对外统一访问呢，就可能需要知道反向代理的服务器。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p><img src="/images/pasted-25.png" alt="pasted image"></p><p>这一层做了反向负载、服务路由、服务治理、流量管理、安全隔离、服务容错等等都做了，大家公司的内外网隔离也是这一层做的。</p><p>我之前还接触过一些比较有意思的项目，所有对外的接口都是加密的，几十个服务会经过网关解密，找到真的路由再去请求。</p><p><img src="/images/pasted-26.png" alt="pasted image"></p><p>这一层的知识点其实也不少，你往后面学会发现分布式事务，分布式锁，还有很多中间件都离不开zk这一层，我们继续往下看。</p><h2 id="服务层："><a href="#服务层：" class="headerlink" title="服务层："></a>服务层：</h2><p>这一层有点东西了，算是整个框架的核心，如果你跟我帅丙一样以后都是从事后端开发的话，我们基本上整个技术生涯，大部分时间都在跟这一层的技术栈打交道了，各种琳琅满目的中间件，计算机基础知识，Linux操作，算法数据结构，架构框架，研发工具等等。</p><p>我想在看这个文章的各位，计算机基础肯定都是学过的吧，如果大学的时候没好好学，我觉得还是有必要再看看的。</p><p>为什么我们网页能保证安全可靠的传输，你可能会了解到HTTP，TCP协议，什么三次握手，四次挥手。</p><p>还有进程、线程、协程，什么内存屏障，指令乱序，分支预测，CPU亲和性等等，在之后的编程生涯，如果你能掌握这些东西，会让你在遇到很多问题的时候瞬间get到点，而不是像个无头苍蝇一样乱撞（然而丙丙还做得不够）。</p><p>了解这些计算机知识后，你就需要接触编程语言了，大学的C语言基础会让你学什么语言入门都会快点，我选择了面向对象的JAVA，但是也不知道为啥现在还没对象。</p><p>JAVA的基础也一样重要，面向对象（包括类、对象、方法、继承、封装、抽象、 多态、消息解析等），常见API，数据结构，集合框架，设计模式（包括创建型、结构型、行为型），多线程和并发，I/O流，Stream，网络编程你都需要了解。</p><p>代码会写了，你就要开始学习一些能帮助你把系统变得更加规范的框架，SSM可以会让你的开发更加便捷，结构层次更加分明。</p><p>写代码的时候你会发现你大学用的Eclipse在公司看不到了，你跟大家一样去用了IDEA，第一天这是什么玩意，一周后，真香，但是这玩意收费有点贵，那免费的VSCode真的就是不错的选择了。</p><p>代码写的时候你会接触代码的仓库管理工具maven、Gradle，提交代码的时候会去写项目版本管理工具Git。</p><p>代码提交之后，发布之后你会发现很多东西需要自己去服务器亲自排查，那Linux的知识点就可以在里面灵活运用了，查看进程，查看文件，各种Vim操作等等。</p><p>系统的优化很多地方没优化的空间了，你可能会尝试从算法，或者优化数据结构去优化，你看到了HashMap的源码，想去了解红黑树，然后在算法网上看到了二叉树搜索树和各种常见的算法问题，刷多了，你也能总结出精华所在，什么贪心，分治，动态规划等。</p><p>这么多个服务，你发现HTTP请求已经开始有点不满足你的需求了，你想开发更便捷，像访问本地服务一样访问远程服务，所以我们去了解了Dubbo，Spring cloud。</p><p>了解Dubbo的过程中，你发现了RPC的精华所在，所以你去接触到了高性能的NIO框架，Netty。</p><p>代码写好了，服务也能通信了，但是你发现你的代码链路好长，都耦合在一起了，所以你接触了消息队列，这种异步的处理方式，真香。</p><p>他还可以帮你在突发流量的时候用队列做缓冲，但是你发现分布式的情况，事务就不好管理了，你就了解到了分布式事务，什么两段式，三段式，TCC，XA，阿里云的全局事务服务GTS等等。</p><p>分布式事务的时候你会想去了解RocketMQ，因为他自带了分布式事务的解决方案，大数据的场景你又看到了Kafka。</p><p><img src="/images/pasted-27.png" alt="pasted image"></p><p>我上面提到过zk，像Dubbo、Kafka等中间件都是用它做注册中心的，所以很多技术栈最后都组成了一个知识体系，你先了解了体系中的每一员，你才能把它们联系起来。</p><p><img src="/images/pasted-28.png" alt="pasted image"></p><p>服务的交互都从进程内通信变成了远程通信，所以性能必然会受到一些影响。</p><p>此外由于很多不确定性的因素，例如网络拥塞、Server 端服务器宕机、挖掘机铲断机房光纤等等，需要许多额外的功能和措施才能保证微服务流畅稳定的工作。</p><p>Spring Cloud 中就有 Hystrix 熔断器、Ribbon客户端负载均衡器、Eureka注册中心等等都是用来解决这些问题的微服务组件。</p><p>你感觉学习得差不多了，你发现各大论坛博客出现了一些前沿技术，比如容器化，你可能就会去了解容器化的知识，像Docker，Kubernetes（K8s）等。</p><p>微服务之所以能够快速发展，很重要的一个原因就是：容器化技术的发展和容器管理系统的成熟。</p><p><img src="/images/pasted-29.png" alt="pasted image"></p><p>这一层的东西呢其实远远不止这些的，我不过多赘述，写多了像个劝退师一样，但是大家也不用慌，大部分的技术都是慢慢接触了，工作中慢慢去了解，去深入的。</p><p>好啦我们继续沿着图往下看，那再往下是啥呢？</p><h2 id="数据层："><a href="#数据层：" class="headerlink" title="数据层："></a>数据层：</h2><p>数据库可能是整个系统中最值钱的部分了，在我码文字的前一天，刚好发生了微盟程序员删库跑路的操作，删库跑路其实是我们在网上最常用的笑话，没想到还是照进了现实。</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gca2znjcfjg30880521kx.gif" alt="pasted image"></p><p>这里也提一点点吧，36小时的故障，其实在互联网公司应该是个笑话了吧，权限控制没做好类似rm -rf 、fdisk、drop等等这样的高危命令是可以实时拦截掉的，备份，全量备份，增量备份，延迟备份，异地容灾全部都考虑一下应该也不至于这样，一家上市公司还是有点点不应该。</p><p><img src="/images/pasted-31.png" alt="数据库事务特性"></p><p>数据库基本的事务隔离级别，索引，SQL，主被同步，读写分离等都可能是你学的时候要了解到的。</p><p>上面我们提到了安全，不要把鸡蛋放一个篮子的道理大家应该都知道，那分库的意义就很明显了，然后你会发现时间久了表的数据大了，就会想到去接触分表，什么TDDL、Sharding-JDBC、DRDS这些插件都会接触到。</p><p>你发现流量大的时候，或者热点数据打到数据库还是有点顶不住，压力太大了，那非关系型数据库就进场了，Redis当然是首选，但是MongoDB、memcache也有各自的应用场景。</p><p>Redis使用后，真香，真快，但是你会开始担心最开始提到的安全问题，这玩意快是因为在内存中操作，那断点了数据丢了怎么办？你就开始阅读官方文档，了解RDB，AOF这些持久化机制，线上用的时候还会遇到缓存雪崩击穿、穿透等等问题。</p><p>单机不满足你就用了，他的集群模式，用了集群可能也担心集群的健康状态，所以就得去了解哨兵，他的主从同步，时间久了Key多了，就得了解内存淘汰机制……</p><p>他的大容量存储有问题，你可能需要去了解Pika….<br><img src="/images/pasted-32.png" alt="pasted image"></p><p><img src="/images/pasted-33.png" alt="pasted image"><br>其实远远没完，每个的点我都点到为止，但是其实要深究每个点都要学很久，我们接着往下看</p><h1 id="实时-离线-大数据"><a href="#实时-离线-大数据" class="headerlink" title="实时/离线/大数据"></a>实时/离线/大数据</h1><p>等你把几种关系型非关系型数据库的知识点，整理清楚后，你会发现数据还是大啊，而且数据的场景越来越多多样化了，那大数据的各种中间件你就得了解了。</p><p>你会发现很多场景，不需要实时的数据，比如你查你的支付宝去年的，上个月的账单，这些都是不会变化的数据，没必要实时，那你可能会接触像ODPS这样的中间件去做数据的离线分析。</p><p>然后你可能会接触Hadoop系列相关的东西，比如于Hadoop（HDFS）的一个数据仓库工具Hive，是建立在 Hadoop 文件系统之上的分布式面向列的数据库HBase 。</p><p>写多的场景，适合做一些简单查询，用他们又有点大材小用，那Cassandra就再合适不过了。</p><p>离线的数据分析没办法满足一些实时的常见，类似风控，那Flink你也得略知一二，他的窗口思想还是很有意思。</p><p>数据接触完了，计算引擎Spark你是不是也不能放过……</p><p><img src="/images/pasted-34.png" alt="pasted image"></p><h2 id="搜索引擎："><a href="#搜索引擎：" class="headerlink" title="搜索引擎："></a>搜索引擎：</h2><p>传统关系型数据库和NoSQL非关系型数据都没办法解决一些问题，比如我们在百度，淘宝搜索东西的时候，往往都是几个关键字在一起一起搜索东西的，在数据库除非把几次的结果做交集，不然很难去实现。</p><p>那全文检索引擎就诞生了，解决了搜索的问题，你得思考怎么把数据库的东西实时同步到ES中去，那你可能会思考到logstash去定时跑脚本同步，又或者去接触伪装成一台MySQL从服务的Canal，他会去订阅MySQL主服务的binlog，然后自己解析了去操作Es中的数据。</p><p>这些都搞定了，那可视化的后台查询又怎么解决呢？Kibana，他他是一个可视化的平台，甚至对Es集群的健康管理都做了可视化，很多公司的日志查询系统都是用它做的。</p><p><img src="/images/pasted-35.png" alt="pasted image"></p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p>看了这么久你是不是发现，帅丙只是一直在介绍每个层级的技术栈，并没说到具体的一个路线，那是因为我想让大家先有个认知或者说是扫盲吧，我一样用脑图的方式汇总一下吧，如果图片被平台二压了，可以去公众号回复【路线】。</p><p><img src="/images/pasted-36.png" alt="pasted image"></p><h2 id="资料-学习网站"><a href="#资料-学习网站" class="headerlink" title="资料/学习网站"></a>资料/学习网站</h2><p>JavaFamily：由一个在互联网苟且偷生的男人维护的GitHub</p><p>CodeGym ：一个在线Java编程课程，80%的内容是练习，适合一窍不通的入门者。</p><p>Wibit Online Java Courses ：一个非常有趣的编程学习网站，各种生动的动画形象能让人忘记学习的枯燥。在线视频学习，非常适合零基础。</p><p>stanford CS106A: Programming Methodology ：斯坦福经典课程系列，完全没有编程经验，想学Java语言的，可以看看这个课程。</p><p>Bloombenc ：一个在线交互式学习平台，老师可以根据你的学习能力和节奏修改他们的教学方法，还可以在平台上编码。</p><p>Imooc：慕课网，我大学的C语言就是在这里看的</p><p>CodeAcademy ：比较实用的Java在线课程，注重的是在找工作时非常有用的技术能力。</p><p>PLURALSIGHT：整合了很多Java的视频课程，部分免费，部分付费，可以根据自己的需要挑选。</p><p>Lynda Online Java Training Videos：Java进阶课程，包括如何使用JDBC来集成MySQL数据库，Reflection API，管理文件和目录等。</p><p>九章基础算法班（Java）：中文在线互动课，随时开始学习。</p><p>BeginnersBook：Java初学者免费教程，有稍微一些编程基础之后，可以跟着文档里的代码练习。</p><p>docs.oracle.com/javase/tutorial：官方Java指南，对了解几乎所有的java技术特性都非常有帮助。</p><p>JournalDev：Java相关教程及问答</p><p>JavaWorld：最早的一个Java站点，每周更新Java技术文章。</p><p>developer.com/java ：由<a href="http://Gamelan.com" target="_blank" rel="noopener">http://Gamelan.com</a> 维护的Java技术文章网站。</p><p>IBM Developerworks技术网站：IBM的Develperworks技术网站，这是其中的Java技术主页</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gca3sgtqvnj31vu0rk1ky.jpg" alt="pasted image"></p><h1 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h1><p>如果你想去一家不错的公司，但是目前的硬实力又不到，我觉得还是有必要去努力一下的，技术能力的高低能决定你走多远，平台的高低，能决定你的高度。</p><p>如果你通过努力成功进入到了心仪的公司，一定不要懈怠放松，职场成长和新技术学习一样，不进则退。</p><p>丙丙发现在工作中发现我身边的人真的就是实力越强的越努力，最高级的自律，享受孤独（周末的歪哥）</p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc90z8argwj30sg0lcaf3.jpg" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我提到的技术栈你想全部了解，我觉得初步了解可能几个月就够了，这里的了解仅限于你知道它，知道他是干嘛的，知道怎么去使用它，并不是说深入了解他的底层原理，了解他的常见问题，熟悉问题的解决方案等等。</p><p>你想做到后者，基本上只能靠时间上的日积月累，或者不断的去尝试积累经验，也没什么速成的东西，欲速则不达大家也是知道的。</p><p>技术这条路，说实话很枯燥，很辛苦，但是待遇也会高于其他一些基础岗位。</p><p>所实话我大学学这个就是为了兴趣，我从小对电子，对计算机都比较热爱，但是现在打磨得，现在就是为了钱吧，是不是很现实？若家境殷实，谁愿颠沛流离。</p><p>但是至少丙丙因为做软件，改变了家庭的窘境，自己日子也向小康一步步迈过去。</p><p>说做程序员改变了我和我家人的一生可能夸张了，但是我总有一种下班辈子会因为我选择走这条路而改变的错觉。</p><p>我是敖丙，一个在互联网苟且偷生的工具人。</p><p>创作不易，本期硬核，不想被白嫖，各位的「三连」就是丙丙创作的最大动力，我们下次见！<br>————————————————<br>版权声明：本文为CSDN博主「敖 丙」的原创文章，遵循 CC 4.0 BY 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_35190492/article/details/104548249" target="_blank" rel="noopener">https://blog.csdn.net/qq_35190492/article/details/104548249</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> Java </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】MyBatis常见面试题和答案（2020最新版）</title>
      <link href="/java-plus/12234.html"/>
      <url>/java-plus/12234.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这几天在玩Java，看到了这里，就翻了一篇 MyBatis相关的文章出来</p><footer><strong>ThinkWon</strong><cite><a href="https://blog.csdn.net/ThinkWon/article/details/101292950" target="_blank" rel="noopener">MyBatis常见面试题和答案（2020最新版）</a></cite></footer></blockquote><p><img src="/images/pasted-16.png" alt="pasted image"></p><h1 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h1><h2 id="MyBatis是什么？"><a href="#MyBatis是什么？" class="headerlink" title="MyBatis是什么？"></a>MyBatis是什么？</h2><p>MyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><a id="more"></a><h2 id="ORM是什么"><a href="#ORM是什么" class="headerlink" title="ORM是什么"></a>ORM是什么</h2><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</p><h2 id="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"><a href="#为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？" class="headerlink" title="为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？"></a>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h2><p>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。<br>而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><h2 id="传统JDBC开发存在的问题"><a href="#传统JDBC开发存在的问题" class="headerlink" title="传统JDBC开发存在的问题"></a>传统JDBC开发存在的问题</h2><p>频繁创建数据库连接对象、释放，容易造成系统资源浪费，影响系统性能。可以使用连接池解决这个问题。但是使用jdbc需要自己实现连接池。sql语句定义、参数设置、结果集处理存在硬编码。实际项目中sql语句变化的可能性较大，一旦发生变化，需要修改java代码，系统需要重新编译，重新发布。不好维护。使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。结果集处理存在重复代码，处理麻烦。如果可以映射成Java对象会比较方便。</p><h2 id="JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？"><a href="#JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？" class="headerlink" title="JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？"></a>JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？</h2><ol><li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题。<br>解决：在mybatis-config.xml中配置数据链接池，使用连接池管理数据库连接。</li><li>Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。<br>解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。</li><li>向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。<br>解决：Mybatis自动将java对象映射至sql语句。</li><li>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。<br>解决：Mybatis自动将sql执行结果映射至java对象。</li></ol><h2 id="Mybatis优缺点"><a href="#Mybatis优缺点" class="headerlink" title="Mybatis优缺点"></a>Mybatis优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>与传统的数据库访问技术相比，ORM有以下优点：</p><ul><li>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用</li><li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）提供映射标签，支持对象与数据库的ORM字段关系映射；</li><li>提供对象关系映射标签，支持对象关系组件维护</li><li>能够与Spring很好的集成</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ul><h2 id="MyBatis框架适用场景"><a href="#MyBatis框架适用场景" class="headerlink" title="MyBatis框架适用场景"></a>MyBatis框架适用场景</h2><p>MyBatis专注于SQL本身，是一个足够灵活的DAO层解决方案。对性能的要求很高，或者需求变化较多的项目，如互联网项目，MyBatis将是不错的选择。</p><h2 id="Hibernate-和-MyBatis-的区别"><a href="#Hibernate-和-MyBatis-的区别" class="headerlink" title="Hibernate 和 MyBatis 的区别"></a>Hibernate 和 MyBatis 的区别</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>都是对jdbc的封装，都是持久层的框架，都用于dao层的开发。</p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><h4 id="映射关系"><a href="#映射关系" class="headerlink" title="映射关系"></a>映射关系</h4><ul><li>MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单</li><li>Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂</li></ul><h4 id="SQL优化和移植性"><a href="#SQL优化和移植性" class="headerlink" title="SQL优化和移植性"></a>SQL优化和移植性</h4><ul><li>Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。</li><li>MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。</li></ul><h4 id="开发难易程度和学习成本"><a href="#开发难易程度和学习成本" class="headerlink" title="开发难易程度和学习成本"></a>开发难易程度和学习成本</h4><ul><li>Hibernate 是重量级框架，学习使用门槛高，适合于需求相对稳定，中小型的项目，比如：办公自动化系统</li><li>MyBatis 是轻量级框架，学习使用门槛低，适合于需求变化频繁，大型的项目，比如：互联网电子商务系统</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MyBatis 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架，Hibernate 是一个强大、方便、高效、复杂、间接、全自动化的持久层框架。</p><h1 id="MyBatis的解析和运行原理"><a href="#MyBatis的解析和运行原理" class="headerlink" title="MyBatis的解析和运行原理"></a>MyBatis的解析和运行原理</h1><h3 id="MyBatis编程步骤是什么样的"><a href="#MyBatis编程步骤是什么样的" class="headerlink" title="MyBatis编程步骤是什么样的"></a>MyBatis编程步骤是什么样的</h3><ol><li>创建SqlSessionFactory</li><li>通过SqlSessionFactory创建SqlSession</li><li>通过sqlsession执行数据库操作</li><li>调用session.commit()提交事务</li><li>调用session.close()关闭会话</li></ol><h2 id="请说说MyBatis的工作原理"><a href="#请说说MyBatis的工作原理" class="headerlink" title="请说说MyBatis的工作原理"></a>请说说MyBatis的工作原理</h2><p>在学习 MyBatis 程序之前，需要了解一下 MyBatis 工作原理，以便于理解程序。<br>MyBatis 的工作原理如下图<br><img src="/images/pasted-17.png" alt="pasted image"></p><ul><li>1）读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。</li><li>2）加载映射文件。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</li><li>3）构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li><li>4）创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li><li>5）Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</li><li>6）MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。</li><li>7）输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。</li><li>8）输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。</li></ul><h2 id="MyBatis的功能架构是怎样的"><a href="#MyBatis的功能架构是怎样的" class="headerlink" title="MyBatis的功能架构是怎样的"></a>MyBatis的功能架构是怎样的</h2><p><img src="/images/pasted-18.png" alt="pasted image"><br>我们把Mybatis的功能架构分为三层：</p><ul><li>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</li></ul><h2 id="MyBatis的框架架构设计是怎么样的"><a href="#MyBatis的框架架构设计是怎么样的" class="headerlink" title="MyBatis的框架架构设计是怎么样的"></a>MyBatis的框架架构设计是怎么样的</h2><p><img src="/images/pasted-19.png" alt="pasted image"><br>这张图从上往下看。MyBatis的初始化，会从mybatis-config.xml配置文件，解析构造成Configuration这个类，就是图中的红框。</p><ul><li><p>(1)加载配置：配置来源于两个地方，一处是配置文件，一处是Java代码的注解，将SQL的配置信息加载成为一个个MappedStatement对象（包括了传入参数映射配置、执行的SQL语句、结果映射配置），存储在内存中。</p></li><li><p>(2)SQL解析：当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象（可以是Map、JavaBean或者基本数据类型），Mybatis会根据SQL的ID找到对应的MappedStatement，然后根据传入参数对象对MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数。</p></li><li><p>(3)SQL执行：将最终得到的SQL和参数拿到数据库进行执行，得到操作数据库的结果。</p></li><li><p>(4)结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap、JavaBean或者基本数据类型，并将最终结果返回。</p></li></ul><h2 id="为什么需要预编译"><a href="#为什么需要预编译" class="headerlink" title="为什么需要预编译"></a>为什么需要预编译</h2><ol><li><p>定义：<br>SQL 预编译指的是数据库驱动在发送 SQL 语句和参数给 DBMS 之前对 SQL 语句进行编译，这样 DBMS 执行 SQL 时，就不需要重新编译。</p></li><li><p>为什么需要预编译<br>JDBC 中使用对象 PreparedStatement 来抽象预编译语句，使用预编译。预编译阶段可以优化 SQL 的执行。预编译之后的 SQL 多数情况下可以直接执行，DBMS 不需要再次编译，越复杂的SQL，编译的复杂度将越大，预编译阶段可以合并多次操作为一个操作。同时预编译语句对象可以重复利用。把一个 SQL 预编译后产生的 PreparedStatement 对象缓存下来，下次对于同一个SQL，可以直接使用这个缓存的 PreparedState 对象。Mybatis默认情况下，将对所有的 SQL 进行预编译</p></li></ol><h2 id="Mybatis都有哪些Executor执行器？它们之间的区别是什么？"><a href="#Mybatis都有哪些Executor执行器？它们之间的区别是什么？" class="headerlink" title="Mybatis都有哪些Executor执行器？它们之间的区别是什么？"></a>Mybatis都有哪些Executor执行器？它们之间的区别是什么？</h2><p>Mybatis有三种基本的Executor执行器，<code>SimpleExecutor</code>、<code>ReuseExecutor</code>、<code>BatchExecutor</code>。</p><ul><li><code>SimpleExecutor</code>：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</li><li><code>ReuseExecutor</code>：执行update或select，以sql作为key查找<code>Statement</code>对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于<code>Map&lt;String, Statement&gt;</code>内，供下一次使用。简言之，就是重复使用Statement对象。</li><li><code>BatchExecutor</code>：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。<br>作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</li></ul><h2 id="Mybatis中如何指定使用哪一种Executor执行器？"><a href="#Mybatis中如何指定使用哪一种Executor执行器？" class="headerlink" title="Mybatis中如何指定使用哪一种Executor执行器？"></a>Mybatis中如何指定使用哪一种Executor执行器？</h2><p>在Mybatis配置文件中，在设置（settings）可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数，如SqlSession openSession(ExecutorType execType)。<br>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新。</p><h2 id="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</h2><p>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p><p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><h1 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h1><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a><code>#{}</code>和<code>${}</code>的区别</h2><ul><li>#{}是占位符，预编译处理；${}是拼接符，字符串替换，没有预编译处理。</li><li>Mybatis在处理#{}时，#{}传入参数是以字符串传入，会将SQL中的#{}替换为?号，调用PreparedStatement的set方法来赋值。</li><li>Mybatis在处理时，是原值传入，就是把{}时，是原值传入，就是把时，是原值传入，就是把{}替换成变量的值，相当于JDBC中的Statement编译</li><li>变量替换后，#{} 对应的变量自动加上单引号 ‘’；变量替换后，${} 对应的变量不会加上单引号 ‘’</li><li>#{} 可以有效的防止SQL注入，提高系统安全性；${} 不能防止SQL 注入</li><li>#{} 的变量替换是在DBMS 中；${} 的变量替换是在 DBMS 外</li></ul><h2 id="模糊查询like语句该怎么写"><a href="#模糊查询like语句该怎么写" class="headerlink" title="模糊查询like语句该怎么写"></a>模糊查询like语句该怎么写</h2><p>（1）<code>’%${question}%’</code> 可能引起SQL注入，不推荐</p><p>（2）<code>&quot;%&quot;#{question}&quot;%&quot;</code>注意：因为<code>#{…}</code>解析成sql语句时候，会在变量外侧自动加单引号’ ‘，所以这里 % 需要使用双引号” “，不能使用单引号 ’ ‘，不然会查不到任何结果。</p><p>（3）<code>CONCAT(’%’,#{question},’%’)</code> 使用<code>CONCAT()</code>函数，推荐</p><p>（4）使用bind标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;listUserLikeUsername&quot; resultType&#x3D;&quot;com.jourwon.pojo.User&quot;&gt;</span><br><span class="line">　　&lt;bind name&#x3D;&quot;pattern&quot; value&#x3D;&quot;&#39;%&#39; + username + &#39;%&#39;&quot; &#x2F;&gt;</span><br><span class="line">　　select id,sex,age,username,password from person where username LIKE #&#123;pattern&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><h2 id="在mapper中如何传递多个参数"><a href="#在mapper中如何传递多个参数" class="headerlink" title="在mapper中如何传递多个参数"></a>在mapper中如何传递多个参数</h2><h3 id="方法1：顺序传参法"><a href="#方法1：顺序传参法" class="headerlink" title="方法1：顺序传参法"></a>方法1：顺序传参法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public User selectUser(String name, int deptId);</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;selectUser&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;</span><br><span class="line">select * from user    where user_name &#x3D; #&#123;0&#125; and dept_id &#x3D; #&#123;1&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p><code>#{}</code>里面的数字代表传入参数的顺序。<br>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</p><h3 id="方法2：-Param注解传参法"><a href="#方法2：-Param注解传参法" class="headerlink" title="方法2：@Param注解传参法"></a>方法2：<code>@Param</code>注解传参法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public User selectUser(@Param(&quot;userName&quot;) String name, int @Param(&quot;deptId&quot;) deptId);</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;selectUser&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;</span><br><span class="line">select * from user    where user_name &#x3D; #&#123;userName&#125; and dept_id &#x3D; #&#123;deptId&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p><code>#{}</code>里面的名称对应的是注解@Param括号里面修饰的名称。这种方法在参数不多的情况还是比较直观的，推荐使用。</p><h3 id="方法3：Map传参法"><a href="#方法3：Map传参法" class="headerlink" title="方法3：Map传参法"></a>方法3：Map传参法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public User selectUser(Map&lt;String, Object&gt; params);</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;selectUser&quot; parameterType&#x3D;&quot;java.util.Map&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;</span><br><span class="line">    select * from user</span><br><span class="line">    where user_name &#x3D; #&#123;userName&#125; and dept_id &#x3D; #&#123;deptId&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p><code>#{}</code>里面的名称对应的是Map里面的key名称。</p><p>这种方法适合传递多个参数，且参数易变能灵活传递的情况。</p><h3 id="方法4：Java-Bean传参法"><a href="#方法4：Java-Bean传参法" class="headerlink" title="方法4：Java Bean传参法"></a>方法4：Java Bean传参法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public User selectUser(User user);</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;selectUser&quot; parameterType&#x3D;&quot;com.jourwon.pojo.User&quot; resultMap&#x3D;&quot;UserResultMap&quot;&gt;</span><br><span class="line">    select * from user</span><br><span class="line">    where user_name &#x3D; #&#123;userName&#125; and dept_id &#x3D; #&#123;deptId&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p><code>#{}</code>里面的名称对应的是User类里面的成员属性。</p><p>这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方便，推荐使用。</p><h2 id="Mybatis如何执行批量操作"><a href="#Mybatis如何执行批量操作" class="headerlink" title="Mybatis如何执行批量操作"></a>Mybatis如何执行批量操作</h2><h3 id="用foreach标签"><a href="#用foreach标签" class="headerlink" title="用foreach标签"></a>用foreach标签</h3><p>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主要有item，index，collection，open，separator，close。</p><ul><li>item　　表示集合中每一个元素进行迭代时的别名，随便起的变量名；</li><li>index　　指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；</li><li>open　　表示该语句以什么开始，常用“(”；</li><li>separator表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；</li><li>close　　表示以什么结束，常用“)”。</li></ul><p>在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：</p><ol><li><p>如果传入的是单参数且参数类型是一个List的时候，collection属性值为list</p></li><li><p>如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array</p></li><li><p>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，<br>map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key</p></li></ol><p>具体用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 批量保存(foreach插入多条数据两种方法)</span><br><span class="line">       int addEmpsBatch(@Param(&quot;emps&quot;) List&lt;Employee&gt; emps); --&gt;</span><br><span class="line">&lt;!-- MySQL下批量保存，可以foreach遍历 mysql支持values(),(),()语法 --&gt; &#x2F;&#x2F;推荐使用</span><br><span class="line">&lt;insert id&#x3D;&quot;addEmpsBatch&quot;&gt;</span><br><span class="line">    INSERT INTO emp(ename,gender,email,did)</span><br><span class="line">    VALUES</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;emps&quot; item&#x3D;&quot;emp&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">        (#&#123;emp.eName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这种方式需要数据库连接属性allowMutiQueries&#x3D;true的支持</span><br><span class="line"> 如jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?allowMultiQueries&#x3D;true --&gt;  </span><br><span class="line">&lt;insert id&#x3D;&quot;addEmpsBatch&quot;&gt;</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;emps&quot; item&#x3D;&quot;emp&quot; separator&#x3D;&quot;;&quot;&gt;                                 </span><br><span class="line">        INSERT INTO emp(ename,gender,email,did)</span><br><span class="line">        VALUES(#&#123;emp.eName&#125;,#&#123;emp.gender&#125;,#&#123;emp.email&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure><h3 id="使用ExecutorType-BATCH"><a href="#使用ExecutorType-BATCH" class="headerlink" title="使用ExecutorType.BATCH"></a>使用ExecutorType.BATCH</h3><p>Mybatis内置的ExecutorType有3种，默认为simple,该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，这在某型情形下是不符合业务要求的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;批量保存方法测试</span><br><span class="line">@Test  </span><br><span class="line">public void testBatch() throws IOException&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory &#x3D; getSqlSessionFactory();</span><br><span class="line">    &#x2F;&#x2F;可以执行批量操作的sqlSession</span><br><span class="line">    SqlSession openSession &#x3D; sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;批量保存执行前时间</span><br><span class="line">    long start &#x3D; System.currentTimeMillis();</span><br><span class="line">    try &#123;</span><br><span class="line">        EmployeeMapper mapper &#x3D; openSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            mapper.addEmp(new Employee(UUID.randomUUID().toString().substring(0, 5), &quot;b&quot;, &quot;1&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        openSession.commit();</span><br><span class="line">        long end &#x3D; System.currentTimeMillis();</span><br><span class="line">        &#x2F;&#x2F;批量保存执行后的时间</span><br><span class="line">        System.out.println(&quot;执行时长&quot; + (end - start));</span><br><span class="line">        &#x2F;&#x2F;批量 预编译sql一次&#x3D;&#x3D;》设置参数&#x3D;&#x3D;》10000次&#x3D;&#x3D;》执行1次   677</span><br><span class="line">        &#x2F;&#x2F;非批量  （预编译&#x3D;设置参数&#x3D;执行 ）&#x3D;&#x3D;》10000次   1121</span><br><span class="line"></span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        openSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper和mapper.xml如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;   </span><br><span class="line">    <span class="comment">//批量保存员工</span></span><br><span class="line">    <span class="function">Long <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.jourwon.mapper.EmployeeMapper"</span></span></span><br><span class="line">     &lt;!--批量保存员工 --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmp"</span>&gt;</span></span><br><span class="line">        insert into employee(lastName,email,gender)</span><br><span class="line">        values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何获取生成的主键"><a href="#如何获取生成的主键" class="headerlink" title="如何获取生成的主键"></a>如何获取生成的主键</h2><h3 id="对于支持主键自增的数据库（MySQL）"><a href="#对于支持主键自增的数据库（MySQL）" class="headerlink" title="对于支持主键自增的数据库（MySQL）"></a>对于支持主键自增的数据库（MySQL）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> &gt;</span></span><br><span class="line">    insert into user( </span><br><span class="line">    user_name, user_password, create_time) </span><br><span class="line">    values(#&#123;userName&#125;, #&#123;userPassword&#125; , #&#123;createTime, jdbcType= TIMESTAMP&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>parameterType 可以不写，Mybatis可以推断出传入的数据类型。如果想要访问主键，那么应当parameterType 应当是java实体或者Map。这样数据在插入之后 可以通过ava实体或者Map 来获取主键值。通过 getUserId获取主键。</p><h3 id="不支持主键自增的数据库（Oracle）"><a href="#不支持主键自增的数据库（Oracle）" class="headerlink" title="不支持主键自增的数据库（Oracle）"></a>不支持主键自增的数据库（Oracle）</h3><p>对于像Oracle这样的数据，没有提供主键自增的功能，而是使用序列的方式获取自增主键。<br>可以使用<code>＜selectKey＞</code>标签来获取主键的值，这种方式不仅适用于不提供主键自增功能的数据库，也适用于提供主键自增功能的数据库<br><code>＜selectKey＞</code>一般的用法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"long"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">keyProperty</td><td align="center">selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td></tr><tr><td align="center">keyColumn</td><td align="center">匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td></tr><tr><td align="center">resultType</td><td align="center">结果的类型，MyBatis 通常可以推算出来。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。</td></tr><tr><td align="center">order</td><td align="center">值可为BEFORE 或 AFTER。如果是 BEFORE，那么它会先执行selectKey设置 keyProperty 然后执行插入语句。如果为AFTER则相反。</td></tr><tr><td align="center">statementType</td><td align="center">使用何种语句类型，默认PREPARED。 有STATEMENT，PREPARED 和 CALLABLE 语句的映射类型。</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"long"</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">SELECT USER_ID.nextval as id from dual </span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span> </span><br><span class="line">insert into user( </span><br><span class="line">user_id,user_name, user_password, create_time) </span><br><span class="line">values(#&#123;userId&#125;,#&#123;userName&#125;, #&#123;userPassword&#125; , #&#123;createTime, jdbcType= TIMESTAMP&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时会将Oracle生成的主键值赋予<code>userId</code>变量。这个userId 就是USER对象的属性，这样就可以将生成的主键值返回了。如果仅仅是在insert语句中使用但是不返回，此时<code>keyProperty=“任意自定义变量名”</code>，resultType 可以不写。<br>Oracle 数据库中的值要设置为 <code>BEFORE</code> ，这是因为 Oracle中需要先从序列获取值，然后将值作为主键插入到数据库中。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>如果Mysql 使用selectKey的方式获取主键，需要注意下面两点：</p><ul><li><p>order ： AFTER</p></li><li><p>获取递增主键值 ：SELECT LAST_INSERT_ID()</p></li></ul><h2 id="当实体类中的属性名和表中的字段名不一样-，怎么办"><a href="#当实体类中的属性名和表中的字段名不一样-，怎么办" class="headerlink" title="当实体类中的属性名和表中的字段名不一样 ，怎么办"></a>当实体类中的属性名和表中的字段名不一样 ，怎么办</h2><h3 id="第1种：-通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。"><a href="#第1种：-通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。" class="headerlink" title="第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。"></a>第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOrder"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.jourwon.pojo.Order"</span>&gt;</span></span><br><span class="line">       select order_id id, order_no orderno ,order_price price form orders where order_id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第2种：-通过-lt-resultMap-gt-来映射字段名和实体类属性名的一一对应的关系。"><a href="#第2种：-通过-lt-resultMap-gt-来映射字段名和实体类属性名的一一对应的关系。" class="headerlink" title="第2种： 通过&lt;resultMap&gt;来映射字段名和实体类属性名的一一对应的关系。"></a>第2种： 通过<code>&lt;resultMap&gt;</code>来映射字段名和实体类属性名的一一对应的关系。</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOrder"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"orderResultMap"</span>&gt;</span></span><br><span class="line">select * from orders where order_id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.jourwon.pojo.Order"</span> <span class="attr">id</span>=<span class="string">"orderResultMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!–用id属性来映射主键字段–</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"order_id"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">!–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> =<span class="string">"orderno"</span> <span class="attr">column</span> =<span class="string">"order_no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"price"</span> <span class="attr">column</span>=<span class="string">"order_price"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reslutMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mapper-编写有哪几种方式？"><a href="#Mapper-编写有哪几种方式？" class="headerlink" title="Mapper 编写有哪几种方式？"></a>Mapper 编写有哪几种方式？</h2><h3 id="第一种：接口实现类继承-SqlSessionDaoSupport：使用此种方法需要编写mapper-接口，mapper-接口实现类、mapper-xml-文件。"><a href="#第一种：接口实现类继承-SqlSessionDaoSupport：使用此种方法需要编写mapper-接口，mapper-接口实现类、mapper-xml-文件。" class="headerlink" title="第一种：接口实现类继承 SqlSessionDaoSupport：使用此种方法需要编写mapper 接口，mapper 接口实现类、mapper.xml 文件。"></a>第一种：接口实现类继承 SqlSessionDaoSupport：使用此种方法需要编写mapper 接口，mapper 接口实现类、mapper.xml 文件。</h3><p>（1）在 sqlMapConfig.xml 中配置 mapper.xml 的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper.xml 文件的地址"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper.xml 文件的地址"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）定义 mapper 接口</p><p>（3）实现类集成 SqlSessionDaoSupport</p><p>mapper 方法中可以 this.getSqlSession()进行数据增删改查。</p><p>（4）spring 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">" "</span> <span class="attr">class</span>=<span class="string">"mapper 接口的实现"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二种：使用-org-mybatis-spring-mapper-MapperFactoryBean："><a href="#第二种：使用-org-mybatis-spring-mapper-MapperFactoryBean：" class="headerlink" title="第二种：使用 org.mybatis.spring.mapper.MapperFactoryBean："></a>第二种：使用 org.mybatis.spring.mapper.MapperFactoryBean：</h3><p>（1）在 sqlMapConfig.xml 中配置 mapper.xml 的位置，如果 mapper.xml 和mappre 接口的名称相同且在同一个目录，这里可以不用配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper.xml 文件的地址"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper.xml 文件的地址"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）定义 mapper 接口：</p><p>（3）mapper.xml 中的 namespace 为 mapper 接口的地址</p><p>（4）mapper 接口中的方法名和 mapper.xml 中的定义的 statement 的 id 保持一致</p><p>（5）Spring 中定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"mapper 接口地址"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三种：使用-mapper-扫描器："><a href="#第三种：使用-mapper-扫描器：" class="headerlink" title="第三种：使用 mapper 扫描器："></a>第三种：使用 mapper 扫描器：</h3><p>（1）mapper.xml 文件编写：</p><p>mapper.xml 中的 namespace 为 mapper 接口的地址；</p><p>mapper 接口中的方法名和 mapper.xml 中的定义的 statement 的 id 保持一致；</p><p>如果将 mapper.xml 和 mapper 接口的名称保持一致则不用在 sqlMapConfig.xml中进行配置。</p><p>（2）定义 mapper 接口：</p><p>注意 mapper.xml 的文件名和 mapper 的接口名称保持一致，且放在同一个目录</p><p>（3）配置 mapper 扫描器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"mapper 接口包地址</span></span></span><br><span class="line"><span class="tag"><span class="string">    "</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）使用扫描器后从 spring 容器中获取 mapper 的实现对象。</p><h2 id="什么是MyBatis的接口绑定？有哪些实现方式？"><a href="#什么是MyBatis的接口绑定？有哪些实现方式？" class="headerlink" title="什么是MyBatis的接口绑定？有哪些实现方式？"></a>什么是MyBatis的接口绑定？有哪些实现方式？</h2><p>接口绑定，就是在MyBatis中任意定义接口，然后把接口里面的方法和SQL语句绑定，我们直接调用接口方法就可以，这样比起原来了SqlSession提供的方法我们可以有更加灵活的选择和设置。</p><p>接口绑定有两种实现方式</p><ul><li><p>通过注解绑定，就是在接口的方法上面加上 @Select、@Update等注解，里面包含Sql语句来绑定；</p></li><li><p>通过xml里面写SQL来绑定， 在这种情况下，要指定xml映射文件里面的namespace必须为接口的全路径名。当Sql语句比较简单时候，用注解绑定， 当SQL语句比较复杂时候，用xml绑定，一般用xml绑定的比较多。</p></li></ul><h2 id="使用MyBatis的mapper接口调用时有哪些要求？"><a href="#使用MyBatis的mapper接口调用时有哪些要求？" class="headerlink" title="使用MyBatis的mapper接口调用时有哪些要求？"></a>使用MyBatis的mapper接口调用时有哪些要求？</h2><ol><li><p>Mapper接口方法名和mapper.xml中定义的每个sql的id相同。</p></li><li><p>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同。</p></li><li><p>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同。</p></li><li><p>Mapper.xml文件中的namespace即是mapper接口的类路径。</p></li></ol><h2 id="最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗"><a href="#最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗" class="headerlink" title="最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗"></a>最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗</h2><p>Dao接口，就是人们常说的Mapper接口，接口的全限名，就是映射文件中的namespace的值，接口的方法名，就是映射文件中<code>MappedStatement</code>的id值，接口方法内的参数，就是传递给sql的参数。<br>Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个<code>MappedStatement</code>，举例：<code>com.mybatis3.mappers.StudentDao.findStudentById</code>，可以唯一找到namespace为<code>com.mybatis3.mappers.StudentDao</code>下面<code>id = findStudentById</code>的<code>MappedStatement</code>。在Mybatis中，每一个<code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code>标签，都会被解析为一个<code>MappedStatement</code>对象。<br>Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。</p><p>Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。</p><h2 id="Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"><a href="#Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？" class="headerlink" title="Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？"></a>Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</h2><p>不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。</p><p>原因就是<code>namespace+id</code>是作为<code>Map&lt;String, MappedStatement&gt;</code>的key使用的，如果没有<code>namespace</code>，就剩下<code>id</code>，那么，<code>id</code>重复会导致数据互相覆盖。有了<code>namespace</code>，自然<code>id</code>就可以重复，<code>namespace</code>不同，<code>namespace+id</code>自然也就不同。</p><h2 id="简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"><a href="#简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？" class="headerlink" title="简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？"></a>简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？</h2><p>答：Mybatis将所有Xml配置信息都封装到<code>All-In-One</code>重量级对象<code>Configuration</code>内部。在Xml映射文件中，<code>&lt;parameterMap&gt;</code>标签会被解析为<code>ParameterMap</code>对象，其每个子元素会被解析为<code>ParameterMapping</code>对象。<code>&lt;resultMap&gt;</code>标签会被解析为<code>ResultMap</code>对象，其每个子元素会被解析为<code>ResultMapping</code>对象。每一个<code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code>标签均会被解析为<code>MappedStatement</code>对象，标签内的<code>sql</code>会被解析为<code>BoundSql</code>对象。</p><h2 id="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h2><ul><li><p>第一种是使用<code>&lt;resultMap&gt;</code>标签，逐一定义列名和对象属性名之间的映射关系。</p></li><li><p>第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。</p></li></ul><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h2 id="Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？"><a href="#Xml映射文件中，除了常见的select-insert-updae-delete标签之外，还有哪些标签？" class="headerlink" title="Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？"></a>Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h2><p>还有很多其他的标签，<code>&lt;resultMap&gt;</code>、<code>&lt;parameterMap&gt;</code>、<code>&lt;sql&gt;</code>、<code>&lt;include&gt;</code>、<code>&lt;selectKey&gt;</code>，加上动态<code>sql</code>的9个标签，<code>trim</code>|<code>where</code>|<code>set</code>|<code>foreach</code>|<code>if</code>|<code>choose</code>|<code>when</code>|<code>otherwise</code>|<code>bind</code>等，其中<code>&lt;sql&gt;</code>为sql片段标签，通过<code>&lt;include&gt;</code>标签引入sql片段，<code>&lt;selectKey&gt;</code>为不支持自增的主键生成策略标签。</p><h2 id="Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"><a href="#Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？" class="headerlink" title="Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？"></a>Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</h2><p>虽然Mybatis解析Xml映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地方，Mybatis都可以正确识别。</p><p>原理是，Mybatis解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，Mybatis会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，Mybatis会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A标签也就可以正常解析完成了。</p><h1 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h1><h2 id="MyBatis实现一对一，一对多有几种方式，怎么操作的？"><a href="#MyBatis实现一对一，一对多有几种方式，怎么操作的？" class="headerlink" title="MyBatis实现一对一，一对多有几种方式，怎么操作的？"></a>MyBatis实现一对一，一对多有几种方式，怎么操作的？</h2><p>有联合查询和嵌套查询。联合查询是几个表联合查询，只查询一次，通过在resultMap里面的association，collection节点配置一对一，一对多的类就可以完成</p><p>嵌套查询是先查一个表，根据这个表里面的结果的外键id，去再另外一个表里面查询数据，也是通过配置association，collection，但另外一个表的查询通过select节点配置。</p><h2 id="Mybatis是否可以映射Enum枚举类？"><a href="#Mybatis是否可以映射Enum枚举类？" class="headerlink" title="Mybatis是否可以映射Enum枚举类？"></a>Mybatis是否可以映射Enum枚举类？</h2><p>Mybatis可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个<code>TypeHandler</code>，实现<code>TypeHandler</code>的<code>setParameter()</code>和<code>getResult()</code>接口方法。</p><p><code>TypeHandler</code>有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。</p><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><h2 id="Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"><a href="#Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？" class="headerlink" title="Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？"></a>Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？</h2><p>Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能，Mybatis提供了9种动态sql标签<code>trim</code>|<code>where</code>|<code>set</code>|<code>foreach</code>|<code>if</code>|<code>choose</code>|<code>when</code>|<code>otherwise</code>|<code>bind</code>。</p><p>其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。</p><h1 id="插件模块"><a href="#插件模块" class="headerlink" title="插件模块"></a>插件模块</h1><h2 id="Mybatis是如何进行分页的？分页插件的原理是什么？"><a href="#Mybatis是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="Mybatis是如何进行分页的？分页插件的原理是什么？"></a>Mybatis是如何进行分页的？分页插件的原理是什么？</h2><p>Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><p>举例：<code>select * from student</code>，拦截sql后重写为：<code>select t.* from (select * from student) t limit 0, 10</code></p><h2 id="简述Mybatis的插件运行原理，以及如何编写一个插件。"><a href="#简述Mybatis的插件运行原理，以及如何编写一个插件。" class="headerlink" title="简述Mybatis的插件运行原理，以及如何编写一个插件。"></a>简述Mybatis的插件运行原理，以及如何编写一个插件。</h2><p>Mybatis仅可以编写针对<code>ParameterHandler</code>、<code>ResultSetHandler</code>、<code>StatementHandler</code>、<code>Executor</code>这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是<code>InvocationHandler</code>的<code>invoke()</code>方法，当然，只会拦截那些你指定需要拦截的方法。</p><p>实现Mybatis的<code>Interceptor</code>接口并复写<code>intercept()</code>方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="Mybatis的一级、二级缓存"><a href="#Mybatis的一级、二级缓存" class="headerlink" title="Mybatis的一级、二级缓存"></a>Mybatis的一级、二级缓存</h2><ul><li><p>1）一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</p></li><li><p>2）二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置<code>&lt;cache/&gt;</code>；</p></li><li><p>3）对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】DDD从天书到实践</title>
      <link href="/others/32460.html"/>
      <url>/others/32460.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>DDD模式的介绍</p><footer><strong>掘金-Robynd</strong><cite><a href="https://juejin.im/post/5e203bbef265da3e2d24cdff" target="_blank" rel="noopener">DDD模式从天书到实践</a></cite></footer></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>正所谓有人的地方就有江湖，有设计的地方也一定会有架构。如果你是一位软件行业的老鸟，你一定会有这样的经历：一个业务的初期，普通的 CRUD 就能满足，业务线也很短，此时系统的一切都看起来很 nice，但随着迭代的不断演化，以及业务逻辑越来越复杂，我们的系统也越来越冗杂，模块彼此关联，甚至没有人能描述清楚每个细节。当新需求需要修改一个功能时，往往光回顾该功能涉及的流程就需要很长时间，更别提修改带来的不可预知的影响面。于是 RD 就加开关，小心翼翼地切流量上线，一有问题赶紧关闭开关。<br>面对此般场景，你要么跑路，要么重构。重构是克服演进式设计中大杂烩问题的主力，通过在单独的类及方法级别上做一系列小步重构来完成，我们可以很容易重构出一个独立的类来放某些通用的逻辑，但是，你会发现你很难给它一个业务上的含义，只能给予一个技术维度描绘的含义。你正在一边重构一边给后人挖坑。<br>在互联网开发“小步快跑，迭代试错”的大环境下，DDD 似乎是一种比较“古老而缓慢”的思想。然而，由于互联网公司也逐渐深入实体经济，业务日益复杂，我们在开发中也越来越多地遇到传统行业软件开发中所面临的问题。<br>怎么解决这个问题呢？其实法宝就是今天的主题，领域驱动设计！！相信你读完本文一定会有所启发。</p><a id="more"></a><h1 id="DDD-介绍"><a href="#DDD-介绍" class="headerlink" title="DDD 介绍"></a>DDD 介绍</h1><p>DDD 全程是 Domain-Driven Design，中文叫领域驱动设计，是一套应对复杂软件系统分析和设计的面向对象建模方法论。<br>以前的系统分析和设计是分开的，导致需求和成品非常容易出现偏差，两者相对独立，还会导致沟通困难，DDD 则打破了这种隔阂，提出了领域模型概念，统一了分析和设计编程，使得软件能够更灵活快速跟随需求变化。<br><img src="/images/pasted-8.png" alt="pasted image"><br>( 公众号：LemonResource )</p><h2 id="DDD-的发展史"><a href="#DDD-的发展史" class="headerlink" title="DDD 的发展史"></a>DDD 的发展史</h2><p>相信之前或多或少一定听说过领域驱动（DDD），繁多的概念会不会让你眼花缭乱？抽象的逻辑是不是感觉缺少落地实践？可能这也是 DDD 一直没得到盛行的原因吧。<br>话说 1967 年有了 OOP，1982 年有了 OOAD（面向对象分析和设计），它是成熟版的 OOP，目标就是解决复杂业务场景，这个过程中逐渐形成了一个领域驱动的思潮，一转眼到 2003 年的时候，Eric Evans 发表了一篇著作 《Domain-driven Design: Tackling Complexity in the Heart of Software》，正式定义了领域的概念，开始了 DDD 的时代。算下来也有接近 20 年的时间了，但是，事实并不像 Eric Evans 设想的那样容易，DDD 似乎一直不温不火，没有能“风靡全球”。<br>2013 年，Vaughn Vernon 写了一本 《Implementing Domain-Driven Design》 进一步定义了 DDD 的领域方向，并且给出了很多落地指导，它让人们离 DDD 又进了一步。<br>同时期，随着互联网的兴起，Rod Johnson 这大哥以轻量级极简风格的 Spring Cloud 抢占了所有风头，虽然 Spring 推崇的失血模式并非 OOP 的皇家血统，但是谁用关心这些呢？毕竟简化开发的成本才是硬道理。<br>就在我们用这张口闭口 Spring 的时候，我们意识到了一个严重的问题，我们应对复杂业务场景的时候，Spring 似乎并不能给出更合理的解决方案，于是分而治之的思想下应生了微服务，一改以往单体应用为多个子应用，一下子让人眼前一亮，于是我们没日没夜地拆分服务，加之微服务提供的注册中心、熔断、限流等解决方案，我们用得不亦乐乎。<br>人们在踩过诸多拆分服务的坑（拆分过细导致服务爆炸、拆分不合理导致频分重构等）之后，开始死锁原因了，到底有没有一种方法论可以指导人们更加合理地拆分服务呢？众里寻他千百度，DDD 却在灯火阑珊处，有了 DDD 的指导，加之微服务的事件，才是完美的架构。</p><h2 id="DDD-与微服务的关系"><a href="#DDD-与微服务的关系" class="headerlink" title="DDD 与微服务的关系"></a>DDD 与微服务的关系</h2><p>背景中我们说到，有 DDD 的指导，加之微服务的事件，才是完美的架构，这里就详细说下它们的关系。<br>系统的复杂度越来越来高是必然趋势，原因可能来自自身业务的演进，也有可能是技术的创新，然而一个人和团队对复杂性的认知是有极限的，就像一个服务器的性能极限一样，解决的办法只有分而治之，将大问题拆解为小问题，最终突破这种极限。微服务在这方面都给出来了理论指导和最佳实践，诸如注册中心、熔断、限流等解决方案，但微服务并没有对“应对复杂业务场景”这个问题给出合理的解决方案，这是因为微服务的侧重点是治理，而不是分。<br>我们都知道，架构一个系统的时候，应该从以下几方面考虑：</p><ol><li>功能维度</li><li>质量维度（包括性能和可用性）</li><li>工程维度</li></ol><p>微服务在第二个做得很好，但第一个维度和第三个维度做的不够。这就给 DDD 了一个“可乘之机”，DDD 给出了微服务在功能划分上没有给出的很好指导这个缺陷。所以说它们在面对复杂问题和构建系统时是一种互补的关系。<br>从架构角度看，微服务中的服务所关注的范围，正是 DDD 所推崇的六边形架构中的领域层，和整洁架构中的 entity 和 use cases 层。如下图所示：<br><img src="/images/pasted-9.png" alt="pasted image"><br>( 公众号：LemonResource )</p><h2 id="DDD-与微服务如何协作"><a href="#DDD-与微服务如何协作" class="headerlink" title="DDD 与微服务如何协作"></a>DDD 与微服务如何协作</h2><p>知道了 DDD 与微服务还不够，我们还需要知道他们是怎么协作的。<br>一个系统（或者一个公司）的业务范围和在这个范围里进行的活动，被称之为领域，领域是现实生活中面对的问题域，和软件系统无关，领域可以划分为子域，比如电商领域可以划分为商品子域、订单子域、发票子域、库存子域 等，在不同子域里，不同概念会有不同的含义，所以我们在建模的时候必须要有一个明确的边界，这个边界在 DDD 中被称之为限界上下文，它是系统架构内部的一个边界，《整洁之道》这本书里提到：</p><blockquote><p>系统架构是由系统内部的架构边界，以及边界之间的依赖关系所定义的，与系统中组件之间的调用方式无关。 所谓的服务本身只是一种比函数调用方式成本稍高的，分割应用程序行为的一种形式，与系统架构无关。</p></blockquote><p>所以复杂系统划分的第一要素就是划分系统内部架构边界，也就是划分上下文，以及明确之间的关系，这对应之前说的第一维度（功能维度），这就是 DDD 的用武之处。其次，我们才考虑基于非功能的维度如何划分，这才是微服务发挥优势的地方。<br>假如我们把服务划分成 ABC 三个上下文：</p><p><img src="/images/pasted-10.png" alt="pasted image"><br>( 公众号：LemonResource )</p><p>我们可以在一个进程内部署单体应用，也可以通过远程调用来完成功能调用，这就是目前的微服务方式，更多的时候我们是两种方式的混合，比如 A 和 B 在一个部署单元内，C 单独部署，这是因为 C 非常重要，或并发量比较大，或需求变更比较频繁，这时候 C 独立部署有几个好处：</p><ol><li>C 独立部署资源：资源更合理的倾斜，独立扩容缩容。</li><li>弹力服务：重试、熔断、降级等，已达到故障隔离。</li><li>技术栈独立：C 可以使用其他语言编写，更合适个性化团队技术栈。</li><li>团队独立：可以由不同团队负责。</li></ol><p>架构是可以演进的，所以拆分需要考虑架构的阶段，早期更注重业务逻辑边界，后期需要考虑更多方面，比如数据量、复杂性等，但即使有这个方针，也常会见仁见智，没有人能一下子将边界定义正确，其实这里根本就没有明确的对错。<br>即使边界定义的不太合适，通过聚合根可以保障我们能够演进出更合适的上下文，在上下文内部通过实体和值对象来对领域概念进行建模，一组实体和值对象归属于一个聚合根。<br>按照 DDD 的约束要求：</p><ol><li>第一，聚合根来保证内部实体规则的正确性和数据一致性；</li><li>第二，外部对象只能通过 id 来引用聚合根，不能引用聚合根内部的实体；</li><li>第三，聚合根之间不能共享一个数据库事务，他们之间的数据一致性需要通过最终一致性来保证。<br>有了聚合根，再基于这些约束，未来可以根据需要，把聚合根升级为上下文，甚至拆分成微服务，都是比较容易的。<h1 id="DDD-的相关术语与基本概念"><a href="#DDD-的相关术语与基本概念" class="headerlink" title="DDD 的相关术语与基本概念"></a>DDD 的相关术语与基本概念</h1>讨论完宏观概念以后，让我们来认识一下 DDD 的一些概念吧，每个概念我都为你找了一个 Spring 模式开发的映射概念，方便你理解，但要仅仅作为理解用，不要过于依赖。<br>另外，这里你可能需要结合后面的代码反复结合理解，才能融汇贯通到实际工作中。<h2 id="领域"><a href="#领域" class="headerlink" title="领域"></a>领域</h2>映射概念：切分的服务。<br>领域就是范围。范围的重点是边界。领域的核心思想是将问题逐级细分来减低业务和系统的复杂度，这也是 DDD 讨论的核心。<h2 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h2>映射概念：子服务。<br>领域可以进一步划分成子领域，即子域。这是处理高度复杂领域的设计思想，它试图分离技术实现的复杂性。这个拆分的里面在很多架构里都有，比如 C4。<h2 id="核心域"><a href="#核心域" class="headerlink" title="核心域"></a>核心域</h2>映射概念：核心服务。<br>在领域划分过程中，会不断划分子域，子域按重要程度会被划分成三类：核心域、通用域、支撑域。<br>决定产品核心竞争力的子域就是核心域，没有太多个性化诉求。<br>桃树的例子，有根、茎、叶、花、果、种子等六个子域，不同人理解的核心域不同，比如在果园里，核心域就是果是核心域，在公园里，核心域则是花。有时为了核心域的营养供应，还会剪掉通用域和支撑域（茎、叶等）。<h2 id="通用域"><a href="#通用域" class="headerlink" title="通用域"></a>通用域</h2>映射概念：中间件服务或第三方服务。<br>被多个子域使用的通用功能就是通用域，没有太多企业特征，比如权限认证。<h2 id="支撑域"><a href="#支撑域" class="headerlink" title="支撑域"></a>支撑域</h2>映射概念：企业公共服务。<br>对于功能来讲是必须存在的，但它不对产品核心竞争力产生影响，也不包含通用功能，有企业特征，不具有通用性，比如数据代码类的数字字典系统。<h2 id="统一语言"><a href="#统一语言" class="headerlink" title="统一语言"></a>统一语言</h2>映射概念：统一概念。<br>定义上下文的含义。它的价值是可以解决交流障碍，不管你是 RD、PM、QA 等什么角色，让每个团队使用统一的语言（概念）来交流，甚至可读性更好的代码。<br>通用语言包含属于和用例场景，并且能直接反应在代码中。<br>可以在事件风暴（开会）中来统一语言，甚至是中英文的映射、业务与代码模型的映射等。可以使用一个表格来记录。<h2 id="限界上下文"><a href="#限界上下文" class="headerlink" title="限界上下文"></a>限界上下文</h2>映射概念：服务职责划分的边界。<br>定义上下文的边界。领域模型存在边界之内。对于同一个概念，不同上下文会有不同的理解，比如商品，在销售阶段叫商品，在运输阶段就叫货品。<br><img src="/images/pasted-12.png" alt="pasted image"><br>( 公众号：LemonResource )<br>理论上，限界上下文的边界就是微服务的边界，因此，理解限界上下文在设计中非常重要。</li></ol><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>映射概念：包。<br>聚合概念类似于你理解的包的概念，每个包里包含一类实体或者行为，它有助于分散系统复杂性，也是一种高层次的抽象，可以简化对领域模型的理解。<br>拆分的实体不能都放在一个服务里，这就涉及到了拆分，那么有拆分就有聚合。聚合是为了保证领域内对象之间的一致性问题。<br>在定义聚合的时候，应该遵守不变形约束法则：</p><ol><li>聚合边界内必须具有哪些信息，如果没有这些信息就不能称为一个有效的聚合；</li><li>聚合内的某些对象的状态必须满足某个业务规则：<ul><li>一个聚合只有一个聚合根，聚合根是可以独立存在的，聚合中其他实体或值对象依赖与聚合根。</li><li>只有聚合根才能被外部访问到，聚合根维护聚合的内部一致性。<h2 id="聚合根"><a href="#聚合根" class="headerlink" title="聚合根"></a>聚合根</h2>映射概念：包。<br>一个上下文内可能包含多个聚合，每个聚合都有一个根实体，叫做聚合根，一个聚合只有一个聚合根。<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2>映射概念：<code>Domain</code> 或 <code>entity</code>。<br>《领域驱动设计模式、原理与实践》一书中讲到，实体是具有身份和连贯性的领域概念，可以看出，实体其实也是一种特殊的领域，这里我们需要注意两点：唯一标示（身份）、连续性。两者缺一不可。<br>你可以想象，文章可以是实体，作者也可以是，因为它们有 id 作为唯一标示。<h2 id="值对象"><a href="#值对象" class="headerlink" title="值对象"></a>值对象</h2>映射概念：<code>Domain</code> 或 <code>entity</code>。<br>为了更好地展示领域模型之间的关系，制定的一个对象，本质上也是一种实体，但相对实体而言，它没有状态和身份标识，它存在的目的就是为了表示一个值，通常使用值对象来传达数量的形式来表示。<br>比如 <code>money</code>，让它具有 <code>id</code> 显然是不合理的，你也不可能通过 <code>id</code> 查询一个 <code>money</code>。<br>定义值对象要依照具体场景的区分来看，你甚至可以把 <code>Article</code> 中的 <code>Author</code> 当成一个值对象，但一定要清楚，<code>Author</code> 独立存在的时候是实体，或者要拿 <code>Author</code> 做复杂的业务逻辑，那么 Author 也会升级为聚合根。<br>最后，给出摘自网络的一张图，比较全，索性就直接 copy 过来了，便于你宏观回顾 DDD 的相关概念：<br><img src="/images/pasted-13.png" alt="pasted image"><br>( 公众号：LemonResource )<h1 id="四种-Domain-模式"><a href="#四种-Domain-模式" class="headerlink" title="四种 Domain 模式"></a>四种 Domain 模式</h1>除了晦涩难懂的概念外，让我们最难接受的可能就是模型的运用了，Spring 思想中，Domain 只是数据的载体，所有行为都在 Service 中使用 Domain 封装后流转，而 OOP 讲究一对象维度来执行业务，所以，DDD 中的对象是用行为的（理解这点非常重要哦）。<br>这里我为你总结了全部的四种领域模式，供你区分和理解：</li></ul></li></ol><ul><li>失血模型</li><li>贫血模型</li><li>充血模型</li><li>胀血模型</li></ul><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><p>先说明一下示例背景，由于公司项目不能外泄的原因，我这里模拟一个文章管理系统（这个系统相对简单，理论上可以不使用 DDD，在这里仅做举例），业务需求有：发布文章、修改文章、文章分类搜索和展示等。<br>使用 <code>Spring</code> 开发的话，你脑海中一定浮现的是如下代码。<br>文章类：<code>Article</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer classId;</span><br><span class="line">    <span class="keyword">private</span> Integer authorId;</span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Date pubDate;</span><br><span class="line">    <span class="comment">//getter/setter/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DAO</code> 类：<code>ArticleDao/ArticleImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Article</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Repository(<span class="string">"articleDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoImpl</span> <span class="keyword">implements</span> <span class="title">ArticleDao</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Service</code> 类：<code>ArticleService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Article</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"articleService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Controller</code> 类：略。</p><h2 id="四种模式示例"><a href="#四种模式示例" class="headerlink" title="四种模式示例"></a>四种模式示例</h2><h3 id="失血模型"><a href="#失血模型" class="headerlink" title="失血模型"></a>失血模型</h3><p><code>Domain Object</code> 只有属性的 <code>getter/setter</code> 方法的纯数据类，所有的业务逻辑完全由 <code>business object</code> 来完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer classId;</span><br><span class="line">    <span class="keyword">private</span> Integer authorId;</span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Date pubDate;</span><br><span class="line">    <span class="comment">//getter/setter/toString</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDao</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Article <span class="title">getArticleById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Article <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateArticle</span><span class="params">(Article article)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="贫血模型"><a href="#贫血模型" class="headerlink" title="贫血模型"></a>贫血模型</h3><p>简单来说，就是 <code>Domain Object</code> 包含了不依赖于持久化的领域逻辑，而那些依赖持久化的领域逻辑被分离到<code>Service</code> 层。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer classId;</span><br><span class="line">    <span class="keyword">private</span> Integer authorId;</span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Date pubDate;</span><br><span class="line">    <span class="comment">//getter/setter/toString</span></span><br><span class="line">    <span class="comment">//判断是否是热门分类(假设等于57或102的类别的文章就是热门分类的文章)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHotClass</span><span class="params">(Article article)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="number">57</span>,<span class="number">102</span>)</span><br><span class="line">            .anyMatch(classId -&gt; classId.equals(article.getClassId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新分类，但未持久化，这里不能依赖Dao去操作实体化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">changeClass</span><span class="params">(Article article, ArticleClass ac)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> article.setClassId(ac.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"articleDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoImpl</span> <span class="keyword">implements</span> <span class="title">ArticleDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeClass</span><span class="params">(Article article, ArticleClass ac)</span></span>&#123;</span><br><span class="line">        article.changeClass(article, ac);</span><br><span class="line">        articleDao.update(article)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个模式不在 Domain 层里依赖 DAO。持久化的工作还需要在 DAO 或者 Service 中进行。<br>这样做的优缺点<br>优点：各层单向依赖，结构清晰。<br>缺点：</p><ul><li>Domain Object 的部分比较紧密依赖的持久化 Domain Logic 被分离到 Service 层，显得不够 OO</li><li>Service 层过于厚重</li></ul><h3 id="充血模型"><a href="#充血模型" class="headerlink" title="充血模型"></a>充血模型</h3><p>充血模型和第二种模型差不多，区别在于业务逻辑划分，将绝大多数业务逻辑放到 Domain 中，Service 是很薄的一层，封装少量业务逻辑，并且不和 DAO 打交道：</p><blockquote><p>Service (事务封装) —&gt; Domain Object &lt;—&gt; DAO</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArticleDao articleDao;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer classId;</span><br><span class="line">    <span class="keyword">private</span> Integer authorId;</span><br><span class="line">    <span class="keyword">private</span> String authorName;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Date pubDate;</span><br><span class="line">    <span class="comment">//getter/setter/toString</span></span><br><span class="line">    <span class="comment">//使用articleDao进行持久化交互</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否是热门分类(假设等于57或102的类别的文章就是热门分类的文章)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHotClass</span><span class="params">(Article article)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="number">57</span>,<span class="number">102</span>)</span><br><span class="line">            .anyMatch(classId -&gt; classId.equals(article.getClassId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新分类，但未持久化，这里不能依赖Dao去操作实体化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">changeClass</span><span class="params">(Article article, ArticleClass ac)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> article.setClassId(ac.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有业务逻辑都在 Domain 中，事务管理也在 Item 中实现。这样做的优缺点如下。<br>优点：</p><ul><li>更加符合 OO 的原则；</li><li>Service 层很薄，只充当 Facade 的角色，不和 DAO 打交道。<br>缺点：</li><li>DAO 和 Domain Object 形成了双向依赖，复杂的双向依赖会导致很多潜在的问题。</li><li>如何划分 Service 层逻辑和 Domain 层逻辑是非常含混的，在实际项目中，由于设计和开发人员的水平差异，可能 导致整个结构的混乱无序。</li></ul><h3 id="胀血模型"><a href="#胀血模型" class="headerlink" title="胀血模型"></a>胀血模型</h3><p>基于充血模型的第三个缺点，有同学提出，干脆取消 <code>Service</code> 层，只剩下 <code>Domain Object</code> 和 <code>DAO</code> 两层，在<code>Domain Object</code>的 <code>Domain Logic</code> 上面封装事务。</p><blockquote><p>Domain Object (事务封装，业务逻辑) &lt;—&gt; DAO<br>似乎 <code>Ruby on rails</code> 就是这种模型，它甚至把 <code>Domain Object</code> 和 <code>DAO</code> 都合并了。<br>这样做的优缺点：</p></blockquote><ul><li>简化了分层</li><li>也算符合 OO<br>该模型缺点：</li><li>很多不是 <code>Domain Logic</code> 的 <code>Service</code> 逻辑也被强行放入 <code>Domain Object</code> ，引起了 <code>Domain Object</code> 模型的不稳定；</li><li><code>Domain Object</code> 暴露给 <code>Web</code> 层过多的信息，可能引起意想不到的副作用。<h1 id="运用-DDD-改造现有旧系统实践"><a href="#运用-DDD-改造现有旧系统实践" class="headerlink" title="运用 DDD 改造现有旧系统实践"></a>运用 DDD 改造现有旧系统实践</h1>假如你是一个团队 Leader 或者架构师，当你接手一个旧系统维护及重构的任务时，你该如何改造呢？是否觉得哪里都不对但由于业务认知的不熟悉而无从下手呢？其实这里我可以教你一套方法来应对这种窘境。<br>你要做的大概以下几点：</li></ul><ol><li>通过公共平台大概梳理出系统之间的调用关系（一般中等以上公司都具备 RPC 和 HTTP 调用关系，无脑的挨个系统查询即可），画出来的可能会很乱，也可能会比较清晰，但这就是现状。<br><img src="/images/pasted-14.png" alt="pasted image"><br>( 公众号：LemonResource )</li><li>分配组员每个人认领几个项目，来梳理项目维度关系，这些关系包括：对外接口、交互、用例、MQ 等的详细说明。个别核心系统可以画出内部实体或者聚合根。</li><li>小组开会，挨个 review 每个系统的业务概念，达到组内统一语言。<br><img src="/images/pasted-15.png" alt="pasted image"><br>( 公众号：LemonResource )</li><li>根据以上资料，即可看出哪些不合理的调用关系（比如循环调用、不规范的调用等），甚至不合理的分层。</li><li>根据主线业务自顶向下细分领域，以及限界上下文。此过程可能会颠覆之前的系统划分。</li><li>根据业务复杂性，指定领域模型，选择贫血或者充血模型。团队内部最好实行统一习惯，以免出现交接成本过大。</li><li>分工进行开发，并设置 deadline，注意，不要单一的设置一个 deadline，要设置中间 check 时间，比如 dealline 是 1 月 20 日，还要设置两个 check 时间，分别沟通代码风格及边界职责，以免 deadline 时延期。</li></ol><h1 id="DDD-与-Spring-家族的完美结合"><a href="#DDD-与-Spring-家族的完美结合" class="headerlink" title="DDD 与 Spring 家族的完美结合"></a>DDD 与 Spring 家族的完美结合</h1><p>还用前面提到的文章管理系统，我为你说明一下 DDD 开发的关注点。</p><h2 id="模块（Module）"><a href="#模块（Module）" class="headerlink" title="模块（Module）"></a>模块（Module）</h2><p>模块（Module）是 DDD 中明确提到的一种控制限界上下文的手段，在我们的工程中，一般尽量用一个模块来表示一个领域的限界上下文。<br>如代码中所示，一般的工程中包的组织方式为 {com.公司名.组织架构.业务.上下文.*}，这样的组织结构能够明确地将一个上下文限定在包的内部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.team.bussiness.counter.*;<span class="comment">//计数上下文</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.category.*;<span class="comment">//分类上下文</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.comment.*;<span class="comment">//评论上下文</span></span><br></pre></td></tr></table></figure><p>对于模块内的组织结构，一般情况下我们是按照领域对象、领域服务、领域资源库、防腐层等组织方式定义的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.team.bussiness.cms.domain.valobj.*;<span class="comment">//领域对象-值对象</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.cms.domain.entity.*;<span class="comment">//领域对象-实体</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.cms.domain.aggregate.*;<span class="comment">//领域对象-聚合根</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.cms.service.*;<span class="comment">//领域服务</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.cms.repo.*;<span class="comment">//领域资源库</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.cms.facade.*;<span class="comment">//领域防腐层</span></span><br></pre></td></tr></table></figure><h2 id="领域对象"><a href="#领域对象" class="headerlink" title="领域对象"></a>领域对象</h2><p>领域驱动要解决的一个重要的问题，就是解决对象的贫血问题，而领域对象则最直接的反应了这个能力。<br>我们可以定义聚合根（文章）和值对象（计数器），来举例说明。聚合根持有文章的 id 和文章的计数数据，这里计数器之所以被列为值对象，而非实体的一个属性，是因为计数器是由多部分组成的，比如真实阅读量、推广阅读量等。<br>在文章领域对象中，我们需要定义个一个方法，来获取文章的计数量，用于页面上显示，这个逻辑可能会很复杂，涉及到爆文、专栏作者级别、发布时间等因素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.domain.aggregate;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CategoryRepository categoryRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> articleId; <span class="comment">//文章id</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> ArticleCount articleCount; <span class="comment">//文章计数器</span></span><br><span class="line">    <span class="comment">//getter &amp; setter</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询计数显示数量，这里简化一些逻辑，甚至是不符合实际业务场景，这不重要，这里只为直观表达意思</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getShowArticleCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.articleCount == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.articleCount.realCount + categoryRepository.getCategoryWeight(<span class="keyword">this</span>.category) + (<span class="keyword">this</span>.articleCount.adCount * DayUtils.calDaysByNow(<span class="keyword">this</span>.articleCount.deadDays));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与以往的仅有 <code>getter</code>、<code>setter</code> 的业务对象不同，领域对象具有了行为，对象更加丰满。同时，比起将这些逻辑写在服务内（例如 <code>Service</code>），领域功能的内聚性更强，职责更加明确。</p><h2 id="资源库"><a href="#资源库" class="headerlink" title="资源库"></a>资源库</h2><p>领域对象需要资源存储，资源库可以理解成 <code>DAO</code>，但它比 <code>DAO</code> 更宽泛，存储的手段可以是多样化的，常见的无非是数据库、分布式缓存、本地缓存等。资源库（Repository）的作用，就是对领域的存储和访问进行统一管理的对象。<br>在系统中，我们是通过如下的方式组织资源库的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.team.bussiness.repo.dao.ArticleDao;<span class="comment">//数据库访问对象-文章</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.repo.dao.CommentDao;<span class="comment">//数据库访问对象-评论</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.repo.dao.po.ArticlePO;<span class="comment">//数据库持久化对象-文章</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.repo.dao.po.CommentPO;<span class="comment">//数据库持久化对象-评论</span></span><br><span class="line"><span class="keyword">import</span> com.company.team.bussiness.repo.cache.ArticleObj;<span class="comment">//分布式缓存访问对象-文章缓存访问</span></span><br></pre></td></tr></table></figure><p>资源库对外的整体访问由 Repository 提供，它聚合了各个资源库的数据信息，同时也承担了资源存储的逻辑（例如缓存更新机制等）。<br>在资源库中，我们屏蔽了对底层奖池和奖品的直接访问，而是仅对文章的聚合根进行资源管理。代码示例中展示了资源获取的方法（最常见的 <code>Cache Aside Pattern</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.repo;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleRepository</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    <span class="keyword">private</span> articleDaoCacheAccessObj articleCacheAccessObj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">getArticleById</span><span class="params">(<span class="keyword">int</span> articleId)</span> </span>&#123;</span><br><span class="line">        Article article = articleCacheAccessObj.get(articleId);</span><br><span class="line">        <span class="keyword">if</span>(article!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> article;</span><br><span class="line">        &#125;</span><br><span class="line">        article = getArticleFromDB(articleId);</span><br><span class="line">        articleCacheAccessObj.add(articleId, article);</span><br><span class="line">        <span class="keyword">return</span> article;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Article <span class="title">getArticleFromDB</span><span class="params">(<span class="keyword">int</span> articleId)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比起以往将资源管理放在服务中的做法，由资源库对资源进行管理，职责更加明确，代码的可读性和可维护性也更强。</p><h2 id="防腐层"><a href="#防腐层" class="headerlink" title="防腐层"></a>防腐层</h2><p>亦称适配层。在一个上下文中，有时需要对外部上下文进行访问，通常会引入防腐层的概念来对外部上下文的访问进行一次转义。<br>有以下几种情况会考虑引入防腐层：</p><ul><li>需要将外部上下文中的模型翻译成本上下文理解的模型。</li><li>不同上下文之间的团队协作关系，如果是供奉者关系，建议引入防腐层，避免外部上下文变化对本上下文的侵蚀。</li><li>该访问本上下文使用广泛，为了避免改动影响范围过大。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.facade;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">getArticle</span><span class="params">(ArticleContext context)</span> </span>&#123;</span><br><span class="line">        ArticleResponse resp = articleService.getArticle(context.getArticleId());</span><br><span class="line">        <span class="keyword">return</span> buildArticle(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Article <span class="title">buildArticle</span><span class="params">(ArticleResponse resp)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果内部多个上下文对外部上下文需要访问，那么可以考虑将其放到通用上下文中。</p><h2 id="领域服务"><a href="#领域服务" class="headerlink" title="领域服务"></a>领域服务</h2><p>上文中，我们将领域行为封装到领域对象中，将资源管理行为封装到资源库中，将外部上下文的交互行为封装到防腐层中。此时，我们再回过头来看领域服务时，能够发现领域服务本身所承载的职责也就更加清晰了，即就是通过串联领域对象、资源库和防腐层等一系列领域内的对象的行为，对其他上下文提供交互的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.team.bussiness.service.impl</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentServiceImpl</span> <span class="keyword">implements</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CommentFacade commentFacade;</span><br><span class="line">       <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ArticleRepository articleRepo;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommentResponse <span class="title">commentArticle</span><span class="params">(CommentContext commentContext)</span> </span>&#123;</span><br><span class="line">        Article article = articleRepo.getArticleById(commentContext.getArticleId());<span class="comment">//获取文章聚合根</span></span><br><span class="line">        commentFacade.doComment(commentContext);<span class="comment">//增加计数信息</span></span><br><span class="line">        <span class="keyword">return</span> buildCommentResponse(commentContext,article);<span class="comment">//组装评论后的文章信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CommentResponse <span class="title">buildCommentResponse</span><span class="params">(CommentContext commentContext, Article article)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在省略了一些防御性逻辑（异常处理、空值判断等）后，领域服务的逻辑已经足够清晰明了。</p><h2 id="示范包结构"><a href="#示范包结构" class="headerlink" title="示范包结构"></a>示范包结构</h2><p><img src="/images/pasted-11.png" alt="pasted image"><br>( 公众号：LemonResource )</p><h1 id="反思思考"><a href="#反思思考" class="headerlink" title="反思思考"></a>反思思考</h1><p>DDD 将领域层进行了细分，是 DDD 比较 MVC 框架的最大亮点。<br>DDD 能做到这一点，主要是因为 DDD 将领域层进行了细分，比如说领域对象有实体、聚合，动作和操作叫做领域服务，能力叫做领域能力等，而 MVC 架构并没有对业务元素进行细分，所有的业务都是 Service，从而导致 Controller 层和 Service 层很难定义出技术约束，因为都是 Service，你不会知道这个 Service 是用来描述对象的还是来描述一个业务操作的。<br>针对未来业务扩展方面，聚合根升级为上下文，甚至拆分成微服务，也是应对复杂问题的重要手段。<br>实体和值对象是对现有编程习惯最大的变化，但不要过度关注而忽略了领域对象之间的关系。<br>DDD 本身是方法论，是提供理论指导的，所以不要奢求像 Spring 那样给你一个 Demo 照着写，希望读者看完后多多反思。<br>( 公众号：LemonResource )</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> DDD模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】生产环境动态输入日志级别、文件</title>
      <link href="/java/2602.html"/>
      <url>/java/2602.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章提出了一个很有意思的场景，如何不断停机调整日志级别，该文章基于java环境。<br>提示：本文转载自三方，如果觉得作者写的很不错，烦请给作者点个赞，谢谢。</p><footer><strong>掘金,鸡员外</strong><cite><a href="https://juejin.im/post/5e1fd570e51d450234249549" target="_blank" rel="noopener">这么香的日志动态级别与输出， 你确定不进来看看？——生产环境动态输入日志级别、文件</a></cite></footer></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇我们讨论了日志的性能以及日志的优缺点，有朋友说我没有干货，痛定思痛，决定来一篇干货，让小伙伴们见识一下员外真正的实力💪，讨论一下生产环境如何动态按一次请求、一个用户来调整日志级别，甚至输出独立文件。本文代码较多，建议读者运行一下。</p><blockquote><p>设想一个需求：客服妹妹反馈有用户线上发现了BUG，你拿来日志分析，一个 200M 的日志文件看的头大，最后还是没找到有用的信息，你终于决定开启 DEBUG 日志，重启了项目，让用户再次操作一下，结果开了两分钟线上磁盘就告警了，于是你被运维人员痛批一顿，因为停生产环境又被 BOSS 大批一顿。</p></blockquote><p>试着给自己当一下产品经理，提些需求：</p><ul><li>先定一个小目标，我们能不能不停机就动态调整级别？</li><li>我们能不能将某一个用户甚至一次请求动态调整日志级别？</li><li>让我们进入强者的世界，不仅仅要按照用户动态级别，是否能按照用户、请求临时输出一个文件？</li></ul><p>整理了以上需求，我们来尝试逐一解决。</p><a id="more"></a><h1 id="实战一-动态调整日志级别（小目标实现）"><a href="#实战一-动态调整日志级别（小目标实现）" class="headerlink" title="实战一 动态调整日志级别（小目标实现）"></a>实战一 动态调整日志级别（小目标实现）</h1><p>这个需求很简单，想必大家也都会，<code>Logback</code> 和 <code>Log4j2</code> 都原生实现了日志监控日志文件热加载，使用起来也特别简单，只需要在配置文件中修改，当然，框架作者为了混（e）淆（xin）使用者，使用了不一样的配置方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"30 seconds"</span> &gt;</span> </span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- log4j2 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="实战二-更厉害的动态调整日志输出级别"><a href="#实战二-更厉害的动态调整日志输出级别" class="headerlink" title="实战二 更厉害的动态调整日志输出级别"></a>实战二 更厉害的动态调整日志输出级别</h1><p>如此简单的实现，不能很好满足我们的需求，我们决定再接再厉，毕竟我们是有追求的人。<br>我们来分解一下问题：</p><ul><li>想要根据用户来动态级别，我们肯定要区分出用户；</li><li>想要根据请求来区分日志级别，我们需要识别请求；</li><li>想要动态调整日志级别，我们需要分析日志框架的实现；</li></ul><p>我们来逐一解决问题：</p><ul><li><p>区分用户，还需要分解问题，主流 Web 项目有两种，老项目会使用 <code>Session</code>，新项目多使用 <code>Token</code>：</p><ul><li><code>Session</code> ：<code>Session</code> 比较方便，放入 <code>Session</code> 一个日志级别即可。</li><li><code>Token</code> ： <code>Token</code> 也不复杂，提供一种解决方案，可以将 <code>Token</code> 放入到缓存，比如 <code>Redis</code>、数据库来存储（不推荐存数据库）。</li></ul></li></ul><ul><li>区分请求：<ul><li>给用户提供按钮，配合单页面应用，将所有 HTTP 请求附带一个参数，此方法危险，不适合互联网项目。</li><li>特殊需求，在开发过程中编码写入代码中。</li></ul></li></ul><blockquote><p>区分用户最佳实践，给管理员开放功能，列出在线用户，点击用户即可选择用户输出的日志级别。</p></blockquote><p>动态调整日志级别，这个是我们最棘手的地方，分析<code>Logback API</code> 会发现 <code>ch.qos.logback.classic.Logger</code>已经提供了<code>#setLevel</code>方法，这个方法看似能够在运行过程中改变日志的输出级别，但是读过我之前文章的小伙伴肯定知道，<code>Logger</code> 实例建议<code>static final</code>，所以<code>Logger</code>实例是多线程共享的，如果我们修改了<code>Logger</code>的级别，肯定会污染其他请求乃至其他用户，看来这样是行不通了，如何解决？<br>没办法时只有两条路线，阅读源码以及翻阅文档，我们先从源码入手，我们先来分析一下<code>Logback</code>是如何决定是否输出一条日志的：<br>我们随便输出一条日志<code>log.debug(&quot;A debug Log&quot;);</code>，断点跟进去，发现真正的判断逻辑在<code>filterAndLog_0_Or3Plus</code>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">filterAndLog_0_Or3Plus</span><span class="params">(<span class="keyword">final</span> String localFQCN, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">final</span> Marker marker, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">final</span> Level level, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">final</span> String msg, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">final</span> Object[] params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">final</span> Throwable t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 神奇的方法</span></span><br><span class="line">  <span class="keyword">final</span> FilterReply decision = loggerContext</span><br><span class="line">    .getTurboFilterChainDecision_0_3OrMore(marker, <span class="keyword">this</span>, level, </span><br><span class="line">                                           msg, params, t);</span><br><span class="line">  <span class="comment">// 如果上面神奇的方法返回 NEUTRAL 才判断日志级别</span></span><br><span class="line">  <span class="keyword">if</span> (decision == FilterReply.NEUTRAL) &#123;</span><br><span class="line">    <span class="keyword">if</span> (effectiveLevelInt &gt; level.levelInt) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回 DENY 根本就不判断日志级别了</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (decision == FilterReply.DENY) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果能够执行到这里，则输出日志</span></span><br><span class="line">  buildLoggingEventAndAppend(localFQCN, marker, </span><br><span class="line">                             level, msg, params, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析源码我们得出结论，神奇的方法返回值优先级要高于日志级别判断，这样就有意思了，我们能不能定制那个神奇方法呢，继续跟进去发现，<code>TurboFilterList</code>继承了<code>CopyOnWriteArrayList&lt;TurboFilter&gt;</code>，其本身就是一个<code>List</code>，其中的<code>TurboFilterList#getTurboFilterChainDecision</code>里面逻辑就是循环自己获取<code>FilterReply</code>然后返回，一起看一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FilterReply <span class="title">getTurboFilterChainDecision</span><span class="params">(<span class="keyword">final</span> Marker marker, </span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">final</span> Logger logger, </span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">final</span> Level level, </span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">final</span> String format, </span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">final</span> Object[] params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">final</span> Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> size = size();</span><br><span class="line">  <span class="comment">// 如果只有一个，直接返回结果，期间如果异常直接返回 NEUTRAL</span></span><br><span class="line">  <span class="comment">// size不可能是0，因为调用者已经判断了，这里不再展示</span></span><br><span class="line">  <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TurboFilter tf = get(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">return</span> tf.decide(marker, logger, level, </span><br><span class="line">                       format, params, t);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException iobe) &#123;</span><br><span class="line">      <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果有多个，循环获取第一个不是 NEUTRAL 的结果返回，其他不再判断</span></span><br><span class="line">  Object[] tfa = toArray();</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> len = tfa.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// for (TurboFilter tf : this) &#123;</span></span><br><span class="line">    <span class="keyword">final</span> TurboFilter tf = (TurboFilter) tfa[i];</span><br><span class="line">    <span class="keyword">final</span> FilterReply r = tf</span><br><span class="line">      .decide(marker, logger, level, format, params, t);</span><br><span class="line">    <span class="keyword">if</span> (r == FilterReply.DENY || r == FilterReply.ACCEPT) &#123;</span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>梳理一下思路，每一条日志，无论级别，最终都会进入<code>filterAndLog_0_Or3Plus</code>方法进行判断是否输出，而其判断又会优先判断<code>TurboFilterList#getTurboFilterChainDecision</code>的返回值，<code>getTurboFilterChainDecision</code>中使用了<code>TurboFilter</code>，跟进源码我们发现<code>TurboFilterList</code>是空的，我们几乎可以断言，作者不会平白无故搞一个空的<code>List</code>，一定是用来给我们扩展的，我们去翻翻文档，肯定找得到扩展方法，翻看文档中关于<code>TurboFilters</code>的部分，我们找到如下描述：</p><blockquote><h2> TurboFilters </h2><p><code>TurboFilter</code> objects all extend the <code>TurboFilter</code> abstract class. Like the regular filters, they use ternary logic to return their evaluation of the logging event.</p><p>Overall, they work much like the previously mentioned filters. However, there are two main differences between <code>Filter</code> and <code>TurboFilter</code> objects.</p><p><code>TurboFilter</code> objects are tied to the logging context. Hence, they are called not only when a given appender is used, but each and every time a logging request is issued. Their scope is wider than appender-attached filters.</p><p>More importantly, they are called before the <code>LoggingEvent</code> object creation. <code>TurboFilter</code> objects do not require the instantiation of a logging event to filter a logging request. As such, turbo filters are intended for high performance filtering of logging events, even before the events are created.</p></blockquote><p>大概意思和我们分析的也差不多，<code>TurboFilter</code>也可以控制日志是否能够输出，而且优先级要高于普通的<code>Filter</code>，这不奇怪，毕竟<code>Turbo</code>嘛。</p><p>文档中给出了实例，接下来我们来定义一个自己<code>TurboFilter</code>吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DynamicLoggingFilter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiyanwai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-01-15 16:09:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicLoggingFilter</span> <span class="keyword">extends</span> <span class="title">TurboFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEBUG_HEADER_NAME = <span class="string">"X-Debug"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEBUG_SESSION_KEY = DEBUG_HEADER_NAME;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回值 FilterReply.DENY，FilterReply.NEUTRAL或FilterReply.ACCEPT</span></span><br><span class="line"><span class="comment">   * 如果是 DENY，则不会再输出</span></span><br><span class="line"><span class="comment">   * 如果是 ACCEPT，则直接输出</span></span><br><span class="line"><span class="comment">   * 如果是 NEUTRAL，走来日志输出判断逻辑</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> FilterReply.DENY，FilterReply.NEUTRAL或FilterReply.ACCEPT</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterReply <span class="title">decide</span><span class="params">(Marker marker, Logger logger, Level level,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String format, Object[] params, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里可以过滤我们自己的logger</span></span><br><span class="line">    <span class="keyword">boolean</span> isMyLogger = logger.getName().startsWith(<span class="string">"com.jiyuanwai"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isMyLogger) &#123;</span><br><span class="line">      <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RequestAttributes requestAttributes = RequestContextHolder</span><br><span class="line">        .getRequestAttributes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 项目启动或者运行定时器时，可能没有 RequestAttributes</span></span><br><span class="line">    <span class="keyword">if</span> (requestAttributes == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先判断 RequestHeader，用于区分线程</span></span><br><span class="line">    ServletRequestAttributes servletRequestAttributes =</span><br><span class="line">        (ServletRequestAttributes) requestAttributes;</span><br><span class="line">    <span class="comment">// 按照请求参数判断，实际生产环境可以开发功能给管理人员功能，将用户唯一标示放入缓存或者session</span></span><br><span class="line">    HttpServletRequest request = servletRequestAttributes.getRequest();</span><br><span class="line">    String debug = request.getHeader(DEBUG_HEADER_NAME);</span><br><span class="line">    <span class="keyword">boolean</span> debugBoolean = Boolean.parseBoolean(debug);</span><br><span class="line">    <span class="keyword">if</span> (debugBoolean) &#123;</span><br><span class="line">      <span class="keyword">return</span> FilterReply.ACCEPT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再判断 Session</span></span><br><span class="line">    HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">    &#125;</span><br><span class="line">    Object attribute = session.getAttribute(DEBUG_SESSION_KEY);</span><br><span class="line">    debugBoolean = Boolean.parseBoolean((String) attribute);</span><br><span class="line">    <span class="keyword">if</span> (debugBoolean) &#123;</span><br><span class="line">      <span class="keyword">return</span> FilterReply.ACCEPT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志配置文件调整如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">turboFilter</span> <span class="attr">class</span>=<span class="string">"com.jiyuanwai.logging.extend.dynamic.DynamicLoggingFilter"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写一个方法测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debugLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  log.debug(<span class="string">"A debug Log"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里推荐大家使用Idea内置的 HTTP Request：<br><img src="/images/pasted-4.png" alt="pasted image"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 测试 RequestHeader 使用</span><br><span class="line">GET http://localhost:8082/log/level</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"># 通过Header，避免污染请求参数（否则文件上传会有问题）</span><br><span class="line"><span class="attribute">X-Debug</span>: true</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><p>执行之后，可以在控制台看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22:50:19.816 DEBUG [082-exec-5] c.j.l.e.c.LogController       (  35) - A debug Log</span><br></pre></td></tr></table></figure><p>我们完成了按照请求来动态调整日志。<br>继续测试一下<code>Session</code>，这里我就简单处理，仅仅在 Controller 增加一下作为测试，线上可以配合在线用户管理功能实现，小伙伴们可以按需扩展，如果有困难可以留言，我收集大家的困难统一解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDebugBySession</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 仅供测试，线上需要开发功能，获取对对应用户 session，然后放入属性</span></span><br><span class="line">  session.setAttribute(DynamicLoggingFilter.DEBUG_SESSION_KEY, <span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启 <code>Session</code> 级别 <code>debug</code> 请求如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 以 Session 开启当前用户 DEBUG 模式</span><br><span class="line">PUT http://localhost:8082/log/level</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 去掉自定义Header，再次测试</span><br><span class="line">GET http://localhost:8082/log/level</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">09:28:16.662 DEBUG [082-exec-1] c.j.l.e.c.LogController       (  40) - A debug Log</span><br></pre></td></tr></table></figure><p><code>Tocken</code> 与 <code>Session</code> 几乎没有差别，这里就不再展示了。<br>至此，我们已经很优雅的实现了按照请求、按照用户来动态输出日志，可以自豪一下了。</p><h1 id="实战三-强者的世界"><a href="#实战三-强者的世界" class="headerlink" title="实战三 强者的世界"></a>实战三 强者的世界</h1><p>让我们来实现最后一个需求，动态输出日志文件。<br><img src="/images/pasted-5.png" alt="pasted image"><br>我们先分析一下需求，想要按照用户临时输出文件，区分用户可以使用之前的方法，我们需要解决的问题是，我们如何将特定的用户输出到特定的文件？<br>读过员外以前文章的朋友都知道，真正负责输出日志的是 <code>Appender</code>，我们优先去翻翻文档看看官方有没有解决方案，经过一番硬啃文档，我们发现了 <code>SiftingAppender</code>配合<code>discriminator</code>再配合<code>MDC</code> 似乎能解决我们的需求，<code>SiftingAppender</code>可以根据用户会话分离日志事件，这样不同用户生成的日志就可以进入不同的日志文件，甚至可以每个用户一个日志文件。<code>discriminator</code>很好理解按照字面意思就是鉴别器可以用来鉴别，但<code>MDC</code>是什么？</p><blockquote><p>“Mapped Diagnostic Context” is essentially a map maintained by the logging framework where the application code provides key-value pairs which can then be inserted by the logging framework in log messages. MDC data can also be highly helpful in filtering messages or triggering certain actions.</p></blockquote><p>简单翻译一下，MDC 就是日志框架维护的一个Map，可以用来过滤和触发操作，员外总结了两个最佳实践：</p><p>读过以前文章的小伙伴（没读过的赶快关注公众号，点击往期回顾-日志系列即可查看）肯定还记得我提过的超级 SessionId 与RequestId，如何实现？当然是MDC，见下文。<br>另外就是discriminator配合MDC可以动态输出文件了，我们来试一下。</p><p>实现思路，使用Filter并且第一个执行，直接来看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LogFilter 用于处理动态日志</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiyanwai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-01-16 06:05:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(Integer.MIN_VALUE)</span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_ID_MDC_KEY = <span class="string">"requestId"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SESSION_ID_MDC_KEY = <span class="string">"sessionId"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STAND_ALONE_HEADER_KEY = <span class="string">"X-StandAlone-File"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STAND_ALONE_SESSION_KEY = STAND_ALONE_HEADER_KEY;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="comment">// requestId 与超级 SessionId，可以根据需求自行定制</span></span><br><span class="line">        String requestId = CommonUtils.generateRequestId();</span><br><span class="line">        MDC.put(REQUEST_ID_MDC_KEY, requestId);</span><br><span class="line">        String sessionId = request.getRequestedSessionId();</span><br><span class="line">        MDC.put(SESSION_ID_MDC_KEY, sessionId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有开启了独立文件输出，才放入MDC</span></span><br><span class="line">        String standAlone = request.getHeader(STAND_ALONE_HEADER_KEY);</span><br><span class="line">        <span class="keyword">if</span> (standAlone == <span class="keyword">null</span>) &#123;</span><br><span class="line">          standAlone = (String) request.getSession().getAttribute(STAND_ALONE_SESSION_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (standAlone != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 此处可以任意定制不同路径，sessionId会被拼接到文件名，参考下文修改后的xml</span></span><br><span class="line">          MDC.put(STAND_ALONE_SESSION_KEY, sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 此处处理异常，不影响业务</span></span><br><span class="line">        log.error(<span class="string">"Error handler dynamic log"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 继续执行，不处理其他Filter异常</span></span><br><span class="line">      filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 切记要清理环境</span></span><br><span class="line">      MDC.clear();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件增加<code>SiftAppender</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SIFT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.sift.SiftingAppender"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">discriminator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>X-StandAlone-File<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MDC取不到，默认“all” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultValue</span>&gt;</span>all<span class="tag">&lt;/<span class="name">defaultValue</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sift</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Appender Name需要独立 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE-$&#123;X-StandAlone-File&#125;"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 输出位置，$&#123;X-StandAlone-File&#125;取MDC --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;X-StandAlone-File&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 按日滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/%d&#123;yyyy-MM&#125;/log-%d&#123;yyyy-MM-dd-HH&#125;-%i.$&#123;X-StandAlone-File&#125;.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单个文件最大50M --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  最多占用5G磁盘空间，500个文件（总共不能超过该5G） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>500<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>5GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 追加方式记录日志 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志文件的格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sift</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为了方便测试，同时输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SIFT"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调整Controller增加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 为当前用户开启debug，测试使用，生产环境请配合在线用户管理相关功能来实现</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> session session</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDebugBySession</span><span class="params">(HttpSession session,</span></span></span><br><span class="line"><span class="function"><span class="params">                                @RequestParam(required = <span class="keyword">false</span>)</span> <span class="keyword">boolean</span> standAlone) </span>&#123;</span><br><span class="line">  <span class="comment">// 仅供测试，线上需要开发功能，获取对对应用户 session，然后放入属性</span></span><br><span class="line">  session.setAttribute(DynamicLoggingFilter.DEBUG_SESSION_KEY, <span class="string">"true"</span>);</span><br><span class="line">  <span class="keyword">if</span> (standAlone) &#123;</span><br><span class="line">    session.setAttribute(LogFilter.STAND_ALONE_SESSION_KEY, <span class="string">""</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先使用Header模式来测试没有开启独立输出会文件结构如何</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 测试 RequestHeader 使用</span><br><span class="line">GET http://localhost:8082/log/level</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"># 通过Header，避免污染请求参数（否则文件上传会有问题）</span><br><span class="line"><span class="attribute">X-Debug</span>: true</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-6.png" alt="pasted image"><br>内容如下，可以看到我们的RequestId与超级SessionId都成功的写到日志里面了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-01-16 09:54:05.827 DEBUG [http-nio-8082-exec-1] c.j.l.extend.controller.LogController    --- requestId&#x3D;ee77a879576147bcafdcb745ba5767d3, sessionId&#x3D;21F4DE2AADBA675F2135601D760BF18E : A debug Log</span><br></pre></td></tr></table></figure><p>使用Http Request进行测试开启 debug，并且开启独立文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 以 Session 开启当前用户 DEBUG 模式</span><br><span class="line">PUT http://localhost:8082/log/level</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">standAlone=true</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><p>测试日志输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 测试 Session 模式使用</span><br><span class="line">GET http:&#x2F;&#x2F;localhost:8082&#x2F;log&#x2F;level</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-7.png" alt="pasted image"></p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>我们之前采用了日志框架原生解决动态级别，问题在于修改起来不方便，需要连接线上服务器采用vim来修改，上文提到了 Logback 提供了API可以直接热修改，我们来看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改单个日志级别</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loggerName 日志实例名称</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> level      级别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeLoggingLevel</span><span class="params">(String loggerName,</span></span></span><br><span class="line"><span class="function"><span class="params">                               @RequestParam(required = <span class="keyword">false</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">                                             defaultValue = <span class="string">"DEBUG"</span>)</span> String level) </span>&#123;</span><br><span class="line">  ch.qos.logback.classic.Logger logger =</span><br><span class="line">    (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(loggerName);</span><br><span class="line">  logger.setLevel(Level.toLevel(level));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 测试 调整全局 日志级别</span><br><span class="line">POST http://localhost:8082/log/level</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">loggerName=ROOT</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><p>如果我们想要还原：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将日志级别重置为配置文件默认</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreLoggingLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    JoranConfigurator configurator = <span class="keyword">new</span> JoranConfigurator();</span><br><span class="line">    configurator.setContext(context);</span><br><span class="line">    context.reset();</span><br><span class="line">    configurator.doConfigure(<span class="keyword">new</span> ClassPathResource(<span class="string">"logback.xml"</span>).getInputStream());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JoranException | IOException ignore) &#123;</span><br><span class="line">    <span class="comment">// StatusPrinter will handle this</span></span><br><span class="line">  &#125;</span><br><span class="line">  StatusPrinter.printInCaseOfErrorsOrWarnings(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 测试还原日志级别为配置文件级别</span><br><span class="line">DELETE http://localhost:8082/log/level</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>这一篇我们实现了按请求、用户级别动态输出级别与文件，现在已经应该能满足 99% 的场景了，员外只用过 Logback，如果读者想使用 Log4j2，可以按照思路尝试自己实现，如果点赞超过 1000，我也可以实现出来给大家用，下一篇我会做一些前文勘误、读者问题反馈，还有少量的最佳实践，欢迎关注更新。<br>最后给大家贴一张分析过程的思维导图，希望能够帮助大家学会分析、解决问题。</p><p>作者：鸡员外<br>链接：<a href="https://juejin.im/post/5e1fd570e51d450234249549" target="_blank" rel="noopener">https://juejin.im/post/5e1fd570e51d450234249549</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> java </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】SQL性能优化，书写高质量SQL语句</title>
      <link href="/database/6269.html"/>
      <url>/database/6269.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>SQL优化是一个十分常见的问题，基本也是面试必考题。留意到一篇SQL优化的文章，就转载过来了。</p><footer><strong>掘金,Java酱</strong><cite><a href="https://juejin.im/post/5e0f5eec5188253a9d4a436f" target="_blank" rel="noopener">《干货！SQL性能优化，书写高质量SQL语句》</a></cite></footer></blockquote><p>写SQL语句的时候我们往往关注的是SQL的执行结果，但是是否真的关注了SQL的执行效率，是否注意了SQL的写法规范？<br>以下的干货分享是在实际开发过程中总结的，希望对大家有所帮助！<br>#1. limit分页优化<br>当偏移量特别大时，limit效率会非常低。</p><blockquote><p>SELECT id FROM A LIMIT 1000,10   很快<br>SELECT id FROM A LIMIT 90000,10  <strong>很慢</strong></p></blockquote><p><strong>方案一：</strong><br><code>select id from A order by id limit 90000,10;</code><br>复制代码如果我们结合order by使用。很快，0.04秒就OK。 因为使用了id主键做索引！当然，是否能够使用索引还需要根据业务逻辑来定，这里只是为了提醒大家，在分页的时候还需谨慎使用！<br><strong>方案二</strong><br><code>select id from A order by id  between 90000 and 90010;</code></p><h1 id="2-利用limit-1-、top-1-取得一行"><a href="#2-利用limit-1-、top-1-取得一行" class="headerlink" title="2.利用limit 1 、top 1 取得一行"></a>2.利用<code>limit 1</code> 、<code>top 1</code> 取得一行</h1><p>有些业务逻辑进行查询操作时(特别是在根据某一字段DESC,取最大一笔).可以使用<code>limit 1</code> 或者 <code>top 1</code> 来终止[数据库索引]继续扫描整个表或索引。<br>反例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">LIKE</span> <span class="string">'abc%'</span></span><br></pre></td></tr></table></figure><p>正例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">LIKE</span> <span class="string">'abc%'</span> <span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="3-任何情况都不要用-select-from-table-，用具体的字段列表替换”-”，不要返回用不到的字段-避免全盘扫描！"><a href="#3-任何情况都不要用-select-from-table-，用具体的字段列表替换”-”，不要返回用不到的字段-避免全盘扫描！" class="headerlink" title="3. 任何情况都不要用 select * from table ，用具体的字段列表替换”*”，不要返回用不到的字段,避免全盘扫描！"></a>3. 任何情况都不要用 select * from table ，用具体的字段列表替换”*”，不要返回用不到的字段,避免全盘扫描！</h1><p>反例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A</span><br></pre></td></tr></table></figure><p>正例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A</span><br></pre></td></tr></table></figure><h1 id="4-批量插入优化"><a href="#4-批量插入优化" class="headerlink" title="4. 批量插入优化"></a>4. 批量插入优化</h1><p>反例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> person(<span class="keyword">name</span>,age) <span class="keyword">values</span>(<span class="string">'A'</span>,<span class="number">24</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> person(<span class="keyword">name</span>,age) <span class="keyword">values</span>(<span class="string">'B'</span>,<span class="number">24</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> person(<span class="keyword">name</span>,age) <span class="keyword">values</span>(<span class="string">'C'</span>,<span class="number">24</span>)</span><br></pre></td></tr></table></figure><p>正例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> person(<span class="keyword">name</span>,age) <span class="keyword">values</span>(<span class="string">'A'</span>,<span class="number">24</span>),(<span class="string">'B'</span>,<span class="number">24</span>),(<span class="string">'C'</span>,<span class="number">24</span>),</span><br></pre></td></tr></table></figure><p>sql语句的优化主要在于对索引的正确使用，而我们在开发中经常犯的错误便是对表进行全盘扫描，一来影响性能，而来耗费时间!</p><h1 id="5-like语句的优化"><a href="#5-like语句的优化" class="headerlink" title="5.like语句的优化"></a>5.like语句的优化</h1><p>反例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%abc%'</span></span><br></pre></td></tr></table></figure><p>由于abc前面用了“%”，因此该查询必然走全表查询,除非必要(模糊查询需要包含abc)，否则不要在关键词前加%<br>正例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'abc%'</span></span><br></pre></td></tr></table></figure><p>实例<br><code>mysql</code>版本：<code>5.7.26</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select nick_name from member where nick_name like &#39;%小明%&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-2.png" alt="pasted image"><br><code>like&#39;%小明%&#39;</code> 并未使用索引！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nick_name <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> nick_name <span class="keyword">like</span> <span class="string">'小明%'</span></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-3.png" alt="pasted image"><br><code>like&#39;小明%&#39;</code> 成功使用索引！</p><h1 id="6-where子句使用or的优化"><a href="#6-where子句使用or的优化" class="headerlink" title="6.where子句使用or的优化"></a>6.<code>where</code>子句使用or的优化</h1><p>通常使用 <code>union all</code> 或 <code>union</code> 的方式替换“or”会得到更好的效果。<code>where</code>子句中使用了<code>or</code>关键字,索引将被放弃使用。<br>反例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">num</span> = <span class="number">10</span> <span class="keyword">or</span> <span class="keyword">num</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>正例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">num</span> = <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">num</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="7-where子句中使用-IS-NULL-或-IS-NOT-NULL-的优化"><a href="#7-where子句中使用-IS-NULL-或-IS-NOT-NULL-的优化" class="headerlink" title="7.where子句中使用 IS NULL 或 IS NOT NULL 的优化"></a>7.<code>where</code>子句中使用 <code>IS NULL</code> 或 <code>IS NOT NULL</code> 的优化</h1><p>反例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">num</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p>在<code>where</code>子句中使用 <code>IS NULL</code> 或 <code>IS NOT NULL</code> 判断，索引将被放弃使用，会进行全表查询。<br>正例<br>优化成<strong>num上设置默认值0</strong>，确保表中<code>num</code>没有<code>null</code>值, <code>IS NULL</code> 的用法在实际业务场景下SQL使用率极高，我们应注意避免全表扫描</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">num</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="8-where子句中对字段进行表达式操作的优化"><a href="#8-where子句中对字段进行表达式操作的优化" class="headerlink" title="8.where子句中对字段进行表达式操作的优化"></a>8.<code>where</code>子句中对字段进行表达式操作的优化</h1><p>不要在<code>where</code>子句中的“=”左边进行函数、算数运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><ul><li>1<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">datediff</span>(<span class="keyword">day</span>,createdate,<span class="string">'2019-11-30'</span>)=<span class="number">0</span></span><br></pre></td></tr></table></figure>优化为<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> createdate&gt;=<span class="string">'2019-11-30'</span> <span class="keyword">and</span> createdate&lt;<span class="string">'2019-12-1'</span></span><br></pre></td></tr></table></figure></li><li>2<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">year</span>(addate) &lt;<span class="number">2020</span></span><br></pre></td></tr></table></figure>优化为<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> A <span class="keyword">where</span> addate&lt;<span class="string">'2020-01-01'</span></span><br></pre></td></tr></table></figure><h1 id="9-排序的索引问题"><a href="#9-排序的索引问题" class="headerlink" title="9.排序的索引问题 "></a>9.排序的索引问题 </h1><code>mysql</code>查询只是用一个索引，因此如果<code>where</code>子句中已经使用了索引的话，那么<strong><code>order by</code>中的列是不会使用索引</strong>。因此数据库默认排序可以符合要求情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</li></ul><h1 id="10-尽量用-union-all-替换-union"><a href="#10-尽量用-union-all-替换-union" class="headerlink" title="10. 尽量用 union all 替换 union"></a>10. 尽量用 <code>union all</code> 替换 <code>union</code></h1><p><code>union</code>和<code>union all</code>的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的<code>cpu</code>运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用<code>union all</code>而不是<code>union</code></p><h1 id="11-Inner-join-和-left-join、right-join、子查询"><a href="#11-Inner-join-和-left-join、right-join、子查询" class="headerlink" title="11.Inner join 和 left join、right join、子查询"></a>11.<code>Inner join</code> 和 <code>left join</code>、<code>right join</code>、子查询</h1><ul><li><p>第一：<code>inner join</code>内连接也叫等值连接是，<code>left/right join</code>是外连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.id,A.name,B.id,B.name <span class="keyword">FROM</span> A <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.id =B.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> A.id,A.name,B.id,B.name <span class="keyword">FROM</span> A <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">ON</span> B A.id= B.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> A.id,A.name,B.id,B.name <span class="keyword">FROM</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">ON</span> A.id =B.id;</span><br></pre></td></tr></table></figure><p>经过来之多方面的证实 <code>inner join</code>性能比较快，因为<code>inner join</code>是等值连接，或许返回的行数比较少。但是我们要记得有些语句隐形的用到了等值连接，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.id,A.name,B.id,B.name <span class="keyword">FROM</span> A,B <span class="keyword">WHERE</span> A.id = B.id;</span><br></pre></td></tr></table></figure><p>推荐：能用<code>inner join</code>连接尽量使用<code>inner join</code>连接</p></li><li><p>第二：子查询的性能又比外连接性能慢，尽量用外连接来替换子查询。</p></li></ul><p>反例<br>mysql是先对外表A执行全表查询，然后根据uuid逐次执行子查询，如果外层表是一个很大的表，我们可以想象查询性能会表现比这个更加糟糕。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span>* <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> B <span class="keyword">where</span> <span class="keyword">id</span>&gt;=<span class="number">3000</span> <span class="keyword">and</span> A.uuid=B.uuid);</span><br></pre></td></tr></table></figure><p>执行时间：<strong>2s左右</strong><br>正例</p><figure class="highlight plain"><figcaption><span>from A inner join B ON A.uuid</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行时间：**1s不到**</span><br><span class="line"></span><br><span class="line">- 第三：使用&#96;JOIN&#96;时候，应该用小的结果驱动大的结果</span><br><span class="line"></span><br><span class="line">&#96;left join&#96; 左边表结果尽量小，如果有条件应该放到左边先处理，right join同理反向。如：</span><br><span class="line">反例</span><br><span class="line">&#96;&#96;&#96;sql</span><br><span class="line">Select * from A left join B A.id&#x3D;B.ref_id where  A.id&gt;10</span><br></pre></td></tr></table></figure><p>正例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> A wehre <span class="keyword">id</span> &gt;<span class="number">10</span>) T1 <span class="keyword">left</span> <span class="keyword">join</span> B <span class="keyword">on</span> T1.id=B.ref_id;</span><br></pre></td></tr></table></figure><h1 id="12-exist-amp-in-优化"><a href="#12-exist-amp-in-优化" class="headerlink" title="12.exist &amp; in 优化"></a>12.<code>exist</code> &amp; <code>in</code> 优化</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> A <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">in</span> ( <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">from</span> B )</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> A <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">EXISTS</span> ( <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">from</span> A.id= B.id )</span><br></pre></td></tr></table></figure><p>分析:<br><code>in</code> 是在内存中遍历比较<br><code>exist</code> 需要查询数据库，所以当B的数据量比较大时，<code>exists</code>效率优于<code>in**</code><br>in()只执行一次，把B表中的所有id字段缓存起来，之后检查A表的id是否与B表中的id相等，如果id相等则将A表的记录加入到结果集中，直到遍历完A表的所有记录。<br>In 操作的流程原理如同一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List resultSet=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Array A=(select * from A);</span><br><span class="line">Array B=(select id from B);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;B.length;j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(A[i].id==B[j].id) &#123;</span><br><span class="line">         resultSet.add(A[i]);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resultSet;</span><br></pre></td></tr></table></figure><p>可以看出，当B表数据较大时不适合使用in()，因为会把B表数据全部遍历一次<br>如：A表有10000条记录，B表有1000000条记录，那么最多有可能遍历10000<em>1000000次，效率很差。<br>再如：A表有10000条记录，B表有100条记录，那么最多有可能遍历10000</em>100次，遍历次数大大减少，效率大大提升。<br>  <strong>结论：in()适合B表比A表数据小的情况</strong><br><code>exist()</code>会执行<code>A.length()</code>次，执行过程代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List resultSet=&#123;&#125;;</span><br><span class="line">Array A=(select * from A);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(exists(A[i].id) &#123;  <span class="comment">//执行select 1 from B where B.id=A.id是否有记录返回</span></span><br><span class="line">       resultSet.add(A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resultSet;</span><br></pre></td></tr></table></figure><p>当B表比A表数据大时适合使用<code>exists()</code>，因为它没有那么多遍历操作，只需要再执行一次查询就行。<br>如：A表有10000条记录，B表有1000000条记录，那么<code>exists()</code>会执行10000次去判断A表中的id是否与B表中的id相等。<br>如：A表有10000条记录，B表有100000000条记录，那么<code>exists()</code>还是执行10000次，因为它只执行<code>A.length</code>次，可见B表数据越多，越适合<code>exists()</code>发挥效果。<br>再如：A表有10000条记录，B表有100条记录，那么<code>exists()</code>还是执行10000次，还不如使用<code>in()</code>遍历10000*100次，因为<code>in()</code>是在内存里遍历比较，而<code>exists()</code>需要查询数据库，<br>我们都知道查询数据库所消耗的性能更高，而内存比较很快。</p><p><strong>结论：<code>exists()</code>适合B表比A表数据大的情况</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】探索 Python 3 加密技术</title>
      <link href="/python/39233.html"/>
      <url>/python/39233.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>原文链接 : <a href="https://juejin.im/entry/5742b1dc79df54006073fd4f" target="_blank" rel="noopener">Python 3: An Intro to Encryption</a></li><li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>译者 : <a href="https://github.com/rainyear" target="_blank" rel="noopener">Yushneng</a></li><li>校对者: <a href="https://github.com/Zheaoli" target="_blank" rel="noopener">Zheaoli</a>、<a href="https://github.com/iThreeKing" target="_blank" rel="noopener">iThreeKing</a></li></ul><footer><strong>掘金翻译计划</strong><cite><a href="https://juejin.im/entry/575fae92df0eea0062c5a1dc" target="_blank" rel="noopener">探索Python3加密技术</a></cite></footer></blockquote><p><code>Python 3</code> 没有太多用于处理加密的标准库，通常以哈希库作为替代。在本章节中我们将简单了解一下 <code>hashlib</code>，但重点还是集中在两个第三方库：<code>PyCrypto</code> 和 <code>cryptography</code>。我们将会学习如何使用这些库对字符串进行加密和解密。</p><h1 id="哈希法"><a href="#哈希法" class="headerlink" title="哈希法"></a>哈希法</h1><p>如果你需要安全哈希或密文信息的算法，那么可以使用 <code>hashlib</code> 模块所提供的 <code>Python</code> 标准库，它提供 <code>SHA1</code>，<code>SHA224</code>，<code>SHA256</code>，<code>SHA384</code>，<code>SHA512</code> 等 <code>FIPS</code> 安全哈希算法以及 <code>RSA MD5</code> 算法。<code>Python</code> 也支持 <code>adler32</code> 和 <code>crc32</code> 哈希函数，不过它们由 <code>zlib</code> 模块提供。</p><p>哈希算法最常用于对密码进行加密，从而保存密码的哈希值而非明文密码。当然，哈希算法必须足够好否则就会被破译。哈希算法的另一用途是获取文件的哈希值并将其与文件分开传递，接收者就可以据此判断收到的文件与哈希值是否匹配，如果匹配这说明在传递过程中文件没有被人篡改。</p><p>让我们试着生成一个 md5 哈希值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>md5 = hashlib.md5()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>md5.update(<span class="string">'Python rocks!'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">""</span>, line <span class="number">1</span>, <span class="keyword">in</span> </span><br><span class="line">    md5.update(<span class="string">'Python rocks!'</span>)</span><br><span class="line">TypeError: Unicode-objects must be encoded before hashing</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>md5.update(<span class="string">b'Python rocks!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>md5.digest()</span><br><span class="line"><span class="string">b'\x14\x82\xec\x1b#d\xf6N&#125;\x16*+[\x16\xf4w'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>让我们花点时间分解一下这个过程。首先，我们引入了 <code>hashlib</code> 模块并创建了一个<code>md5 HASH</code>对象。接下来我们向这个对象添加了一些文本字符，但是却得到错误信息。要使用 md5 哈希算法，你必须传递字节串而不是普通的字符串。于是我们改用字节串并调用 <code>digest</code> 方法获取我们想要的哈希值。如果你想要十六进制的密文，我们也可以做到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; md5.hexdigest()</span><br><span class="line">&#39;1482ec1b2364f64e7d162a2b5b16f477&#39;</span><br></pre></td></tr></table></figure><p>实际上有更便捷的方法产生哈希值，在创建 sha512 哈希值的时候我们可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sha &#x3D; hashlib.sha1(b&#39;Hello Python&#39;).hexdigest()</span><br><span class="line">&gt;&gt;&gt; sha</span><br><span class="line">&#39;422fbfbc67fe17c86642c5eaaa48f8b670cbed1b&#39;</span><br></pre></td></tr></table></figure><p>正如你所见，我们可以在创建哈希对象实例的同时调用密文算法，然后将其结果打印出来。我选择 <code>sha1</code> 哈希算法是因为它的结果更短能够更好地适应页面。但同样也更不安全，你也可以随便尝试一下上面列举的其它算法。</p><h1 id="密钥派生"><a href="#密钥派生" class="headerlink" title="密钥派生"></a>密钥派生</h1><p><code>Python</code> 内置标准库对密钥派生的支持非常有限。实际上 <code>hashlib</code> 提供的唯一方法是 <code>pbkdf2_hmac</code>，实现的是<code>PKCS#5</code> 基于密码的密钥派生函数2（PBKDF2 译者注：这里作者原意是<code>pbkdf2_hmac</code>是基于<code>PBKDF2</code>的实现，详细细节可以参看<code>PKCS#5</code>标准，即<code>RFC6070</code>标准 ），它利用 <code>HMAC</code> 作为伪随机函数。你也可以用自己的算法来完成对密码的哈希加密，只要支持 salt 和迭代。例如，如果你用 SHA-256 你可能需要一个长度至少为16个字节的 <code>salt</code> 和至少 100,000 次迭代。</p><p>简单解释一下，<code>salt</code> 是一个随机数据，用来和密码加到一起进行哈希加密，从而使得更难从哈希值“解哈希”得到密码。基本上可以保护你的密码不受字典攻击和预计算彩虹表攻击（译者注:彩虹表是通过实现计算一系列字符集的hash值的数据，然后通过hash后的数据，反查原文的攻击方式）。</p><p>让我们来看一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import binascii</span><br><span class="line">&gt;&gt;&gt; dk &#x3D; hashlib.pbkdf2_hmac(hash_name&#x3D;&#39;sha256&#39;,</span><br><span class="line">        password&#x3D;b&#39;bad_password34&#39;,</span><br><span class="line">        salt&#x3D;b&#39;bad_salt&#39;,</span><br><span class="line">        iterations&#x3D;100000)</span><br><span class="line">&gt;&gt;&gt; binascii.hexlify(dk)</span><br><span class="line">b&#39;6e97bad21f6200f9087036a71e7ca9fa01a59e1d697f7e0284cd7f9b897d7c02&#39;</span><br></pre></td></tr></table></figure><p>这里我们使用一个简单的 salt 数据，但经过 100,000 次迭代来对密码创建一个 SHA256 哈希对象。。当然，实际上并不推荐 SHA 作为密码的密钥派生算法，而是应该使用 scrypt 之类的方法。另外一个很好的选择是使用第三方包：bcrypt，它的设计初衷就是为了专门应对密码哈希加密的。</p><h1 id="PyCryptodome"><a href="#PyCryptodome" class="headerlink" title="PyCryptodome"></a><code>PyCryptodome</code></h1><p><code>PyCryto</code> 可能是 <code>Python</code> 最著名的第三方加密包。可惜的是 <code>PyCryto</code> 的开发在 2012 年就停止了。但其他人在不停地发布新版本的 <code>PyCryto</code> 让你可以在<code>Python 3.5</code> 中使用，如果你不介意使用第三方库作为加密方法的话。例如，我发现了 Github 上一个 Python 3.5 版本的二进制安装包<a href="https://github.com/sfbahr/PyCrypto-Wheels" target="_blank" rel="noopener">（github.com/sfbahr/PyCr…）</a>。</p><p>幸运的是有一个名为 <code>PyCrytodome</code> 的 fork 项目可以替代 <code>PyCrypto</code>。在 Linux 上可以用 pip 命令安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><p>Windows 系统上有点不同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodomex</span><br></pre></td></tr></table></figure><p>如果安装过程中遇到问题，可能是因为你没有安装正确的依赖包或者你需要 Windows 系统下面的编译器，可以查看<a href="http://pycryptodome.readthedocs.io/en/latest/" target="_blank" rel="noopener"><code>PyCryptodome</code> 网站</a> 寻找更多安装的帮助或联系支持。</p><p>另外值得一提的是 <code>PyCryptodome</code> 有许多针对最后一版 <code>PyCryto</code> 的增强版本，值得你花时间去访问它的首页查看一下有哪些新的特性。</p><h1 id="加密字符串"><a href="#加密字符串" class="headerlink" title="加密字符串"></a>加密字符串</h1><p>看完他们的首页之后，我们可以继续看几个例子。首先我们用 DES 来加密一个字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from Crypto.Cipher import DES</span><br><span class="line">&gt;&gt;&gt; key &#x3D; &#39;abcdefgh&#39;</span><br><span class="line">&gt;&gt;&gt; def pad(text):</span><br><span class="line">        while len(text) % 8 !&#x3D; 0:</span><br><span class="line">            text +&#x3D; &#39; &#39;</span><br><span class="line">        return text</span><br><span class="line">&gt;&gt;&gt; des &#x3D; DES.new(key, DES.MODE_ECB)</span><br><span class="line">&gt;&gt;&gt; text &#x3D; &#39;Python rocks!&#39;</span><br><span class="line">&gt;&gt;&gt; padded_text &#x3D; pad(text)</span><br><span class="line">&gt;&gt;&gt; encrypted_text &#x3D; des.encrypt(text)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&quot;, line 1, in </span><br><span class="line">    encrypted_text &#x3D; des.encrypt(text)</span><br><span class="line">  File &quot;C:\Programs\Python\Python35-32\lib\site-packages\Crypto\Cipher\blockalgo.py&quot;, line 244, in encrypt</span><br><span class="line">    return self._cipher.encrypt(plaintext)</span><br><span class="line">ValueError: Input strings must be a multiple of 8 in length</span><br><span class="line">&gt;&gt;&gt; encrypted_text &#x3D; des.encrypt(padded_text)</span><br><span class="line">&gt;&gt;&gt; encrypted_text</span><br><span class="line">b&#39;&gt;\xfc\x1f\x16x\x87\xb2\x93\x0e\xfcH\x02\xd59VQ&#39;</span><br></pre></td></tr></table></figure><p>这段代码看起来可能有点绕，我们花点时间了将它分解一下。首先，需要注意 <code>DES</code> 加密所需要的密钥长度应为8字节，因此我们设定变量 key 为这一长度的字符串。被加密的字符串长度必须是 8 的倍数，因此我们创建一个 <code>pad</code> 方法来将字符串用空格填充直至长度为8的倍数。接下来我们创建一个 <code>DES</code> 实例和一个填充过的字符串。我们试一下对原始字符串进行加密结果会导致 <code>ValueError</code> ，我们已经知道将填充过的字符串传递给加密算法，正如你所见，我们可以对字符串进行加密了！</p><p>当然这个例子还没结束，我们需要知道如何解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; des.decrypt(encrypted_text)</span><br><span class="line">b&#39;Python rocks!   &#39;</span><br></pre></td></tr></table></figure><p>幸运的是，解密方法非常简单，我们只需要调用 des 对象的 decrypt 方法就可以得到原始的字节串。我们接下来的任务是学习如何利用 PyCrypto 的 RSA 算法对文件进行加密和解密，首先我们需要生成 RSA 密钥！</p><h1 id="生成一个-RSA-密钥"><a href="#生成一个-RSA-密钥" class="headerlink" title="生成一个 RSA 密钥"></a>生成一个 RSA 密钥</h1><p>如果你想要通过 RSA 算法加密你的数据，那么你将需要一对 RSA 公/私钥组合或者自己生成一对。在这个例子中，我们将会自己生成一对。由于非常简单，我们直接在 Python 解释器中完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>code = <span class="string">'nooneknows'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encrypted_key = key.exportKey(passphrase=code, pkcs=<span class="number">8</span>,</span><br><span class="line">        protection=<span class="string">"scryptAndAES128-CBC"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/path_to_private_key/my_private_rsa_key.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(encrypted_key)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/path_to_public_key/my_rsa_public.pem'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(key.publickey().exportKey())</span><br></pre></td></tr></table></figure><p>首先我们引入 从 <code>Crypto.PublicKey</code> 引入 <code>RSA</code> ，然后创建一个密码。接下来我们生成一个 2048 位的 <code>RSA</code>对象的实例。为了生成私钥，我们需要调用<code>RSA</code>实例的 <code>exportKey</code> 方法并传递给它刚刚创建的密码，<code>PKCS</code> 标准算法将会用它保护我们的私钥。接下来我们将生成的私钥写入文件。</p><p>下一步我们通过 RSA 实例的 <code>publickey</code> 方法生成公钥，我们在这段代码中用了简写的方式将 <code>publickey</code> 和 <code>exportKey</code> 方法串接起来，最后也将结果写入文件。</p><p>对文件进行加密<br>现在我们有了一对私钥和公钥，我们可以对我们的数据进行加密并写入文件。下面是一个非常标准的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/encrypted_data.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> out_file:</span><br><span class="line">    recipient_key = RSA.import_key(</span><br><span class="line">        open(<span class="string">'/path_to_public_key/my_rsa_public.pem'</span>).read())</span><br><span class="line">    session_key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    cipher_rsa = PKCS1_OAEP.new(recipient_key)</span><br><span class="line">    out_file.write(cipher_rsa.encrypt(session_key))</span><br><span class="line"></span><br><span class="line">    cipher_aes = AES.new(session_key, AES.MODE_EAX)</span><br><span class="line">    data = <span class="string">b'blah blah blah Python blah blah'</span></span><br><span class="line">    ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class="line"></span><br><span class="line">    out_file.write(cipher_aes.nonce)</span><br><span class="line">    out_file.write(tag)</span><br><span class="line">    out_file.write(ciphertext)</span><br></pre></td></tr></table></figure><p>前三行完成对 PyCryptodome 的引入，接下来打开将要写入的文件。然后我们将公钥读入变量并创建一个16字节长的 session key。在这个例子中我们用了混合加密方法，因此我们使用最优非对称加密填充的 PKCS#1 OAEP。这让我们可以将任意长度的数据写入文件。接下来我们创建 AES 密文，创建一些数据并进行加密，这一方法会返回加密后的文本和 MAC 值。最终我们将 nonce，MAC(或tag)以及加密后的文本写入文件。</p><p>说明一下，nonce 是一个任意数字，仅用于密文通信。它们通常是随机或伪随机数。对于 AES 来说，它的长度至少要是16位。你可以用你的文本编辑器打开加密后的文件看一下，只能看到一堆乱码。</p><p>现在让我们学一下如何解密数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"></span><br><span class="line">code = <span class="string">'nooneknows'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/encrypted_data.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">    private_key = RSA.import_key(</span><br><span class="line">        open(<span class="string">'/path_to_private_key/my_rsa_key.pem'</span>).read(),</span><br><span class="line">        passphrase=code)</span><br><span class="line"></span><br><span class="line">    enc_session_key, nonce, tag, ciphertext = [ fobj.read(x)</span><br><span class="line">                                                <span class="keyword">for</span> x <span class="keyword">in</span> (private_key.size_in_bytes(),</span><br><span class="line">                                                <span class="number">16</span>, <span class="number">16</span>, <span class="number">-1</span>) ]</span><br><span class="line"></span><br><span class="line">    cipher_rsa = PKCS1_OAEP.new(private_key)</span><br><span class="line">    session_key = cipher_rsa.decrypt(enc_session_key)</span><br><span class="line"></span><br><span class="line">    cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</span><br><span class="line">    data = cipher_aes.decrypt_and_verify(ciphertext, tag)</span><br><span class="line"></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p>如果前面的例子你都跟上了，那这段代码应该很容易读懂了。在这个例子中，我们以二进制模式打开加密文件，然后导入私钥。要注意在导入私钥的时候，必须给出你的密码，否则将会出错。接下来我们读取加密文件，需要注意的是先读取私钥，然后是16位长的 nonce，接下来是另外 16 位长的标签，最后剩下的才是我们的数据。</p><p>接下来我们需要解密 session key，重新生成 AES key 并解密数据。</p><p>你可以用 PyCryptodome 来做更多的事，但是在这里我们需要继续看看 Python 中解决加密问题还有别的什么方法可用。</p><h1 id="cryptography-包"><a href="#cryptography-包" class="headerlink" title="cryptography 包"></a><code>cryptography</code> 包</h1><p>cryptography 包的目的是”给人类使用的加密工具”，就像requests是“给人类使用的HTTP”工具包一样。其理念是让你可以用简单的方法创建安全、易用的加密方案。如果你需要，你也可以深入到底层加密原理，这就要求你必须知道你在做什么，而且很有可能最终得到一些并不那么安全的结果。</p><p>如果你正在用 Python 3.5，你可以像这样使用 pip 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cryptography</span><br></pre></td></tr></table></figure><p>你会发现 cryptography 自己安装了几个依赖包。假设这些都成功安装完成，我们可以试着来加密一些文本。让我们用一下 Fernet 对称加密算法。Fernet 算法保证你加密的任何消息除非有你自己定义的密钥都无法修改或读取。Fernet 同时也支持通过 MultiFernet 方法对密钥进行旋转。让我们来看一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cipher_key = Fernet.generate_key()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cipher_key</span><br><span class="line"><span class="string">b'APM1JDVgT8WDGOWBgQv6EIhvxl4vDYvUnVdg-Vjdt0o='</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cipher = Fernet(cipher_key)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">b'My super secret message'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encrypted_text = cipher.encrypt(text)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encrypted_text</span><br><span class="line">(<span class="string">b'gAAAAABXOnV86aeUGADA6mTe9xEL92y_m0_TlC9vcqaF6NzHqRKkjEqh4d21PInEP3C9HuiUkS9f'</span></span><br><span class="line"> <span class="string">b'6bdHsSlRiCNWbSkPuRd_62zfEv3eaZjJvLAm3omnya8='</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decrypted_text = cipher.decrypt(encrypted_text)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decrypted_text</span><br><span class="line"><span class="string">b'My super secret message'</span></span><br></pre></td></tr></table></figure><p>首先我们需要引入 <code>Fernet</code>，然后生成一个密钥。这里将密钥打印出来看看它是什么。如你所见，它是一个随机的字节串。你也可以多运行几次 <code>generate_key</code> 方法，每次的结果应该都不相同。接下来我们基于这一密钥创建 <code>Fernet</code> 密文实例。</p><p>有了密文之后我们可以用来加密和解密我们的消息，可以用<code>encrypt</code>方法实现对必要消息的加密。接下来我讲加密后的结果打印出来可以看出来已经无法正常阅读了。调用 <code>decrypt</code> 方法可以对消息进行解密，结果可以得到最初的原始消息。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本章只简单介绍了 <code>PyCryptodome</code> 和 <code>cryptography</code> 包最基本的用法，可以让你对如何通过 <code>Python</code> 对字符和文件进行加密、解密有整体的了解。请一定要阅读文档并亲自实验尝试！</p><blockquote><p>注：本文转载自 《掘金翻译计划》。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日转载一篇 </tag>
            
            <tag> 加密技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 删除误加工作区的文件</title>
      <link href="/git/56905.html"/>
      <url>/git/56905.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在平时工作中，我经常会遇到这样的一个问题：一不小心把编译好的二进制文件上传了，或者把本地的配置文件上传到了git服务器。这种时候设置<code>.gitignore</code> 已经无法撤销了，这时候就需要进行删除操作。<br>删除有分两种情况：1. 删除本地和远程；2. 仅删除远程</p><h1 id="删除本地和远程"><a href="#删除本地和远程" class="headerlink" title="删除本地和远程"></a>删除本地和远程</h1><h2 id="删除并提交修改"><a href="#删除并提交修改" class="headerlink" title="删除并提交修改"></a>删除并提交修改</h2><p>这种就是利用git的工作原理，在本地删除文件后，让git生成一个删除文件的更改记录，然后将这个更改记录提交给服务器。<br>操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm [filename] <span class="comment"># 或 git rm [filename]</span></span><br><span class="line">$ git add . <span class="comment"># 缓存此次修改</span></span><br><span class="line">$ git commit -m <span class="string">'删除文件[filename]'</span> <span class="comment"># 提交</span></span><br></pre></td></tr></table></figure><blockquote><p>这个方法有个问题，就是如果跟你协作的人也有这个文件，很容易把别人的一起删除了。这个时候更适合删除缓存了。</p></blockquote><h1 id="删除远程并本地保留"><a href="#删除远程并本地保留" class="headerlink" title="删除远程并本地保留"></a>删除远程并本地保留</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -r --cached [filename] <span class="comment"># 删除远程缓存</span></span><br></pre></td></tr></table></figure><p>这时候如果文件已提交，会生成两条记录，一条是【暂存的更改】，一条是【更改】。只需要<code>$ git add .</code>然后就会合并，该文件就会取消跟踪。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 日常工作系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题系列-03 无重复字符的最长子串</title>
      <link href="/leetcode/14339.html"/>
      <url>/leetcode/14339.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><blockquote><p><strong>输入</strong>: “abcabcbb”<br><strong>输出</strong>: 3<br><strong>解释</strong>: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><p>示例 2:</p><blockquote><p><strong>输入</strong>: “bbbbb”<br><strong>输出</strong>: 1<br><strong>解释</strong>: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><p>示例 3:</p><blockquote><p><strong>输入</strong>: “pwwkew”<br><strong>输出</strong>: 3<br><strong>解释</strong>: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p></blockquote><p>来源：力扣（LeetCode）</p><footer><strong>力扣</strong><cite><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">无重复字符的最长子串</a></cite></footer></blockquote><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        s_len = len(s)</span><br><span class="line">        <span class="keyword">if</span> s_len &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> s_len</span><br><span class="line"></span><br><span class="line">        sub_len = <span class="number">1</span></span><br><span class="line">        sub_start = <span class="number">0</span></span><br><span class="line">        sub_end = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> sub_end &lt; s_len:</span><br><span class="line">            sub_end = sub_end + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> sub_end == s_len:</span><br><span class="line">                sub_len = max(sub_len, sub_end - sub_start)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            f_index = s.find(s[sub_end], sub_start, sub_end)</span><br><span class="line">            <span class="keyword">if</span> f_index == <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            sub_len = max(sub_len, sub_end - sub_start)</span><br><span class="line">            sub_start = f_index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> sub_len</span><br></pre></td></tr></table></figure><blockquote><p>下一篇打算试试 《04 寻找两个有序数组的中位数》 <a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">预习题目</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LeetCode 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题系列-02 两数相加</title>
      <link href="/leetcode/26858.html"/>
      <url>/leetcode/26858.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p></blockquote><footer><strong>力扣</strong><cite><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">两数相加</a></cite></footer></blockquote><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">createNone</span><span class="params">(ll, lr, di)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> ll <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> lr <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> di == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            node = ListNode(di)</span><br><span class="line">            <span class="keyword">if</span> ll <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                node.val = node.val + ll.val</span><br><span class="line">                ll = ll.next</span><br><span class="line">            <span class="keyword">if</span> lr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                node.val = node.val + lr.val</span><br><span class="line">                lr = lr.next</span><br><span class="line">            node.next = createNone(ll, lr, int(node.val / <span class="number">10</span>))</span><br><span class="line">            node.val = node.val % <span class="number">10</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> createNone(l1, l2, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题系列-01 两数之和</title>
      <link href="/leetcode/31441.html"/>
      <url>/leetcode/31441.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>示例：</p><blockquote><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p></blockquote><footer><strong>力扣</strong><cite><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">两数之和</a></cite></footer></blockquote><h1 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        results = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                t = nums[i + <span class="number">1</span>:].index(target - v)</span><br><span class="line">                <span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                results = [i, t + x + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sol = Solution()</span><br><span class="line">    print(sol.twoSum([<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], <span class="number">9</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 2 字符串</title>
      <link href="/basecharp/%E5%AD%97%E7%AC%A6%E4%B8%B2/e6999e60.html"/>
      <url>/basecharp/%E5%AD%97%E7%AC%A6%E4%B8%B2/e6999e60.html</url>
      
        <content type="html"><![CDATA[<h1 id="String的常见方法"><a href="#String的常见方法" class="headerlink" title="String的常见方法"></a>String的常见方法</h1><h2 id="String-变量的声明方式"><a href="#String-变量的声明方式" class="headerlink" title="String 变量的声明方式"></a>String 变量的声明方式</h2><p>C#中字符串常见的声明有两种：</p><ol><li>直接使用字面值 即<code>String s = &quot;12321&quot;;</code></li><li>使用构造器，即<code>String s = new String(&quot;12321&quot;);</code></li></ol><h2 id="string-的特点"><a href="#string-的特点" class="headerlink" title="string 的特点"></a>string 的特点</h2><p><code>String</code>（字符串）在大多数开发语言中属于不可变量，任何针对String的修改都会生成一个新的字符串。为什么会如此呢，究其原因是String在内存中以类似数组的形式存储字符数据。同时，<code>String</code> 还有一个非常有意思的特点： 字符串在一次声明后，程序会记忆当前已声明的字符串，以备下次使用时不用重新划分内存。<br>关于这一点有个很有意思（智障）的面试题：</p><blockquote><p>以下三种方式一共生成了几个内存空间：</p></blockquote><ol><li>string s1 = “sa1234”;</li><li>string s2 = “sa”+”1234”;</li><li>string s3 = new string(s1);</li></ol><p>很多人包括一些老开发都会认为是4个，那么实际上呢，s2和s1同时指向了一个地址也就是两个。<br>嗯？是不是有点不可思议？</p><p>这个是因为在C#中，字面值有一个特点，如果声明过程中一个变量的声明使用的都是字面值（即非变量）或者是常量，那么该变量的声明过程会优先计算值，然后将该变量指向一个常量。<br>也就是说 在<code>string s2 = &quot;sa&quot;+&quot;1234&quot;;</code>这个表达式中，会先将”sa”和”1234”合并成一个字符串，再赋值给s2。并不会先划分一个”sa”的内存区域，再划分一个”1234”的内存区域，最后再合并成”sa1234“。所以1和2都是直接指向”sa1234”。</p><a id="more"></a><h2 id="string的构造函数"><a href="#string的构造函数" class="headerlink" title="string的构造函数"></a>string的构造函数</h2><p><code>string</code>的构造函数一共有以下几种：</p><ol><li><code>public String(char c, int count);</code></li><li><code>public String(char[] value)；</code></li><li><code>public String(char[] value, int startIndex, int length)；</code></li><li>其他</li></ol><p>第一个： 生成数量为count的由c组成的字符串，不包括其他字符。<br>例：<code>string  s = new String(&#39;a&#39;,10);//s=&quot;aaaaaaaaaa&quot;</code><br>第二个： 将字符数组value转换为字符串，字符串等于字符数组依次连接生成的字符串<br>例：<code>string s = new String(new char[]{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;});//s = &quot;abcde&quot;</code><br>第三个： 将字符数组value中部分元素拼接为字符串<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var chars &#x3D; new char[] &#123;&#39;A&#39;, &#39;V&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;&#125;;</span><br><span class="line">var sr &#x3D; new string(chars, 0, 5);&#x2F;&#x2F;sr &#x3D; &quot;AVabc&quot;</span><br></pre></td></tr></table></figure><p>第四个：这里面包括了一些不安全代码，即用到了指针。有机会会对这部分进行介绍。</p><p>但是，到这里我们发现一个问题，<code>new string(string str)</code>在哪，前面不是使用了一个 <code>new string(&quot;12321&quot;)</code>吗？<br>事实是，并没有这个构造函数。那么，当我们使用<code>new string(&quot;12321&quot;)</code>时，实际上是哪个呢？显然可以看到它走的是 <strong>第二种</strong> ，系统将字符串当做字符数组传递给了<code>string</code>的构造函数。这也为我们揭露了string在内存中的存储方式-字符数组。由此可见字符串的不可变性其实跟数组类似。</p><h2 id="空字符串"><a href="#空字符串" class="headerlink" title="空字符串"></a>空字符串</h2><p>在string类里有一个很有意思的静态属性：<code>string.Empty</code> 。它是一个常量，表示空字符串。空字符串，顾名思义：一个空的字符串，不含任何字符，但是不是NULL。</p><h3 id="空字符串与NULL的区别"><a href="#空字符串与NULL的区别" class="headerlink" title="空字符串与NULL的区别"></a>空字符串与NULL的区别</h3><ul><li>空字符串是一个长度为0的字符串；NULL没有长度，如果强行获取.Length将抛出异常</li><li>空字符串可以调用字符串所有的方法；NULL无法调用字符串对象的任何方法</li><li>空字符串指向的是内存中的某一个地址，NULL则没有任何指向</li></ul><h3 id="判断字符串是否为空："><a href="#判断字符串是否为空：" class="headerlink" title="判断字符串是否为空："></a>判断字符串是否为空：</h3><ol><li>字符串是否是空字符串：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str = <span class="keyword">string</span>.Empty;</span><br><span class="line"><span class="keyword">bool</span> result = str == <span class="string">""</span> || str == <span class="keyword">string</span>.Empty || str.Length == <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串是否是空引用：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">bool</span> result = str == <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>除了这些繁琐的方法，c# 内部为我们增加了一个默认支持方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.IsNullOrEmpty(value)</span><br></pre></td></tr></table></figure><p>该方法验证字符串是否是NULL或者一个空串并返回验证结果<br>当然，在我们平时开发过程中不只是需要不是一个空串或NULL，还得是一个非空白字符的串。这时候就需要用到这个方法了:<code>string.IsNullOrWhiteSpace(value)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 基础知识系列- 1 数据类型</title>
      <link href="/basecharp/381553b5.html"/>
      <url>/basecharp/381553b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="常见数据类型"><a href="#常见数据类型" class="headerlink" title="常见数据类型"></a>常见数据类型</h1><p>C#的类型一般分为<strong>值类型</strong>、<strong>引用类型</strong>两大类型。<br>值类型的实例存放在栈中，引用类型会在栈中放置一个指针指向堆中的某一块内容。<br>C#为我们内置了几个数据类型供我们使用：</p><a id="more"></a><table><thead><tr><th align="center">关键词简写</th><th align="left">对应的类全称(点击可以查看对应的API)</th><th align="left">值范围</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">bool</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.Boolean" target="_blank" rel="noopener"><code>System.Boolean</code></a></td><td align="left">true、false</td><td align="left"><code>该类型只有两个值，用作判断，表示“是”、“否”</code></td></tr><tr><td align="center">sbyte</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.SByte" target="_blank" rel="noopener"><code>System.SByte</code></a></td><td align="left">-128 ~ 127 (-2<sup>7</sup>~2<sup>7</sup>-1)</td><td align="left"><code>该类型在内存中使用8个bit进行存储，而且带有符号。</code><br/><code>根据最高位作符号位，所以sbyte实际表示范围为 -128~127</code></td></tr><tr><td align="center">byte</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.byte" target="_blank" rel="noopener"><code>System.Byte</code></a></td><td align="left">0~2<sup>8</sup>-1</td><td align="left"><code>8位的无符号bit</code></td></tr><tr><td align="center">short</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.Int16" target="_blank" rel="noopener"><code>System.Int16</code></a></td><td align="left">-2<sup>15</sup>~2<sup>15</sup>-1</td><td align="left"><code>short表示一个16位的短整形，其具体的值为-32768～32767</code></td></tr><tr><td align="center">ushort</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.UInt16" target="_blank" rel="noopener"><code>System.UInt16</code></a></td><td align="left">0～2<sup>16</sup>-1</td><td align="left"><code>ushort表示无符号16位的短整型，具体的范围为0～65535</code></td></tr><tr><td align="center">int</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.Int32" target="_blank" rel="noopener"><code>System.Int32</code></a></td><td align="left">-2<sup>15</sup>~2<sup>15</sup>-1</td><td align="left"><code>int是我们常用的一个数据类型，它的数据范围为： -2,147,483,648～ 2,147,483,647 。</code><br/><code>可以看到，是-2亿到2亿，基本满足了数据需要。</code></td></tr><tr><td align="center">uint</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.UInt32" target="_blank" rel="noopener"><code>System.UInt32</code></a></td><td align="left">0~2<sup>32</sup>-1</td><td align="left"><code>uint 无符号整形，最大值比 int大一倍左右，但是没有负数。</code><br/><code>如果在计算中能保证没有负值，可以使用。</code><br/><code>并不推荐，因为在做减法的时候，更、容易溢出</code></td></tr><tr><td align="center">long</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.Int64" target="_blank" rel="noopener"><code>System.Int64</code></a></td><td align="left">-2<sup>16</sup>~2<sup>16</sup>-1</td><td align="left"><code>实际取值为-9,223,372,036,854,775,808~ 9,223,372,036,854,775,807 。</code><br/><code>long在内存中比int占用更多字节，长度为int的两倍。</code><br/><code>所以能表达更多的数剧。在数据库中，经常被用来做大数据表的主键。</code></td></tr><tr><td align="center">ulong</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.UInt64" target="_blank" rel="noopener"><code>System.UInt64</code></a></td><td align="left">0~2<sup>64</sup>-1</td><td align="left"><code>64位无符号长整形，理同其他的无符号整形，在正整数中比long表达更多的数据。</code></td></tr><tr><td align="center">char</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.char" target="_blank" rel="noopener"><code>System.Char</code></a></td><td align="left">utf-16</td><td align="left"><code>在.net 中char 表示 utf-16的编码单位，所以绝大多数的字符都可以用char表示，包括中文汉字。</code></td></tr><tr><td align="center">float</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.single" target="_blank" rel="noopener"><code>System.Single</code></a></td><td align="left">-3.402823e38～3.402823e38</td><td align="left"><code>32位的单精度浮点型，也就是通常说的带小数点的数</code></td></tr><tr><td align="center">double</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.double" target="_blank" rel="noopener"><code>System.Double</code></a></td><td align="left"></td><td align="left"><code>64位双精度浮点型，比float能表示更多的小数位。</code><br/><code>实际取值-1.79769313486232e308～1.79769313486232e308</code></td></tr><tr><td align="center">decimal</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.decimal" target="_blank" rel="noopener"><code>System.Decimal</code></a></td><td align="left"></td><td align="left"><code>128位高精度浮点值。</code><br/><code>常用于不能四舍五入，或者对小数点后数字要求很敏感的地方。</code><br/><code>在128位中，一位是符号位（表示正负），96位是值本身（N）,8位是比例因子（k)。</code><br/><code>所以decimal实际值应该是</code> ±Nx10<sup>k</sup><code>,其中-28≤k≤0.其余位暂时没有使用</code></td></tr><tr><td align="center">string</td><td align="left"><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.string" target="_blank" rel="noopener"><code>System.String</code></a></td><td align="left">–</td><td align="left"><code>字符串变量，表示一组字符数组。字符串是不可变量。即字符串不能修改，任何针对字符串的修改都会生成一个新的字符串。</code></td></tr></tbody></table><p>另外的两个特殊类型：<code>dynamic</code> <code>object</code>。<br>其中 dynamic 表示动态类型，这是C#在4.0开始支持的，<code>dynamic</code>关键字声明该变量名是个动态变量。具体使用参照 Python,Js 之类的动态语言。但是<code>dynamic</code>声明的变量不支持添加属性，但这并不完全绝对，可以参照后续的动态篇会对这部分内容进行介绍。</p><p><code>object</code> 所有类型的父类，C#所有类都是 object的子类。不过上表中介绍的直接父类是 ValueType（表示值类型），但是ValueType的父类仍然是object。</p><blockquote><p>说明：<br>对于 double 和 float 因为存储数据方式的问题，都存在一个问题：对于 0 或者近0的值不能很好的表达。因为浮点型变量在内存中表示为 1/2<sup>n</sup>，所以都会存在一个+0和-0两个值。当 一个浮点型判断是不是等于0时，可以正常判断。但是一旦涉及到数学运算的结果与0进行比较的话就会出现问题，比如说 <code>0.1+0.2 != 0.3</code> 这个判断式是 <code>true</code>。所以标准的判断方式应该是 <code>Math.Abs(0.1+0.2 - 0.3)&lt; ?</code> 这种方式，其中?表示系统接受的误差范围。<br>而decimal在这方面的准确度就比 double和float高很多。至少不会出现 0.1 + 0.2 != 0.3 这种问题。所以decimal一般用在金额计算这些地方。</p></blockquote><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>类型转换是指一个类型的数值通过某种手段转换成另一种类型。<br>类型转换分为两种方式：<strong>默认类型转换</strong>、<strong>强制类型转换</strong>。</p><h2 id="默认类型转换"><a href="#默认类型转换" class="headerlink" title="默认类型转换"></a>默认类型转换</h2><p>在以下几种情况会触发默认类型转换：</p><ul><li>当一个子类想转换成它的父类时，</li><li>当短精度向高精度转换时。<br>如： byte -&gt; int -&gt; long -&gt; float -&gt; double<br>参照：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> d = i;</span><br><span class="line"><span class="keyword">float</span> f = i;</span><br><span class="line">d = f;</span><br><span class="line"><span class="keyword">uint</span> ui = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> l = ui;</span><br><span class="line">d = l;</span><br><span class="line">f = l;</span><br></pre></td></tr></table></figure><p>这里有几个需要特别注意的地方：</p><ul><li>无符号和有符号之间的转换，如果无符号的位数与有符号之间的位数一致的话不能默认转换。</li><li>decimal 所有的整型均可以默认转为 <code>decimal</code>，即 除 <code>double</code>、<code>float</code>以外所有数字类型的均可以。</li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><h3 id="数据类型判断-is-："><a href="#数据类型判断-is-：" class="headerlink" title="数据类型判断 is ："></a>数据类型判断 <code>is</code> ：</h3><p>C# 内置了一个关键字 用来 判断 某个变量是否是某个类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">        A a = b;</span><br><span class="line">        <span class="comment">// 这时候 a 是一个 假装自己是A的B的引用</span></span><br><span class="line">        Console.WriteLine(<span class="string">"a is B ? &#123;0&#125;"</span>, a <span class="keyword">is</span> B); <span class="comment">// 结果： true</span></span><br><span class="line">        Console.WriteLine(<span class="string">"a is A ? &#123;0&#125;"</span>, a <span class="keyword">is</span> A); <span class="comment">// true</span></span><br><span class="line">        Console.WriteLine(<span class="string">"a is C ? &#123;0&#125;"</span>, a <span class="keyword">is</span> C); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>is</code>有什么用呢？在强制类型转换之前检测一下是否可以转换为目标类型，如果返回值为 false 依旧要转换的话，那么就会报错。</p><h3 id="强制类型转换-1"><a href="#强制类型转换-1" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>强制类型转换分为两种：</p><ol><li>在变量前加目标类型强制转换，这个方法与C/C++、Java的方式一致，具体为： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C c1 &#x3D; (C)a;&#x2F;&#x2F; 代码接上</span><br></pre></td></tr></table></figure></li><li>使用<code>as</code>关键字，<code>as</code> 表示将变量 x 当做类型Y<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C c2 &#x3D; a as C;&#x2F;&#x2F; 代码接上</span><br></pre></td></tr></table></figure></li></ol><p>两种方式的区别：</p><ol><li><p>当转型失败时会抛出错误，直接终止代码</p></li><li><p>当转型失败时将c2置为null。当前步骤不会抛出异常，如果对于空引用没有进行处理，那么会在<strong><em>后续</em></strong>中抛出空引用的异常。</p></li></ol><h3 id="值类型的类型转换"><a href="#值类型的类型转换" class="headerlink" title="值类型的类型转换"></a>值类型的类型转换</h3><p>在之前的内容中我们提到了小精度到大精度可以默认转换。但是我们在平常使用的过程中会遇到各种情况下的转换，那么这个时候我们就要用到强制转换了，这个时候精度丢失对于我们来说就是可以接受的。<br>常见的转换方式有：</p><ol><li>使用类型强制声明转换 例：<code>long lval = 100; int i = (int)lval;</code></li><li>使用 System.Convert类。使用 <code>Convert.ToXXX()</code>，其中<code>XXX</code>表示转型目标对象。</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Convert 示例代码</span></span><br><span class="line"><span class="keyword">long</span> lval = <span class="number">19293</span>;</span><br><span class="line"><span class="keyword">var</span> i = Convert.ToInt32(lval);</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">10.091</span>;</span><br><span class="line"><span class="keyword">var</span> dc = Convert.ToDecimal(d);</span><br><span class="line"><span class="keyword">var</span> dt = Convert.ToDateTime(<span class="string">"2019-03-30"</span>);</span><br></pre></td></tr></table></figure><p>值得注意的是：<code>Convert</code>的ToXXX其中XXX使用的是C#类型名称，而不是关键字。<code>Convert</code>是个很有用的类，在我们开发工作中会大量的使用这个类进行值的类型转换。<br>当然后续我们会对其进行更深入的介绍。</p>]]></content>
      
      
      <categories>
          
          <category> C#基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#基础知识 </tag>
            
            <tag> C# 基础数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IT  技能图谱</title>
      <link href="/others/45148.html"/>
      <url>/others/45148.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-架构师"><a href="#1-架构师" class="headerlink" title="1 架构师"></a>1 架构师</h1><h1 id="1-1-架构师图谱"><a href="#1-1-架构师图谱" class="headerlink" title="1.1 架构师图谱"></a>1.1 架构师图谱</h1><p><img src="https://blogs.attachie.club/images/5a459e81ab64411cab0008bd.png" alt="架构师图谱"></p><h1 id="1-2-微服务架构秘籍"><a href="#1-2-微服务架构秘籍" class="headerlink" title="1.2 微服务架构秘籍"></a>1.2 微服务架构秘籍</h1><p><img src="https://blogs.attachie.club/images/5a459ea2ab64411cab0008c1.png" alt="1.3 微服务架构秘籍.jpg"></p><a id="more"></a><h1 id="1-3-一致性图谱"><a href="#1-3-一致性图谱" class="headerlink" title="1.3 一致性图谱"></a>1.3 一致性图谱</h1><p><img src="https://blogs.attachie.club/images/5a459ec3ab64411e9500089f.png" alt="1.4 一致性图谱"></p><h1 id="1-4-互联网大流量的方法"><a href="#1-4-互联网大流量的方法" class="headerlink" title="1.4 互联网大流量的方法"></a>1.4 互联网大流量的方法</h1><p><img src="https://blogs.attachie.club/images/5a459f32ab64411cab0008d6.png" alt="1.5 互联网大流量的方法"></p><h1 id="1-5-安全秘籍"><a href="#1-5-安全秘籍" class="headerlink" title="1.5 安全秘籍"></a>1.5 安全秘籍</h1><p><img src="https://blogs.attachie.club/images/5a459fa1ab64411cab0008f1.png" alt="1.6 安全秘籍"></p><h1 id="1-6-阿里巴巴常用小框架"><a href="#1-6-阿里巴巴常用小框架" class="headerlink" title="1.6 阿里巴巴常用小框架"></a>1.6 阿里巴巴常用小框架</h1><p><img src="https://blogs.attachie.club/images/5a459fa1ab64411cab0008f0.png" alt="1.7 阿里巴巴常用小框架"></p><h1 id="1-7-架构方法论图谱"><a href="#1-7-架构方法论图谱" class="headerlink" title="1.7 架构方法论图谱"></a>1.7 架构方法论图谱</h1><p><img src="https://blogs.attachie.club/images/5a459fcfab64411e950008c6.png" alt="1.8 架构方法论图谱"></p><h1 id="1-8-设计模式秘籍图谱"><a href="#1-8-设计模式秘籍图谱" class="headerlink" title="1.8 设计模式秘籍图谱"></a>1.8 设计模式秘籍图谱</h1><p><img src="https://blogs.attachie.club/images/5a459ff1ab64411cab000903.png" alt="1.9 设计模式秘籍图谱"></p><h1 id="1-9-架构师技能图谱1-0"><a href="#1-9-架构师技能图谱1-0" class="headerlink" title="1.9 架构师技能图谱1.0"></a>1.9 架构师技能图谱1.0</h1><p><img src="https://blogs.attachie.club/images/5a45a007ab64411e950008d3.png" alt="1.10 架构师技能图谱1.0"></p><h1 id="2-语言类"><a href="#2-语言类" class="headerlink" title="2 语言类"></a>2 语言类</h1><h2 id="2-1-Java"><a href="#2-1-Java" class="headerlink" title="2.1 Java"></a>2.1 Java</h2><h3 id="2-0-Java架构师图谱"><a href="#2-0-Java架构师图谱" class="headerlink" title="2.0 Java架构师图谱"></a>2.0 Java架构师图谱</h3><p><img src="https://blogs.attachie.club/images/5a459e81ab64411cab0008bc.png" alt="Java架构师图谱"></p><h2 id="2-1-1-JVM垃圾回图谱"><a href="#2-1-1-JVM垃圾回图谱" class="headerlink" title="2.1.1 JVM垃圾回图谱"></a>2.1.1 JVM垃圾回图谱</h2><p><img src="https://blogs.attachie.club/images/5a45a0a5ab64411cab000929.png" alt="2.1 JVM垃圾回图谱"></p><h2 id="2-1-2-Java并发图谱"><a href="#2-1-2-Java并发图谱" class="headerlink" title="2.1.2 Java并发图谱"></a>2.1.2 Java并发图谱</h2><p><img src="https://blogs.attachie.club/images/5a45a0a5ab64411cab00092a.png" alt="2.2 Java并发图谱"></p><p><img src="/images/5a45a0a5ab64411cab00092a.png" alt="2.2 Java并发图谱"></p><h2 id="2-1-3-Java集合图谱"><a href="#2-1-3-Java集合图谱" class="headerlink" title="2.1.3 Java集合图谱"></a>2.1.3 Java集合图谱</h2><p><img src="/images/5a45bf81ab64411e95000eff.png" alt="2.3 Java集合图谱"></p><h2 id="2-1-4-Java集合类图"><a href="#2-1-4-Java集合类图" class="headerlink" title="2.1.4 Java集合类图"></a>2.1.4 Java集合类图</h2><p><img src="/images/5a45bf81ab64411e95000f05.png" alt="2.4 Java集合类图"></p><h2 id="2-1-5-Java-List类图"><a href="#2-1-5-Java-List类图" class="headerlink" title="2.1.5 Java List类图"></a>2.1.5 Java List类图</h2><p><img src="/images/5a45bf81ab64411e95000f01.png" alt="2.5 Java List类图"></p><h2 id="2-1-6-Java-Map类图"><a href="#2-1-6-Java-Map类图" class="headerlink" title="2.1.6 Java Map类图"></a>2.1.6 Java Map类图</h2><p><img src="/images/5a45bf81ab64411e95000ef4.png" alt="2.6 Java Map类图"></p><h2 id="2-1-7-Java-Set类图"><a href="#2-1-7-Java-Set类图" class="headerlink" title="2.1.7 Java Set类图"></a>2.1.7 Java Set类图</h2><p><img src="/images/5a45bf81ab64411e95000f08.png" alt="2.7 Java Set类图"></p><h2 id="2-1-8-Java-TCP-IP"><a href="#2-1-8-Java-TCP-IP" class="headerlink" title="2.1.8 Java TCP/IP"></a>2.1.8 Java TCP/IP</h2><p><img src="/images/5a45bf81ab64411e95000ef7.png" alt="2.8 Java TCP IP"></p><h1 id="3-1-Hadoop技能图谱"><a href="#3-1-Hadoop技能图谱" class="headerlink" title="3.1 Hadoop技能图谱"></a>3.1 Hadoop技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000f06.png" alt="3.1 Hadoop技能图谱"></p><h1 id="3-2-大数据技能图谱"><a href="#3-2-大数据技能图谱" class="headerlink" title="3.2 大数据技能图谱"></a>3.2 大数据技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000ef6.png" alt="3.2 大数据技能图谱"></p><h1 id="4-1-云计算图谱"><a href="#4-1-云计算图谱" class="headerlink" title="4.1 云计算图谱"></a>4.1 云计算图谱</h1><p><img src="/images/5a45bf81ab64411e95000efd.png" alt="4.1 云计算图谱"></p><h1 id="4-2-云计算技能图谱"><a href="#4-2-云计算技能图谱" class="headerlink" title="4.2 云计算技能图谱"></a>4.2 云计算技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000ef8.png" alt="4.2 云计算技能图谱"></p><h1 id="5-1-IOS技能图谱"><a href="#5-1-IOS技能图谱" class="headerlink" title="5.1 IOS技能图谱"></a>5.1 IOS技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000f09.png" alt="5.1 IOS技能图谱"></p><h1 id="5-2-OpenResty技能图谱"><a href="#5-2-OpenResty技能图谱" class="headerlink" title="5.2 OpenResty技能图谱"></a>5.2 OpenResty技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000efa.png" alt="5.2 OpenResty技能图谱"></p><h1 id="5-3-前端技能图谱"><a href="#5-3-前端技能图谱" class="headerlink" title="5.3 前端技能图谱"></a>5.3 前端技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000f0c.png" alt="5.3 前端技能图谱"></p><h1 id="5-4-容器技能图谱"><a href="#5-4-容器技能图谱" class="headerlink" title="5.4 容器技能图谱"></a>5.4 容器技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000ef3.png" alt="5.4 容器技能图谱"></p><h1 id="5-5-嵌入式开发技能图谱"><a href="#5-5-嵌入式开发技能图谱" class="headerlink" title="5.5 嵌入式开发技能图谱"></a>5.5 嵌入式开发技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000ef2.png" alt="5.5 嵌入式开发技能图谱"></p><h1 id="5-6-开发语言宝典"><a href="#5-6-开发语言宝典" class="headerlink" title="5.6 开发语言宝典"></a>5.6 开发语言宝典</h1><p><img src="/images/5a45bf81ab64411e95000efb.png" alt="5.6 开发语言宝典"></p><h1 id="5-7-移动端测试图谱"><a href="#5-7-移动端测试图谱" class="headerlink" title="5.7 移动端测试图谱"></a>5.7 移动端测试图谱</h1><p><img src="/images/5a45bf81ab64411e95000f02.png" alt="5.7 移动端测试图谱"></p><h1 id="5-8-运维技能图谱"><a href="#5-8-运维技能图谱" class="headerlink" title="5.8 运维技能图谱"></a>5.8 运维技能图谱</h1><p><img src="/images/5a45bf81ab64411e95000f03.png" alt="5.8 运维技能图谱"></p><h1 id="5-9-软件工程"><a href="#5-9-软件工程" class="headerlink" title="5.9 软件工程"></a>5.9 软件工程</h1><p><img src="/images/5a45bf81ab64411e95000f00.png" alt="5.9 软件工程"></p><h1 id="5-10-DevOps"><a href="#5-10-DevOps" class="headerlink" title="5.10 DevOps"></a>5.10 DevOps</h1><p><img src="/images/5a45bf81ab64411e95000f04.png" alt="5.10 DevOps"></p><h1 id="5-11-前端开发"><a href="#5-11-前端开发" class="headerlink" title="5.11 前端开发"></a>5.11 前端开发</h1><p><img src="/images/5a45bf81ab64411e95000f07.png" alt="5.11 前端开发"></p><h1 id="5-12-后端开发"><a href="#5-12-后端开发" class="headerlink" title="5.12 后端开发"></a>5.12 后端开发</h1><p><img src="/images/5a45bf81ab64411e95000f0b.png" alt="5.12 后端开发"></p><h1 id="5-13-软件发布流程"><a href="#5-13-软件发布流程" class="headerlink" title="5.13 软件发布流程"></a>5.13 软件发布流程</h1><p><img src="/images/5a45bf81ab64411e95000efc.png" alt="5.13 软件发布流程"></p><h1 id="5-14-DBA-技能图谱1-0"><a href="#5-14-DBA-技能图谱1-0" class="headerlink" title="5.14 DBA 技能图谱1.0"></a>5.14 DBA 技能图谱1.0</h1><p><img src="/images/5a45bf81ab64411e95000f0a.png" alt="5.14 DBA 技能图谱1.0"></p><h1 id="5-15-H5技能图谱1-0"><a href="#5-15-H5技能图谱1-0" class="headerlink" title="5.15 H5技能图谱1.0"></a>5.15 H5技能图谱1.0</h1><p><img src="/images/5a45bf81ab64411e95000ef5.png" alt="5.15 H5技能图谱1.0"></p><h1 id="5-16-移动性能优化1-0"><a href="#5-16-移动性能优化1-0" class="headerlink" title="5.16 移动性能优化1.0"></a>5.16 移动性能优化1.0</h1><p><img src="/images/5a45bf81ab64411e95000ef5.png" alt="5.16 移动性能优化1.0"></p><h1 id="5-17-机器学习技能图谱"><a href="#5-17-机器学习技能图谱" class="headerlink" title="5.17 机器学习技能图谱"></a>5.17 机器学习技能图谱</h1><p><img src="/images/pasted-1.png" alt="机器学习技能图谱"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT 图谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express 基础入门</title>
      <link href="/express/deceab70.html"/>
      <url>/express/deceab70.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>该文档整理自 Express官方文档</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先假定你已经安装了 Node.js，接下来为你的应用创建一个目录，然后进入此目录并将其作为当前工作目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir myapp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> myapp</span></span><br></pre></td></tr></table></figure><p>通过 npm init 命令为你的应用创建一个 package.json 文件。 欲了解 package.json 是如何起作用的，请参考 <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">Specifics of npm’s package.json handling</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init</span></span><br></pre></td></tr></table></figure><p>此命令将要求你输入几个参数，例如此应用的名称和版本。 你可以直接按“回车”键接受默认设置即可，下面这个除外：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry point: (index.js)</span><br></pre></td></tr></table></figure><p>键入 app.js 或者你所希望的名称，这是当前应用的入口文件。如果你希望采用默认的 index.js 文件名，只需按“回车”键即可。</p><p>接下来安装 Express 并将其保存到依赖列表中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install express --save</span></span><br></pre></td></tr></table></figure><p>如果只是临时安装 Express，不想将它添加到依赖列表中，只需略去 <code>--save</code>参数即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install express</span></span><br></pre></td></tr></table></figure><p>安装 Node 模块时，如果指定了 <code>--save</code>参数，那么此模块将被添加到 <code>package.json</code> 文件中 <code>dependencies</code> 依赖列表中。 然后通过 <code>npm install</code> 命令即可自动安装依赖列表中所列出的所有模块。</p><a id="more"></a><hr><h1 id="Hello-world-实例"><a href="#Hello-world-实例" class="headerlink" title="Hello world 实例"></a>Hello world 实例</h1><p>继续之前请务必按照 <a href="#安装">安装</a> 章节执行了所有的前期准备工作。</p><p>接下来，我们一起创建一个基本的 Express 应用。</p><p>注意：这里所创建是一个最最简单的 Express 应用，并且仅仅只有一个文件 — 和通过 <a href="#Express应用生成器">Express 应用生成器</a> 所创建的应用<strong>完全不一样</strong>，Express 应用生成器所创建的应用框架包含多个 JavaScript 文件、Jade 模板和针对不同用途的子目录。</p><p>进入 myapp 目录，创建一个名为 app.js 的文件，然后将下列代码复制进去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening at http://%s:%s'</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码启动一个服务并监听从 3000 端口进入的所有连接请求。他将对所有 (/) URL 或 路由 返回 “Hello World!” 字符串。对于其他所有路径全部返回 404 Not Found。</p><blockquote><p>req (请求) 和 res (响应) 与 Node 提供的对象完全一致，因此，你可以调用 req.pipe()、req.on(‘data’, callback) 以及任何 Node 提供的方法。</p></blockquote><p>通过如下命令启动此应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node app.js</span></span><br></pre></td></tr></table></figure><p>然后在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 并查看输出结果。</p><h1 id="Express应用生成器"><a href="#Express应用生成器" class="headerlink" title="Express应用生成器"></a>Express应用生成器</h1><p>通过应用生成器工具 express 可以快速创建一个应用的骨架。</p><p>通过如下命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install express-generator -g</span></span><br></pre></td></tr></table></figure><p>-h 选项可以列出所有可用的命令行选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> express -h</span></span><br><span class="line"></span><br><span class="line">  Usage: express [options] [dir]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --help          output usage information</span><br><span class="line">    -V, --version       output the version number</span><br><span class="line">    -e, --ejs           add ejs engine support (defaults to jade)</span><br><span class="line">        --hbs           add handlebars engine support</span><br><span class="line">    -H, --hogan         add hogan.js engine support</span><br><span class="line">    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)</span><br><span class="line">        --git           add .gitignore</span><br><span class="line">    -f, --force         force on non-empty directory</span><br></pre></td></tr></table></figure><p>例如，下面的示例就是在当前工作目录下创建一个命名为 myapp 的应用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> express myapp</span></span><br><span class="line"></span><br><span class="line">   create : myapp</span><br><span class="line">   create : myapp/package.json</span><br><span class="line">   create : myapp/app.js</span><br><span class="line">   create : myapp/public</span><br><span class="line">   create : myapp/public/javascripts</span><br><span class="line">   create : myapp/public/images</span><br><span class="line">   create : myapp/routes</span><br><span class="line">   create : myapp/routes/index.js</span><br><span class="line">   create : myapp/routes/users.js</span><br><span class="line">   create : myapp/public/stylesheets</span><br><span class="line">   create : myapp/public/stylesheets/style.css</span><br><span class="line">   create : myapp/views</span><br><span class="line">   create : myapp/views/index.jade</span><br><span class="line">   create : myapp/views/layout.jade</span><br><span class="line">   create : myapp/views/error.jade</span><br><span class="line">   create : myapp/bin</span><br><span class="line">   create : myapp/bin/www</span><br></pre></td></tr></table></figure><p>然后安装所有依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> myapp </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>启动这个应用（MacOS 或 Linux 平台）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=myapp npm start</span></span><br></pre></td></tr></table></figure><p>Windows 平台使用如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> DEBUG=myapp &amp; npm start</span></span><br></pre></td></tr></table></figure><p>然后在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 网址就可以看到这个应用了。</p><p>通过 Express 应用生成器创建的应用一般都有如下目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── bin</span><br><span class="line">│   └── www</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── javascripts</span><br><span class="line">│   └── stylesheets</span><br><span class="line">│       └── style.css</span><br><span class="line">├── routes</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── users.js</span><br><span class="line">└── views</span><br><span class="line">    ├── error.jade</span><br><span class="line">    ├── index.jade</span><br><span class="line">    └── layout.jade</span><br><span class="line"></span><br><span class="line">7 directories, 9 files</span><br></pre></td></tr></table></figure><blockquote><p>通过 Express 应用生成器创建应用只是众多方法中的一种。你可以不使用它，也可以修改它让它符合你的需求，都是开源的嘛！</p></blockquote><h1 id="一个简单的-Express-路由"><a href="#一个简单的-Express-路由" class="headerlink" title="一个简单的 Express 路由"></a>一个简单的 Express 路由</h1><p>这篇教程只是对 Express 路由做一个简单的介绍。路由（Routing）是由一个 URI（或者叫路径）和一个特定的 HTTP 方法（GET、POST 等）组成的，涉及到应用如何响应客户端对某个网站节点的访问。</p><p>每一个路由都可以有一个或者多个处理器函数，当匹配到路由时，这个/些函数将被执行。</p><p>路由的定义由如下结构组成：<code>app.METHOD(PATH, HANDLER)</code>。其中，<code>app</code> 是一个 <code>express</code> 实例；METHOD 是某个 HTTP 请求方式中的一个；PATH 是服务器端的路径；HANDLER 是当路由匹配到时需要执行的函数。</p><p>本教程假定已经存在一个命名为 <code>app</code> 的 <code>express</code> 实例了，并且应用程序是运行状态。如果你还不熟悉如何创建一个应用并使其运行，请参考 Hello world 实例。</p><p>下面的代码展示了几个路由实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对网站首页的访问返回 "Hello World!" 字样</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网站首页接受 POST 请求</span></span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Got a POST request'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /user 节点接受 PUT 请求</span></span><br><span class="line">app.put(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Got a PUT request at /user'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /user 节点接受 DELETE 请求</span></span><br><span class="line">app.delete(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Got a DELETE request at /user'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于路由的详细资料，请参考 路由指南 章节。</p><h1 id="利用-Express-托管静态文件"><a href="#利用-Express-托管静态文件" class="headerlink" title="利用 Express 托管静态文件"></a>利用 Express 托管静态文件</h1><p>通过 Express 内置的 express.static 可以方便地托管静态文件，例如图片、CSS、JavaScript 文件等。</p><p>将静态资源文件所在的目录作为参数传递给 express.static 中间件就可以提供静态资源文件的访问了。例如，假设在 public 目录放置了图片、CSS 和 JavaScript 文件，你就可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure><p>现在，public 目录下面的文件就可以访问了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/images/kitten.jpg</span><br><span class="line">http://localhost:3000/css/style.css</span><br><span class="line">http://localhost:3000/js/app.js</span><br><span class="line">http://localhost:3000/images/bg.png</span><br><span class="line">http://localhost:3000/hello.html</span><br></pre></td></tr></table></figure><blockquote><p>所有文件的路径都是相对于存放目录的，因此，存放静态文件的目录名不会出现在 URL 中。</p></blockquote><p>如果你的静态资源存放在多个目录下面，你可以多次调用 express.static 中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.use(express.static(<span class="string">'files'</span>));</span><br></pre></td></tr></table></figure><p>访问静态资源文件时，express.static 中间件会根据目录添加的顺序查找所需的文件。</p><p>如果你希望所有通过 express.static 访问的文件都存放在一个“虚拟（virtual）”目录（即目录根本不存在）下面，可以通过为静态资源目录指定一个挂载路径的方式来实现，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure><p>现在，你就爱可以通过带有 “/static” 前缀的地址来访问 public 目录下面的文件了。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:3000/static/images/kitten.jpg</span></span><br><span class="line"><span class="attribute">http://localhost:3000/static/css/style.css</span></span><br><span class="line"><span class="attribute">http://localhost:3000/static/js/app.js</span></span><br><span class="line"><span class="attribute">http://localhost:3000/static/images/bg.png</span></span><br><span class="line"><span class="attribute">http://localhost:3000/static/hello.html</span></span><br></pre></td></tr></table></figure><h1 id="Express-常见问题"><a href="#Express-常见问题" class="headerlink" title="Express 常见问题"></a>Express 常见问题</h1><h2 id="我的应用该如何组织？"><a href="#我的应用该如何组织？" class="headerlink" title="我的应用该如何组织？"></a>我的应用该如何组织？</h2><p>对于这个问题其实没有一个确定的答案。这要根据你的应用的规模和参与开发的团队来确定。为了尽可能灵活，Express 自身是并没有硬性要求应用结构是哪一种的。</p><p>根据你的需求，可以把路由和其他应用相关的业务逻辑存放在任意多个文件和任意目录中。下面推荐的实例或许对你能有一些启发：</p><ul><li><a href="https://github.com/strongloop/express/blob/4.13.1/examples/route-separation/index.js#L32-L47" target="_blank" rel="noopener">Route listings</a></li><li><a href="https://github.com/strongloop/express/blob/4.13.1/examples/route-map/index.js#L52-L66" target="_blank" rel="noopener">Route map</a></li><li><a href="https://github.com/strongloop/express/tree/master/examples/mvc" target="_blank" rel="noopener">MVC style controllers</a></li></ul><p>另外，这里还有一些第三方 Express 扩展简化了这种组织方式：</p><ul><li><a href="https://github.com/expressjs/express-resource" target="_blank" rel="noopener">Resourceful routing</a></li></ul><h2 id="如何定义模型（model）？"><a href="#如何定义模型（model）？" class="headerlink" title="如何定义模型（model）？"></a>如何定义模型（model）？</h2><p>Express自身并不感知数据库是否存在。数据库功能依赖于第三方 Node 模块提供的接口。</p><h2 id="如何验证用户？"><a href="#如何验证用户？" class="headerlink" title="如何验证用户？"></a>如何验证用户？</h2><p>这是另一个 Express 不涉及的领域。你可以使用任何验证方式。对于简单的用户名/密码验证方式，可以参考<a href="https://github.com/expressjs/express/tree/master/examples/auth" target="_blank" rel="noopener">这个实例</a>。</p><h2 id="Express-支持哪些模板引擎？"><a href="#Express-支持哪些模板引擎？" class="headerlink" title="Express 支持哪些模板引擎？"></a>Express 支持哪些模板引擎？</h2><p>Express 支持任何符合 (path, locals, callback) 接口规范的模板引擎。 为了统一模板引擎的接口和缓存功能，请参考 <a href="https://github.com/visionmedia/consolidate.js" target="_blank" rel="noopener"><code>consolidate.js</code></a> 项目。其他未提及的模板引擎也可能支持 Express 接口规范。</p><h2 id="如何处理-404-？"><a href="#如何处理-404-？" class="headerlink" title="如何处理 404 ？"></a>如何处理 404 ？</h2><p>在 Express 中，404 并不是一个错误（error）。因此，错误处理器中间件并不捕获 404。这是因为 404 只是意味着某些功能没有实现。也就是说，Express 执行了所有中间件、路由之后还是没有获取到任何输出。你所需要做的就是在其所有他中间件的后面添加一个处理 404 的中间件。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">404</span>).send(<span class="string">'Sorry cant find that!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="如何设置一个错误处理器？"><a href="#如何设置一个错误处理器？" class="headerlink" title="如何设置一个错误处理器？"></a>如何设置一个错误处理器？</h1><p>错误处理器中间件的定义和其他中间件一样，唯一的区别是 4 个而不是 3 个参数，即 (err, req, res, next)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请参考<a href="http://www.expressjs.com.cn/guide/error-handling.html" target="_blank" rel="noopener">错误处理</a>章节以了解更多信息。</p><h1 id="如何渲染纯-HTML-文件？"><a href="#如何渲染纯-HTML-文件？" class="headerlink" title="如何渲染纯 HTML 文件？"></a>如何渲染纯 HTML 文件？</h1><p>不需要！无需通过 <code>res.render()</code> 渲染 <code>HTML</code>。你可以通过 <code>res.sendFile()</code> 直接对外输出 <code>HTML</code> 文件。如果你需要对外提供的资源文件很多，可以使用 <code>express.static()</code> 中间件。</p>]]></content>
      
      
      <categories>
          
          <category> Express 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
            <tag>  NodeJS </tag>
            
            <tag> Express 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
